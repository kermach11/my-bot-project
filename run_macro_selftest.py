import json
import os
from gpt_agent_cache import handle_command

def list_macro_test_files(folder="macro_tests"):
    test_files = []
    for root, _, files in os.walk(folder):
        for file in files:
            if file.endswith(".json"):
                test_files.append(os.path.join(root, file))
    return test_files

def run_all_macro_tests():
    test_files = list_macro_test_files()
    passed = 0
    failed = 0

    for path in test_files:
        print(f"\nüîç –ó–∞–ø—É—Å–∫ –º–∞–∫—Ä–æ: {path}")
        try:
            with open(path, "r", encoding="utf-8") as f:
                test_data = json.load(f)

            steps = test_data.get("steps", [])
            cmd = {"action": "macro", "steps": steps}
            print("üîÅ –ö—Ä–æ–∫–∏ –º–∞–∫—Ä–æ—Å–∞:")
            for step in steps:
                print(step)

            result = handle_command(cmd)
            test_passed = result.get("status") == "success"

            # üîç –û—á—ñ–∫—É–≤–∞–Ω–µ: —Ñ–∞–π–ª
            expected_file = test_data.get("expected_file")
            if expected_file and not os.path.exists(expected_file):
                print(f"‚ùå –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª '{expected_file}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                test_passed = False

            # üîç –û—á—ñ–∫—É–≤–∞–Ω–µ: –∫–æ–¥ —É —Ñ–∞–π–ª—ñ
            expected_code = test_data.get("expected_code")
            if expected_file and expected_code:
                try:
                    with open(expected_file, "r", encoding="utf-8") as f:
                        content = f.read()
                        if expected_code not in content:
                            print(f"‚ùå –ö–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É '{expected_file}'")
                            test_passed = False
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É '{expected_file}':", e)
                    test_passed = False

            # ‚úÖ –ù–û–í–ê –ª–æ–≥—ñ–∫–∞ ‚Äî —Ç—ñ–ª—å–∫–∏ RAW output
            expected_output = test_data.get("expected_output")
            if expected_output:
                raw_outputs = [r.get("output", "") for r in result.get("results", []) if isinstance(r, dict)]
                full_output = "\n".join(raw_outputs)
                print("üì§ Output:", repr(full_output))
                print("üîç –û—á—ñ–∫—É–≤–∞–Ω–æ:", repr(expected_output))

                if expected_output in full_output:
                    test_passed = True
                else:
                    print(f"‚ùå –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: '{expected_output}'")
                    test_passed = False

            if test_passed:
                print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ")
                passed += 1
            else:
                print("‚ùå –¢–µ—Å—Ç –ù–ï –ø—Ä–æ–π–¥–µ–Ω–æ")
                failed += 1

        except Exception as e:
            print("üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ:", e)
            failed += 1

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {passed} –ø—Ä–æ–π—à–ª–æ, {failed} –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")

if __name__ == "__main__":
    run_all_macro_tests()
