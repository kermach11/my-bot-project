# handlers/macro_builder.py
import json
from config import API_KEY
from openai import OpenAI

def handle_macro_build(cmd):
    prompt = cmd.get("prompt") or cmd.get("parameters", {}).get("prompt")
    if not prompt:
        return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–∞–∫—Ä–æ—Å—É"}

    try:
        client = OpenAI(api_key=API_KEY)

        system_prompt = """
–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–¥—É–≤–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
–ù–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–∏ JSON-–º–∞—Å–∏–≤ macro-–∫—Ä–æ–∫—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ:

[
  {"action": "create_file", "filename": "example.py", "content": "..."},
  {"action": "update_code", "file_path": "example.py", "update_type": "logging"},
  {"action": "run_python", "filename": "example.py"}
]

–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –º–∞—Å–∏–≤ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å.
"""

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
        )

        steps = json.loads(response.choices[0].message.content.strip())

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª –¥–ª—è –Ω–∞–æ—á–Ω–æ—Å—Ç—ñ
        with open("macro_output.json", "w", encoding="utf-8") as f:
            json.dump(steps, f, indent=2, ensure_ascii=False)

        return {
            "status": "success",
            "message": "‚úÖ Macro-–∫—Ä–æ–∫–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ",
            "steps": steps
        }

    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∏: {str(e)}"}
