[
  {
    "action": "create_file",
    "filename": "test_memory.txt",
    "content": "Memory test",
    "timestamp": "2025-03-26 23:04:26"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n\ndef repeat_last_action():\n    memory_file = os.path.join(base_path, \".ben_memory.json\")\n    if not os.path.exists(memory_file):\n        return {\"status\": \"error\", \"message\": \"‚ùå Memory file not found\"}\n    try:\n        with open(memory_file, \"r\", encoding=\"utf-8\") as f:\n            memory = json.load(f)\n        if not memory:\n            return {\"status\": \"error\", \"message\": \"‚ùå No memory to repeat\"}\n        last_cmd = memory[-1]\n        return handle_command(last_cmd)\n    except Exception as e:\n        return {\"status\": \"error\", \"message\": f\"‚ùå Repeat error: {str(e)}\"}\n",
    "timestamp": "2025-03-26 23:21:10"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n\ndef log_diff(filepath):\n    try:\n        result = subprocess.run([\"git\", \"diff\", filepath], capture_output=True, text=True)\n        diff = result.stdout.strip()\n        if diff:\n            timestamp = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n            with open(history_file, \"a\", encoding=\"utf-8\") as f:\n                f.write(f\"[DIFF {timestamp}] File: {filepath}\\n{diff}\\n---\\n\")\n    except Exception as e:\n        with open(history_file, \"a\", encoding=\"utf-8\") as f:\n            f.write(f\"[DIFF ERROR] {filepath}: {str(e)}\\n\")\n",
    "timestamp": "2025-03-27 08:29:43"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n\ndef log_diff(filepath):\n    try:\n        result = subprocess.run([\"git\", \"diff\", filepath], capture_output=True, text=True)\n        diff = result.stdout.strip()\n        if diff:\n            timestamp = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n            with open(history_file, \"a\", encoding=\"utf-8\") as f:\n                f.write(f\"[DIFF {timestamp}] File: {filepath}\\n{diff}\\n---\\n\")\n    except Exception as e:\n        with open(history_file, \"a\", encoding=\"utf-8\") as f:\n            f.write(f\"[DIFF ERROR] {filepath}: {str(e)}\\n\")\n",
    "timestamp": "2025-03-27 08:48:59"
  },
  {
    "action": "create_file",
    "filename": "test_self.txt",
    "content": "Hello test!",
    "timestamp": "2025-03-27 09:27:45"
  },
  {
    "action": "delete_file",
    "filename": "test_self.txt",
    "timestamp": "2025-03-27 09:27:45"
  },
  {
    "action": "create_file",
    "filename": "test_cli.txt",
    "content": "–ü—Ä–∏–≤—ñ—Ç —ñ–∑ CLI!",
    "timestamp": "2025-03-27 10:06:10"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: check_status ",
    "timestamp": "2025-03-27 10:11:03"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/ben_gui.py",
    "content": "import tkinter as tk\nfrom tkinter import messagebox, scrolledtext\nimport json\nimport os\n\nCACHE_FILE = \"cache.txt\"\n\nclass BenGUI:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Ben Assistant GUI\")\n\n        self.input_label = tk.Label(root, text=\"–í–≤–µ–¥—ñ—Ç—å JSON-–∫–æ–º–∞–Ω–¥—É\")\n        self.input_label.pack()\n\n        self.input_box = scrolledtext.ScrolledText(root, height=10, width=80)\n        self.input_box.pack()\n\n        self.send_button = tk.Button(root, text=\"‚ñ∂Ô∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏\", command=self.send_command)\n        self.send_button.pack(pady=4)\n\n        self.undo_button = tk.Button(root, text=\"‚Ü©Ô∏è Undo\", command=lambda: self.send_simple(\"undo_change\"))\n        self.undo_button.pack(pady=2)\n\n        self.repeat_button = tk.Button(root, text=\"üîÅ Repeat\", command=lambda: self.send_simple(\"repeat_last\"))\n        self.repeat_button.pack(pady=2)\n\n        self.output_label = tk.Label(root, text=\"–û—Å—Ç–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏\")\n        self.output_label.pack(pady=4)\n\n        self.history_box = scrolledtext.ScrolledText(root, height=10, width=80, state=\"disabled\")\n        self.history_box.pack()\n\n    def send_simple(self, action):\n        command = {\"action\": action}\n        self.write_cache([command])\n        self.append_history(json.dumps(command, ensure_ascii=False))\n\n    def send_command(self):\n        try:\n            text = self.input_box.get(\"1.0\", tk.END).strip()\n            if not text:\n                messagebox.showwarning(\"–£–≤–∞–≥–∞\", \"–ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î\")\n                return\n            command = json.loads(text)\n            if not isinstance(command, list):\n                command = [command]\n            self.write_cache(command)\n            self.append_history(text)\n            self.input_box.delete(\"1.0\", tk.END)\n        except Exception as e:\n            messagebox.showerror(\"–ü–æ–º–∏–ª–∫–∞\", f\"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π JSON: {str(e)}\")\n\n    def write_cache(self, data):\n        with open(CACHE_FILE, \"w\", encoding=\"utf-8\") as f:\n            json.dump(data, f, indent=2, ensure_ascii=False)\n\n    def append_history(self, text):\n        self.history_box.configure(state=\"normal\")\n        self.history_box.insert(tk.END, text + \"\\n\\n\")\n        self.history_box.configure(state=\"disabled\")\n\nif __name__ == \"__main__\":\n    if not os.path.exists(\"ben_gui_desktop\"):\n        os.makedirs(\"ben_gui_desktop\")\n\n    root = tk.Tk()\n    gui = BenGUI(root)\n    root.mainloop()",
    "timestamp": "2025-03-27 10:56:06"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/ben_gui.py",
    "timestamp": "2025-03-27 10:56:14"
  },
  {
    "action": "append_file",
    "filename": "ben_gui_desktop/ben_gui.py",
    "content": "\n        self.list_button = tk.Button(root, text=\"üìÑ List Files\", command=lambda: self.send_simple(\"list_files\"))\n        self.list_button.pack(pady=2)",
    "timestamp": "2025-03-27 10:59:00"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file ben_gui_desktop/ben_gui.py",
    "timestamp": "2025-03-27 10:59:07"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\nimport autopep8\n\n# –ö—Ä–æ–∫ 2: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤\n\ndef fix_indentation(filepath):\n    try:\n        with open(filepath, 'r', encoding='utf-8') as file:\n            code = file.read()\n\n        fixed_code = autopep8.fix_code(code)\n\n        with open(filepath, 'w', encoding='utf-8') as file:\n            file.write(fixed_code)\n\n        return {'status': 'success', 'message': f'üßπ –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –≤ —Ñ–∞–π–ª—ñ {filepath}'}\n    except Exception as e:\n        return {'status': 'error', 'message': f'‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤: {str(e)}'}\n\n# –ö—Ä–æ–∫ 3: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏\n\ndef handle_command(cmd):\n    try:\n        action = cmd.get('action')\n        filename = cmd.get('filename')\n        full_file_path = os.path.join(base_path, filename) if filename else None\n\n        if full_file_path:\n            # –í–∏–∫–ª–∏–∫–∞—î–º–æ fix_indentation –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏\n            fix_result = fix_indentation(full_file_path)\n            if fix_result['status'] == 'error':\n                return fix_result  # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ, –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\n\n        # –î–∞–ª—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —ñ–Ω—à—ñ –¥—ñ—ó, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –∑–∞–º—ñ–Ω–∏\n        if action == 'replace_in_file':\n            # –í–∞—à –∫–æ–¥ –∑–∞–º—ñ–Ω–∏\n            pass\n\n        return {'status': 'success', 'message': '–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'}\n    except Exception as e:\n        return {'status': 'error', 'message': f'‚ùå Exception: {str(e)}'}",
    "timestamp": "2025-03-27 11:39:28"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file gpt_agent_cache.py",
    "timestamp": "2025-03-27 11:39:37"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n# –í–∏–∫–ª–∏–∫–∞—î–º–æ fix_indentation –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏\nif full_file_path:\n    fix_result = fix_indentation(full_file_path)\n    if fix_result['status'] == 'error':\n        return fix_result  # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ, –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
    "timestamp": "2025-03-27 11:46:23"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file gpt_agent_cache.py",
    "timestamp": "2025-03-27 11:46:30"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\nimport sqlite3\n\n# –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite\ndef create_connection():\n    conn = sqlite3.connect('history.db')\n    return conn\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å—Ç–æ—Ä—ñ—ó\ndef create_history_table():\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    CREATE TABLE IF NOT EXISTS history (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        action TEXT NOT NULL,\n        filename TEXT,\n        content TEXT,\n        result TEXT,\n        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n    ''')\n    conn.commit()\n    conn.close()\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—é\ndef save_to_history(action, filename, content, result):\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    INSERT INTO history (action, filename, content, result)\n    VALUES (?, ?, ?, ?)\n    ''', (action, filename, content, result))\n    conn.commit()\n    conn.close()\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó\ndef get_history():\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM history ORDER BY timestamp DESC LIMIT 10')\n    rows = cursor.fetchall()\n    conn.close()\n    return rows\n",
    "timestamp": "2025-03-27 12:39:35"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file gpt_agent_cache.py",
    "timestamp": "2025-03-27 12:39:44"
  },
  {
    "action": "create_file",
    "filename": "test_ben_module.py",
    "content": "# –¶–µ–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É —Ñ—É–Ω–∫—Ü—ñ—ó update_code\n",
    "timestamp": "2025-03-28 10:54:40"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test_ben_module.py",
    "timestamp": "2025-03-28 10:54:43"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 11:11:21"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 11:12:15"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 11:35:55"
  },
  {
    "action": "create_file",
    "filename": "test1.py",
    "content": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó",
    "timestamp": "2025-03-28 11:46:58"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test1.py",
    "timestamp": "2025-03-28 11:47:02"
  },
  {
    "action": "create_file",
    "filename": "test2.py",
    "content": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è exceptions",
    "timestamp": "2025-03-28 11:47:41"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test2.py",
    "timestamp": "2025-03-28 11:47:44"
  },
  {
    "action": "create_file",
    "filename": "test3.py",
    "content": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è logging",
    "timestamp": "2025-03-28 11:47:51"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test3.py",
    "timestamp": "2025-03-28 11:47:54"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code_bulk ",
    "timestamp": "2025-03-28 11:48:17"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 11:55:44"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 12:19:22"
  },
  {
    "action": "create_file",
    "filename": "temp_test1.py",
    "content": "# ok",
    "timestamp": "2025-03-28 12:33:29"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: macro ",
    "timestamp": "2025-03-28 12:33:32"
  },
  {
    "action": "create_file",
    "filename": "temp_test1.py",
    "content": "# –°—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª, —è–∫–∏–π –º–∞—î –∑–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ",
    "timestamp": "2025-03-28 12:42:37"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: list_history ",
    "timestamp": "2025-03-28 13:22:19"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: view_sql_history ",
    "timestamp": "2025-03-28 13:48:05"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: view_sql_history ",
    "timestamp": "2025-03-28 14:04:44"
  },
  {
    "action": "append_file",
    "filename": "test_append.py",
    "content": "def test_func():\n    return True",
    "timestamp": "2025-03-28 16:27:01"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file test_append.py",
    "timestamp": "2025-03-28 16:27:04"
  },
  {
    "action": "create_file",
    "filename": "test_append.py",
    "content": "# –ü–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç—É",
    "timestamp": "2025-03-28 16:27:26"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test_append.py",
    "timestamp": "2025-03-28 16:27:30"
  },
  {
    "action": "append_file",
    "filename": "test_append.py",
    "content": "def test_func():\n    return True",
    "timestamp": "2025-03-28 16:27:56"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file test_append.py",
    "timestamp": "2025-03-28 16:27:59"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/ben_gui.py",
    "content": "import os\nimport json\nimport tkinter as tk\nfrom tkinter import ttk, scrolledtext\nfrom config import request_file, response_file\n\nclass BenGUI:\n    def __init__(self, root):\n        self.root = root\n        root.title(\"Ben Assistant GUI\")\n        root.geometry(\"700x500\")\n\n        # –í–≤—ñ–¥\n        self.action_var = tk.StringVar()\n        self.filename_var = tk.StringVar()\n        self.content_var = tk.StringVar()\n\n        ttk.Label(root, text=\"Action:\").pack()\n        ttk.Entry(root, textvariable=self.action_var).pack(fill=tk.X)\n\n        ttk.Label(root, text=\"Filename (optional):\").pack()\n        ttk.Entry(root, textvariable=self.filename_var).pack(fill=tk.X)\n\n        ttk.Label(root, text=\"Content (optional):\").pack()\n        ttk.Entry(root, textvariable=self.content_var).pack(fill=tk.X)\n\n        ttk.Button(root, text=\"üì© –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É\", command=self.send_command).pack(pady=10)\n\n        ttk.Label(root, text=\"–í—ñ–¥–ø–æ–≤—ñ–¥—å:\").pack()\n        self.response_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, height=15)\n        self.response_area.pack(fill=tk.BOTH, expand=True)\n\n    def send_command(self):\n        command = {\n            \"action\": self.action_var.get(),\n            \"filename\": self.filename_var.get(),\n            \"content\": self.content_var.get()\n        }\n        command = {k: v for k, v in command.items() if v.strip()}\n        with open(request_file, \"w\", encoding=\"utf-8\") as f:\n            json.dump([command], f, indent=2)\n        self.response_area.insert(tk.END, f\"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {json.dumps(command)}\\n\")\n        self.response_area.see(tk.END)\n\n        self.root.after(1000, self.load_response)\n\n    def load_response(self):\n        if os.path.exists(response_file):\n            with open(response_file, \"r\", encoding=\"utf-8\") as f:\n                try:\n                    data = json.load(f)\n                    self.response_area.insert(tk.END, f\"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}\\n\")\n                    self.response_area.see(tk.END)\n                except Exception as e:\n                    self.response_area.insert(tk.END, f\"‚ùå Error reading response: {e}\\n\")\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = BenGUI(root)\n    root.mainloop()",
    "timestamp": "2025-03-28 16:42:27"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/ben_gui.py",
    "timestamp": "2025-03-28 16:42:30"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 16:45:53"
  },
  {
    "action": "update_file",
    "filename": "ben_gui_desktop/ben_gui.py",
    "pattern": "from config import request_file, response_file",
    "replacement": "",
    "timestamp": "2025-03-28 16:46:28"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_file ben_gui_desktop/ben_gui.py",
    "timestamp": "2025-03-28 16:46:31"
  },
  {
    "action": "create_file",
    "filename": "ben_test_check.txt",
    "content": "‚úÖ –ë–µ–Ω –ø—Ä–∞—Ü—é—î —Å–ø—Ä–∞–≤–Ω–æ!",
    "timestamp": "2025-03-28 16:59:15"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_test_check.txt",
    "timestamp": "2025-03-28 16:59:18"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_folder ",
    "timestamp": "2025-03-28 17:01:00"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/action_selector.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk\n\nclass ActionSelector(ttk.Frame):\n    def __init__(self, parent, on_action_change):\n        super().__init__(parent)\n        self.on_action_change = on_action_change\n\n        ttk.Label(self, text=\"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\").pack(anchor=\"w\")\n\n        self.action_var = tk.StringVar()\n        self.combo = ttk.Combobox(self, textvariable=self.action_var)\n        self.combo['values'] = [\n            \"create_file\", \"append_file\", \"update_code\", \"update_code_bulk\",\n            \"replace_in_file\", \"delete_file\", \"rename_file\", \"macro\",\n            \"list_history\", \"view_sql_history\", \"run_python\"\n        ]\n        self.combo.bind(\"<<ComboboxSelected>>\", self.action_selected)\n        self.combo.pack(fill=tk.X)\n\n    def action_selected(self, event):\n        selected = self.action_var.get()\n        self.on_action_change(selected)\n\n    def get_selected_action(self):\n        return self.action_var.get()",
    "timestamp": "2025-03-28 17:01:14"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/action_selector.py",
    "timestamp": "2025-03-28 17:01:17"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/main_gui.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk\nfrom widgets.action_selector import ActionSelector\n\ndef on_action_change(action):\n    print(\"üîÑ Action changed to:\", action)\n\nroot = tk.Tk()\nroot.title(\"Ben GUI Interface\")\nroot.geometry(\"600x400\")\n\nttk.Label(root, text=\"Ben Assistant GUI\", font=(\"Arial\", 16)).pack(pady=10)\n\naction_selector = ActionSelector(root, on_action_change)\naction_selector.pack(fill=tk.X, padx=20, pady=10)\n\nroot.mainloop()",
    "timestamp": "2025-03-28 17:11:18"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/main_gui.py",
    "timestamp": "2025-03-28 17:11:21"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/parameter_form.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk\n\nclass ParameterForm(ttk.Frame):\n    def __init__(self, parent):\n        super().__init__(parent)\n        self.entries = {}\n        self.fields = [\n            \"filename\", \"content\", \"pattern\", \"replacement\",\n            \"update_type\", \"insert_at_line\", \"rollback_on_fail\"\n        ]\n\n        for field in self.fields:\n            row = ttk.Frame(self)\n            row.pack(fill=tk.X, pady=2)\n\n            ttk.Label(row, text=field + \":\", width=18).pack(side=tk.LEFT)\n            entry = ttk.Entry(row)\n            entry.pack(fill=tk.X, expand=True)\n            self.entries[field] = entry\n\n    def get_command_fields(self):\n        result = {}\n        for field, entry in self.entries.items():\n            value = entry.get().strip()\n            if value:\n                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ rollback_on_fail –≤ bool\n                if field == \"rollback_on_fail\":\n                    result[field] = value.lower() in [\"true\", \"1\", \"yes\"]\n                elif field == \"insert_at_line\":\n                    try:\n                        result[field] = int(value)\n                    except ValueError:\n                        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ\n                else:\n                    result[field] = value\n        return result\n\n    def clear(self):\n        for entry in self.entries.values():\n            entry.delete(0, tk.END)",
    "timestamp": "2025-03-28 17:12:19"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/parameter_form.py",
    "timestamp": "2025-03-28 17:12:22"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:13:06"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:13:39"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:14:25"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:15:44"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:16:06"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:17:36"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:24:43"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/history_viewer.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk, scrolledtext\n\nclass HistoryViewer(ttk.Frame):\n    def __init__(self, parent, label_text):\n        super().__init__(parent)\n        ttk.Label(self, text=label_text).pack(anchor=\"w\")\n        self.text_area = scrolledtext.ScrolledText(self, height=10, wrap=tk.WORD)\n        self.text_area.pack(fill=tk.BOTH, expand=True)\n\n    def update_history(self, data):\n        self.text_area.delete(\"1.0\", tk.END)\n        for item in data:\n            self.text_area.insert(tk.END, f\"{item}\\n\")\n        self.text_area.see(tk.END)",
    "timestamp": "2025-03-28 17:25:41"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/history_viewer.py",
    "timestamp": "2025-03-28 17:25:44"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:26:55"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:27:48"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:28:26"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:29:43"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:32:17"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/git_log_viewer.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk, scrolledtext\nimport subprocess\n\nclass GitLogViewer(ttk.Frame):\n    def __init__(self, parent):\n        super().__init__(parent)\n        ttk.Label(self, text=\"üïò Git Log\").pack(anchor=\"w\")\n        self.text_area = scrolledtext.ScrolledText(self, height=10, wrap=tk.WORD)\n        self.text_area.pack(fill=tk.BOTH, expand=True)\n\n        refresh_btn = ttk.Button(self, text=\"üîÑ –û–Ω–æ–≤–∏—Ç–∏ Git Log\", command=self.load_git_log)\n        refresh_btn.pack(pady=5)\n\n    def load_git_log(self):\n        try:\n            output = subprocess.check_output([\"git\", \"log\", \"-n\", \"10\", \"--oneline\"], stderr=subprocess.STDOUT, text=True)\n            self.text_area.delete(\"1.0\", tk.END)\n            self.text_area.insert(tk.END, output)\n            self.text_area.see(tk.END)\n        except subprocess.CalledProcessError as e:\n            self.text_area.insert(tk.END, f\"‚ùå Git Error: {e.output}\\n\")",
    "timestamp": "2025-03-28 17:34:34"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/git_log_viewer.py",
    "timestamp": "2025-03-28 17:34:37"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:35:10"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:35:20"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/template_manager.py",
    "content": "from jinja2 import Environment, FileSystemLoader\nimport os\n\nTEMPLATE_DIR = os.path.join(os.path.dirname(__file__), \"templates\")\nenv = Environment(loader=FileSystemLoader(TEMPLATE_DIR))\n\ndef render_template(template_name, context):\n    try:\n        template = env.get_template(template_name)\n        return template.render(context)\n    except Exception as e:\n        return f\"‚ùå Template rendering error: {e}\"",
    "timestamp": "2025-03-28 17:39:29"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/template_manager.py",
    "timestamp": "2025-03-28 17:39:32"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_folder ",
    "timestamp": "2025-03-28 17:48:51"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/templates/create_file.j2",
    "content": "{\n  \"action\": \"create_file\",\n  \"filename\": \"{{ filename }}\",\n  \"content\": \"{{ content }}\"\n}",
    "timestamp": "2025-03-28 17:49:18"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/templates/create_file.j2",
    "timestamp": "2025-03-28 17:49:22"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:51:03"
  }
]