[
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n# –í–∏–∫–ª–∏–∫–∞—î–º–æ fix_indentation –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏\nif full_file_path:\n    fix_result = fix_indentation(full_file_path)\n    if fix_result['status'] == 'error':\n        return fix_result  # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ, –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
    "timestamp": "2025-03-27 11:46:23"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file gpt_agent_cache.py",
    "timestamp": "2025-03-27 11:46:30"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\nimport sqlite3\n\n# –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite\ndef create_connection():\n    conn = sqlite3.connect('history.db')\n    return conn\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å—Ç–æ—Ä—ñ—ó\ndef create_history_table():\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    CREATE TABLE IF NOT EXISTS history (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        action TEXT NOT NULL,\n        filename TEXT,\n        content TEXT,\n        result TEXT,\n        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n    ''')\n    conn.commit()\n    conn.close()\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—é\ndef save_to_history(action, filename, content, result):\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    INSERT INTO history (action, filename, content, result)\n    VALUES (?, ?, ?, ?)\n    ''', (action, filename, content, result))\n    conn.commit()\n    conn.close()\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó\ndef get_history():\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM history ORDER BY timestamp DESC LIMIT 10')\n    rows = cursor.fetchall()\n    conn.close()\n    return rows\n",
    "timestamp": "2025-03-27 12:39:35"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file gpt_agent_cache.py",
    "timestamp": "2025-03-27 12:39:44"
  },
  {
    "action": "create_file",
    "filename": "test_ben_module.py",
    "content": "# –¶–µ–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É —Ñ—É–Ω–∫—Ü—ñ—ó update_code\n",
    "timestamp": "2025-03-28 10:54:40"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test_ben_module.py",
    "timestamp": "2025-03-28 10:54:43"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 11:11:21"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 11:12:15"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 11:35:55"
  },
  {
    "action": "create_file",
    "filename": "test1.py",
    "content": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó",
    "timestamp": "2025-03-28 11:46:58"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test1.py",
    "timestamp": "2025-03-28 11:47:02"
  },
  {
    "action": "create_file",
    "filename": "test2.py",
    "content": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è exceptions",
    "timestamp": "2025-03-28 11:47:41"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test2.py",
    "timestamp": "2025-03-28 11:47:44"
  },
  {
    "action": "create_file",
    "filename": "test3.py",
    "content": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è logging",
    "timestamp": "2025-03-28 11:47:51"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test3.py",
    "timestamp": "2025-03-28 11:47:54"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code_bulk ",
    "timestamp": "2025-03-28 11:48:17"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 11:55:44"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 12:19:22"
  },
  {
    "action": "create_file",
    "filename": "temp_test1.py",
    "content": "# ok",
    "timestamp": "2025-03-28 12:33:29"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: macro ",
    "timestamp": "2025-03-28 12:33:32"
  },
  {
    "action": "create_file",
    "filename": "temp_test1.py",
    "content": "# –°—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª, —è–∫–∏–π –º–∞—î –∑–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ",
    "timestamp": "2025-03-28 12:42:37"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: list_history ",
    "timestamp": "2025-03-28 13:22:19"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: view_sql_history ",
    "timestamp": "2025-03-28 13:48:05"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: view_sql_history ",
    "timestamp": "2025-03-28 14:04:44"
  },
  {
    "action": "append_file",
    "filename": "test_append.py",
    "content": "def test_func():\n    return True",
    "timestamp": "2025-03-28 16:27:01"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file test_append.py",
    "timestamp": "2025-03-28 16:27:04"
  },
  {
    "action": "create_file",
    "filename": "test_append.py",
    "content": "# –ü–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç—É",
    "timestamp": "2025-03-28 16:27:26"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file test_append.py",
    "timestamp": "2025-03-28 16:27:30"
  },
  {
    "action": "append_file",
    "filename": "test_append.py",
    "content": "def test_func():\n    return True",
    "timestamp": "2025-03-28 16:27:56"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file test_append.py",
    "timestamp": "2025-03-28 16:27:59"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/ben_gui.py",
    "content": "import os\nimport json\nimport tkinter as tk\nfrom tkinter import ttk, scrolledtext\nfrom config import request_file, response_file\n\nclass BenGUI:\n    def __init__(self, root):\n        self.root = root\n        root.title(\"Ben Assistant GUI\")\n        root.geometry(\"700x500\")\n\n        # –í–≤—ñ–¥\n        self.action_var = tk.StringVar()\n        self.filename_var = tk.StringVar()\n        self.content_var = tk.StringVar()\n\n        ttk.Label(root, text=\"Action:\").pack()\n        ttk.Entry(root, textvariable=self.action_var).pack(fill=tk.X)\n\n        ttk.Label(root, text=\"Filename (optional):\").pack()\n        ttk.Entry(root, textvariable=self.filename_var).pack(fill=tk.X)\n\n        ttk.Label(root, text=\"Content (optional):\").pack()\n        ttk.Entry(root, textvariable=self.content_var).pack(fill=tk.X)\n\n        ttk.Button(root, text=\"üì© –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É\", command=self.send_command).pack(pady=10)\n\n        ttk.Label(root, text=\"–í—ñ–¥–ø–æ–≤—ñ–¥—å:\").pack()\n        self.response_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, height=15)\n        self.response_area.pack(fill=tk.BOTH, expand=True)\n\n    def send_command(self):\n        command = {\n            \"action\": self.action_var.get(),\n            \"filename\": self.filename_var.get(),\n            \"content\": self.content_var.get()\n        }\n        command = {k: v for k, v in command.items() if v.strip()}\n        with open(request_file, \"w\", encoding=\"utf-8\") as f:\n            json.dump([command], f, indent=2)\n        self.response_area.insert(tk.END, f\"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {json.dumps(command)}\\n\")\n        self.response_area.see(tk.END)\n\n        self.root.after(1000, self.load_response)\n\n    def load_response(self):\n        if os.path.exists(response_file):\n            with open(response_file, \"r\", encoding=\"utf-8\") as f:\n                try:\n                    data = json.load(f)\n                    self.response_area.insert(tk.END, f\"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}\\n\")\n                    self.response_area.see(tk.END)\n                except Exception as e:\n                    self.response_area.insert(tk.END, f\"‚ùå Error reading response: {e}\\n\")\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = BenGUI(root)\n    root.mainloop()",
    "timestamp": "2025-03-28 16:42:27"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/ben_gui.py",
    "timestamp": "2025-03-28 16:42:30"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 16:45:53"
  },
  {
    "action": "update_file",
    "filename": "ben_gui_desktop/ben_gui.py",
    "pattern": "from config import request_file, response_file",
    "replacement": "",
    "timestamp": "2025-03-28 16:46:28"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_file ben_gui_desktop/ben_gui.py",
    "timestamp": "2025-03-28 16:46:31"
  },
  {
    "action": "create_file",
    "filename": "ben_test_check.txt",
    "content": "‚úÖ –ë–µ–Ω –ø—Ä–∞—Ü—é—î —Å–ø—Ä–∞–≤–Ω–æ!",
    "timestamp": "2025-03-28 16:59:15"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_test_check.txt",
    "timestamp": "2025-03-28 16:59:18"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_folder ",
    "timestamp": "2025-03-28 17:01:00"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/action_selector.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk\n\nclass ActionSelector(ttk.Frame):\n    def __init__(self, parent, on_action_change):\n        super().__init__(parent)\n        self.on_action_change = on_action_change\n\n        ttk.Label(self, text=\"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:\").pack(anchor=\"w\")\n\n        self.action_var = tk.StringVar()\n        self.combo = ttk.Combobox(self, textvariable=self.action_var)\n        self.combo['values'] = [\n            \"create_file\", \"append_file\", \"update_code\", \"update_code_bulk\",\n            \"replace_in_file\", \"delete_file\", \"rename_file\", \"macro\",\n            \"list_history\", \"view_sql_history\", \"run_python\"\n        ]\n        self.combo.bind(\"<<ComboboxSelected>>\", self.action_selected)\n        self.combo.pack(fill=tk.X)\n\n    def action_selected(self, event):\n        selected = self.action_var.get()\n        self.on_action_change(selected)\n\n    def get_selected_action(self):\n        return self.action_var.get()",
    "timestamp": "2025-03-28 17:01:14"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/action_selector.py",
    "timestamp": "2025-03-28 17:01:17"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/main_gui.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk\nfrom widgets.action_selector import ActionSelector\n\ndef on_action_change(action):\n    print(\"üîÑ Action changed to:\", action)\n\nroot = tk.Tk()\nroot.title(\"Ben GUI Interface\")\nroot.geometry(\"600x400\")\n\nttk.Label(root, text=\"Ben Assistant GUI\", font=(\"Arial\", 16)).pack(pady=10)\n\naction_selector = ActionSelector(root, on_action_change)\naction_selector.pack(fill=tk.X, padx=20, pady=10)\n\nroot.mainloop()",
    "timestamp": "2025-03-28 17:11:18"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/main_gui.py",
    "timestamp": "2025-03-28 17:11:21"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/parameter_form.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk\n\nclass ParameterForm(ttk.Frame):\n    def __init__(self, parent):\n        super().__init__(parent)\n        self.entries = {}\n        self.fields = [\n            \"filename\", \"content\", \"pattern\", \"replacement\",\n            \"update_type\", \"insert_at_line\", \"rollback_on_fail\"\n        ]\n\n        for field in self.fields:\n            row = ttk.Frame(self)\n            row.pack(fill=tk.X, pady=2)\n\n            ttk.Label(row, text=field + \":\", width=18).pack(side=tk.LEFT)\n            entry = ttk.Entry(row)\n            entry.pack(fill=tk.X, expand=True)\n            self.entries[field] = entry\n\n    def get_command_fields(self):\n        result = {}\n        for field, entry in self.entries.items():\n            value = entry.get().strip()\n            if value:\n                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ rollback_on_fail –≤ bool\n                if field == \"rollback_on_fail\":\n                    result[field] = value.lower() in [\"true\", \"1\", \"yes\"]\n                elif field == \"insert_at_line\":\n                    try:\n                        result[field] = int(value)\n                    except ValueError:\n                        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ\n                else:\n                    result[field] = value\n        return result\n\n    def clear(self):\n        for entry in self.entries.values():\n            entry.delete(0, tk.END)",
    "timestamp": "2025-03-28 17:12:19"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/parameter_form.py",
    "timestamp": "2025-03-28 17:12:22"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:13:06"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:13:39"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:14:25"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:15:44"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:16:06"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:17:36"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:24:43"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/history_viewer.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk, scrolledtext\n\nclass HistoryViewer(ttk.Frame):\n    def __init__(self, parent, label_text):\n        super().__init__(parent)\n        ttk.Label(self, text=label_text).pack(anchor=\"w\")\n        self.text_area = scrolledtext.ScrolledText(self, height=10, wrap=tk.WORD)\n        self.text_area.pack(fill=tk.BOTH, expand=True)\n\n    def update_history(self, data):\n        self.text_area.delete(\"1.0\", tk.END)\n        for item in data:\n            self.text_area.insert(tk.END, f\"{item}\\n\")\n        self.text_area.see(tk.END)",
    "timestamp": "2025-03-28 17:25:41"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/history_viewer.py",
    "timestamp": "2025-03-28 17:25:44"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:26:55"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:27:48"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:28:26"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:29:43"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:32:17"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/git_log_viewer.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk, scrolledtext\nimport subprocess\n\nclass GitLogViewer(ttk.Frame):\n    def __init__(self, parent):\n        super().__init__(parent)\n        ttk.Label(self, text=\"üïò Git Log\").pack(anchor=\"w\")\n        self.text_area = scrolledtext.ScrolledText(self, height=10, wrap=tk.WORD)\n        self.text_area.pack(fill=tk.BOTH, expand=True)\n\n        refresh_btn = ttk.Button(self, text=\"üîÑ –û–Ω–æ–≤–∏—Ç–∏ Git Log\", command=self.load_git_log)\n        refresh_btn.pack(pady=5)\n\n    def load_git_log(self):\n        try:\n            output = subprocess.check_output([\"git\", \"log\", \"-n\", \"10\", \"--oneline\"], stderr=subprocess.STDOUT, text=True)\n            self.text_area.delete(\"1.0\", tk.END)\n            self.text_area.insert(tk.END, output)\n            self.text_area.see(tk.END)\n        except subprocess.CalledProcessError as e:\n            self.text_area.insert(tk.END, f\"‚ùå Git Error: {e.output}\\n\")",
    "timestamp": "2025-03-28 17:34:34"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/git_log_viewer.py",
    "timestamp": "2025-03-28 17:34:37"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:35:10"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:35:20"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/template_manager.py",
    "content": "from jinja2 import Environment, FileSystemLoader\nimport os\n\nTEMPLATE_DIR = os.path.join(os.path.dirname(__file__), \"templates\")\nenv = Environment(loader=FileSystemLoader(TEMPLATE_DIR))\n\ndef render_template(template_name, context):\n    try:\n        template = env.get_template(template_name)\n        return template.render(context)\n    except Exception as e:\n        return f\"‚ùå Template rendering error: {e}\"",
    "timestamp": "2025-03-28 17:39:29"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/template_manager.py",
    "timestamp": "2025-03-28 17:39:32"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_folder ",
    "timestamp": "2025-03-28 17:48:51"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/templates/create_file.j2",
    "content": "{\n  \"action\": \"create_file\",\n  \"filename\": \"{{ filename }}\",\n  \"content\": \"{{ content }}\"\n}",
    "timestamp": "2025-03-28 17:49:18"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/templates/create_file.j2",
    "timestamp": "2025-03-28 17:49:22"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:51:03"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 17:51:13"
  },
  {
    "action": "append_file",
    "filename": "{{ filename }}",
    "content": "{{ content }}",
    "timestamp": "2025-03-28 17:53:51"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file {{ filename }}",
    "timestamp": "2025-03-28 17:53:55"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/templates/append_file.j2",
    "content": "{\n  \"action\": \"append_file\",\n  \"filename\": \"{{ filename }}\",\n  \"content\": \"{{ content }}\"\n}",
    "timestamp": "2025-03-28 17:54:26"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/templates/append_file.j2",
    "timestamp": "2025-03-28 17:54:29"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/templates/update_code.j2",
    "content": "{\n  \"action\": \"update_code\",\n  \"file_path\": \"{{ file_path }}\",\n  \"update_type\": \"{{ update_type }}\",\n  \"insert_at_line\": {{ insert_at_line }},\n  \"code\": \"{{ code | replace(\"\\n\", \"\\\\n\") }}\"\n}",
    "timestamp": "2025-03-28 17:56:17"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/templates/update_code.j2",
    "timestamp": "2025-03-28 17:56:20"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/templates/update_code_bulk.j2",
    "content": "{\n  \"action\": \"update_code_bulk\",\n  \"updates\": [\n    {\n      \"file_path\": \"{{ file_path }}\",\n      \"update_type\": \"{{ update_type }}\",\n      \"insert_at_line\": {{ insert_at_line }},\n      \"code\": \"{{ code | replace(\"\\n\", \"\\\\n\") }}\"\n    }\n  ]\n}",
    "timestamp": "2025-03-28 19:48:21"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/templates/update_code_bulk.j2",
    "timestamp": "2025-03-28 19:48:24"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/templates/replace_in_file.j2",
    "content": "{\n  \"action\": \"replace_in_file\",\n  \"filename\": \"{{ filename }}\",\n  \"pattern\": \"{{ pattern }}\",\n  \"replacement\": \"{{ replacement }}\"\n}",
    "timestamp": "2025-03-28 19:50:02"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/templates/replace_in_file.j2",
    "timestamp": "2025-03-28 19:50:05"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/templates/macro.j2",
    "content": "{\n  \"action\": \"macro\",\n  \"steps\": {{ steps | tojson }}\n}",
    "timestamp": "2025-03-28 19:50:33"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/templates/macro.j2",
    "timestamp": "2025-03-28 19:50:37"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/user_profile_panel.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk\n\nclass UserProfilePanel(ttk.Frame):\n    def __init__(self, parent):\n        super().__init__(parent)\n\n        style = ttk.Style()\n        style.configure(\"TLabel\", font=(\"Helvetica\", 11))\n        style.configure(\"TCombobox\", padding=6)\n        style.configure(\"TCheckbutton\", padding=6)\n\n        ttk.Label(self, text=\"üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\", font=(\"Helvetica\", 14, \"bold\")).pack(anchor=\"w\", pady=(0, 10))\n\n        # –¢–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n        ttk.Label(self, text=\"üé® –¢–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:\").pack(anchor=\"w\")\n        self.theme_var = tk.StringVar(value=\"light\")\n        ttk.Combobox(self, textvariable=self.theme_var, values=[\"light\", \"dark\", \"system\"]).pack(fill=tk.X, pady=5)\n\n        # –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n        ttk.Label(self, text=\"üîê –†–æ–ª—å:\").pack(anchor=\"w\")\n        self.role_var = tk.StringVar(value=\"developer\")\n        ttk.Combobox(self, textvariable=self.role_var, values=[\"developer\", \"admin\", \"viewer\"]).pack(fill=tk.X, pady=5)\n\n        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∂—É—Ä–Ω–∞–ª—É\n        ttk.Label(self, text=\"üîç –§—ñ–ª—å—Ç—Ä –ø–æ–¥—ñ–π:\").pack(anchor=\"w\")\n        self.filter_var = tk.StringVar(value=\"all\")\n        ttk.Combobox(self, textvariable=self.filter_var, values=[\"all\", \"commands\", \"errors\", \"system\"]).pack(fill=tk.X, pady=5)\n\n        # –ü—Ä–æ–≥–∞–ª–∏–Ω–∏ –¥–ª—è –µ—Å—Ç–µ—Ç–∏–∫–∏\n        ttk.Label(self, text=\"\").pack(pady=10)\n\n    def get_profile_settings(self):\n        return {\n            \"theme\": self.theme_var.get(),\n            \"role\": self.role_var.get(),\n            \"filter\": self.filter_var.get()\n        }",
    "timestamp": "2025-03-28 19:57:26"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/user_profile_panel.py",
    "timestamp": "2025-03-28 19:57:29"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 19:58:04"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 19:58:38"
  },
  {
    "action": "replace_in_file",
    "filename": "ben_gui_desktop/main_gui.py",
    "pattern": "history_memory\\.update_history\\(responses\\[0\\]\\.get\\(\"history\", \\[\\]\\)\\).*?history_sqlite\\.update_history\\(responses\\[1\\]\\.get\\(\"history\", \\[\\]\\)\\)",
    "replacement": "profile_settings = user_profile.get_profile_settings()\nflt = profile_settings.get(\"filter\", \"all\")\n\nfiltered_memory = filter_history_entries(responses[0].get(\"history\", []), flt)\nfiltered_sqlite = filter_history_entries(responses[1].get(\"history\", []), flt)\n\nhistory_memory.update_history(filtered_memory)\nhistory_sqlite.update_history(filtered_sqlite)",
    "timestamp": "2025-03-28 20:31:54"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: replace_in_file ben_gui_desktop/main_gui.py",
    "timestamp": "2025-03-28 20:31:57"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 20:36:39"
  },
  {
    "action": "replace_in_file",
    "filename": "ben_gui_desktop/main_gui.py",
    "pattern": "root\\.mainloop\\(\\)",
    "replacement": "def on_close():\n    if user_profile:\n        user_profile.save_profile_settings()\n    root.destroy()\n\nroot.protocol(\"WM_DELETE_WINDOW\", on_close)\nroot.mainloop()",
    "timestamp": "2025-03-28 20:39:55"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: replace_in_file ben_gui_desktop/main_gui.py",
    "timestamp": "2025-03-28 20:39:58"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 20:45:09"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 20:45:50"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/template_editor.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk, messagebox, scrolledtext\nimport os\n\nclass TemplateEditor(ttk.Frame):\n    def __init__(self, parent):\n        super().__init__(parent)\n\n        self.template_dir = os.path.join(os.path.dirname(__file__), '..', 'templates')\n        self.current_template = None\n        self.unsaved_changes = False\n\n        ttk.Label(self, text=\"üìÅ Template Editor\", font=(\"Helvetica\", 14, \"bold\")).pack(anchor=\"w\", pady=(0, 5))\n\n        top_frame = ttk.Frame(self)\n        top_frame.pack(fill=tk.X)\n\n        self.template_selector = ttk.Combobox(top_frame, state=\"readonly\")\n        self.template_selector.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))\n        self.template_selector.bind(\"<<ComboboxSelected>>\", self.load_selected_template)\n\n        ttk.Button(top_frame, text=\"üîÑ Refresh List\", command=self.refresh_list).pack(side=tk.LEFT)\n\n        self.editor = scrolledtext.ScrolledText(self, wrap=tk.WORD, height=12)\n        self.editor.pack(fill=tk.BOTH, expand=True, pady=5)\n        self.editor.bind(\"<Key>\", lambda e: self.set_unsaved())\n\n        save_btn = ttk.Button(self, text=\"üíæ Save\", command=self.save_template)\n        save_btn.pack(pady=5)\n\n        self.refresh_list()\n        parent.protocol(\"WM_DELETE_WINDOW\", self.on_close)\n\n    def refresh_list(self):\n        try:\n            files = [f for f in os.listdir(self.template_dir) if f.endswith(\".j2\")]\n            self.template_selector[\"values\"] = files\n            if files:\n                self.template_selector.current(0)\n                self.load_selected_template()\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"‚ùå Failed to load templates: {e}\")\n\n    def load_selected_template(self, event=None):\n        if self.unsaved_changes:\n            if not messagebox.askyesno(\"Unsaved\", \"‚ö†Ô∏è Unsaved changes. Discard?\"):\n                return\n        name = self.template_selector.get()\n        path = os.path.join(self.template_dir, name)\n        try:\n            with open(path, \"r\", encoding=\"utf-8\") as f:\n                content = f.read()\n            self.editor.delete(\"1.0\", tk.END)\n            self.editor.insert(tk.END, content)\n            self.current_template = name\n            self.unsaved_changes = False\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"‚ùå Failed to load: {e}\")\n\n    def save_template(self):\n        if not self.current_template:\n            return\n        try:\n            content = self.editor.get(\"1.0\", tk.END)\n            path = os.path.join(self.template_dir, self.current_template)\n            with open(path, \"w\", encoding=\"utf-8\") as f:\n                f.write(content)\n            self.unsaved_changes = False\n            messagebox.showinfo(\"Saved\", f\"‚úÖ Saved {self.current_template}\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"‚ùå Failed to save: {e}\")\n\n    def set_unsaved(self):\n        self.unsaved_changes = True\n\n    def on_close(self):\n        if self.unsaved_changes:\n            if not messagebox.askyesno(\"Exit\", \"‚ö†Ô∏è Unsaved changes. Exit anyway?\"):\n                return\n        self.master.destroy()",
    "timestamp": "2025-03-28 20:48:53"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/template_editor.py",
    "timestamp": "2025-03-28 20:48:57"
  },
  {
    "action": "replace_in_file",
    "filename": "ben_gui_desktop/widgets/template_editor.py",
    "pattern": "self\\.template_selector\\.bind\\(\"<<ComboboxSelected>>\", self\\.load_selected_template\\)",
    "replacement": "self.template_selector.bind(\"<<ComboboxSelected>>\", self.load_selected_template)\n\n        ttk.Button(top_frame, text=\"üÜï New Template\", command=self.create_new_template).pack(side=tk.LEFT, padx=(5, 0))",
    "timestamp": "2025-03-28 20:53:45"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: replace_in_file ben_gui_desktop/widgets/template_editor.py",
    "timestamp": "2025-03-28 20:53:48"
  },
  {
    "action": "replace_in_file",
    "filename": "ben_gui_desktop/widgets/template_editor.py",
    "pattern": "# self\\.template_selector\\.bind\\(\"<<ComboboxSelected>>\", self\\.load_selected_template\\)",
    "replacement": "# self.template_selector.bind(\"<<ComboboxSelected>>\", self.load_selected_template)\n\n    def create_new_template(self):\n        name = tk.simpledialog.askstring(\"New Template\", \"Enter filename (with .j2):\")\n        if not name or not name.endswith(\".j2\"):\n            messagebox.showerror(\"Error\", \"‚ùå Invalid filename\")\n            return\n        path = os.path.join(self.template_dir, name)\n        if os.path.exists(path):\n            messagebox.showerror(\"Error\", \"‚ùå File already exists\")\n            return\n        with open(path, \"w\", encoding=\"utf-8\") as f:\n            f.write(\"{\\n  \\\"action\\\": \\\"\\\"\\n}\")\n        self.refresh_list()\n        self.template_selector.set(name)\n        self.load_selected_template()",
    "timestamp": "2025-03-28 20:55:05"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: replace_in_file ben_gui_desktop/widgets/template_editor.py",
    "timestamp": "2025-03-28 20:55:08"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: update_code ",
    "timestamp": "2025-03-28 21:16:42"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/widgets/macro_builder.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk, messagebox\nimport json\n\nclass MacroBuilder(ttk.Frame):\n    def __init__(self, parent):\n        super().__init__(parent)\n\n        self.steps = []\n\n        ttk.Label(self, text=\"üß± Macro Builder\", font=(\"Helvetica\", 14, \"bold\")).pack(anchor=\"w\", pady=(0, 5))\n\n        self.listbox = tk.Listbox(self)\n        self.listbox.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n\n        form_frame = ttk.Frame(self)\n        form_frame.pack(fill=tk.X, padx=5)\n\n        ttk.Label(form_frame, text=\"Action:\").pack(side=tk.LEFT)\n        self.action_var = tk.StringVar()\n        self.action_entry = ttk.Entry(form_frame, textvariable=self.action_var)\n        self.action_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 5))\n        ttk.Button(form_frame, text=\"‚ûï Add\", command=self.add_step).pack(side=tk.LEFT)\n        ttk.Button(form_frame, text=\"üóë Remove\", command=self.remove_selected).pack(side=tk.LEFT, padx=(5, 0))\n\n        ttk.Button(self, text=\"üíæ Save Macro\", command=self.save_macro).pack(pady=5)\n\n    def add_step(self):\n        action = self.action_var.get().strip()\n        if action:\n            self.steps.append({\"action\": action})\n            self.listbox.insert(tk.END, action)\n            self.action_var.set(\"\")\n\n    def remove_selected(self):\n        selected = self.listbox.curselection()\n        if not selected:\n            return\n        index = selected[0]\n        self.listbox.delete(index)\n        del self.steps[index]\n\n    def save_macro(self):\n        if not self.steps:\n            messagebox.showerror(\"Error\", \"No steps to save\")\n            return\n        macro = {\n            \"action\": \"macro\",\n            \"steps\": self.steps\n        }\n        with open(\"macro_command.json\", \"w\", encoding=\"utf-8\") as f:\n            json.dump(macro, f, indent=2)\n        messagebox.showinfo(\"Saved\", \"‚úÖ Macro saved to macro_command.json\")",
    "timestamp": "2025-03-28 21:19:24"
  }
]