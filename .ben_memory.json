[
  {
    "action": "create_file",
    "filename": "test_memory.txt",
    "content": "Memory test",
    "timestamp": "2025-03-26 23:04:26"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n\ndef repeat_last_action():\n    memory_file = os.path.join(base_path, \".ben_memory.json\")\n    if not os.path.exists(memory_file):\n        return {\"status\": \"error\", \"message\": \"‚ùå Memory file not found\"}\n    try:\n        with open(memory_file, \"r\", encoding=\"utf-8\") as f:\n            memory = json.load(f)\n        if not memory:\n            return {\"status\": \"error\", \"message\": \"‚ùå No memory to repeat\"}\n        last_cmd = memory[-1]\n        return handle_command(last_cmd)\n    except Exception as e:\n        return {\"status\": \"error\", \"message\": f\"‚ùå Repeat error: {str(e)}\"}\n",
    "timestamp": "2025-03-26 23:21:10"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n\ndef log_diff(filepath):\n    try:\n        result = subprocess.run([\"git\", \"diff\", filepath], capture_output=True, text=True)\n        diff = result.stdout.strip()\n        if diff:\n            timestamp = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n            with open(history_file, \"a\", encoding=\"utf-8\") as f:\n                f.write(f\"[DIFF {timestamp}] File: {filepath}\\n{diff}\\n---\\n\")\n    except Exception as e:\n        with open(history_file, \"a\", encoding=\"utf-8\") as f:\n            f.write(f\"[DIFF ERROR] {filepath}: {str(e)}\\n\")\n",
    "timestamp": "2025-03-27 08:29:43"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n\ndef log_diff(filepath):\n    try:\n        result = subprocess.run([\"git\", \"diff\", filepath], capture_output=True, text=True)\n        diff = result.stdout.strip()\n        if diff:\n            timestamp = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n            with open(history_file, \"a\", encoding=\"utf-8\") as f:\n                f.write(f\"[DIFF {timestamp}] File: {filepath}\\n{diff}\\n---\\n\")\n    except Exception as e:\n        with open(history_file, \"a\", encoding=\"utf-8\") as f:\n            f.write(f\"[DIFF ERROR] {filepath}: {str(e)}\\n\")\n",
    "timestamp": "2025-03-27 08:48:59"
  },
  {
    "action": "create_file",
    "filename": "test_self.txt",
    "content": "Hello test!",
    "timestamp": "2025-03-27 09:27:45"
  },
  {
    "action": "delete_file",
    "filename": "test_self.txt",
    "timestamp": "2025-03-27 09:27:45"
  },
  {
    "action": "create_file",
    "filename": "test_cli.txt",
    "content": "–ü—Ä–∏–≤—ñ—Ç —ñ–∑ CLI!",
    "timestamp": "2025-03-27 10:06:10"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: check_status ",
    "timestamp": "2025-03-27 10:11:03"
  },
  {
    "action": "create_file",
    "filename": "ben_gui_desktop/ben_gui.py",
    "content": "import tkinter as tk\nfrom tkinter import messagebox, scrolledtext\nimport json\nimport os\n\nCACHE_FILE = \"cache.txt\"\n\nclass BenGUI:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Ben Assistant GUI\")\n\n        self.input_label = tk.Label(root, text=\"–í–≤–µ–¥—ñ—Ç—å JSON-–∫–æ–º–∞–Ω–¥—É\")\n        self.input_label.pack()\n\n        self.input_box = scrolledtext.ScrolledText(root, height=10, width=80)\n        self.input_box.pack()\n\n        self.send_button = tk.Button(root, text=\"‚ñ∂Ô∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏\", command=self.send_command)\n        self.send_button.pack(pady=4)\n\n        self.undo_button = tk.Button(root, text=\"‚Ü©Ô∏è Undo\", command=lambda: self.send_simple(\"undo_change\"))\n        self.undo_button.pack(pady=2)\n\n        self.repeat_button = tk.Button(root, text=\"üîÅ Repeat\", command=lambda: self.send_simple(\"repeat_last\"))\n        self.repeat_button.pack(pady=2)\n\n        self.output_label = tk.Label(root, text=\"–û—Å—Ç–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏\")\n        self.output_label.pack(pady=4)\n\n        self.history_box = scrolledtext.ScrolledText(root, height=10, width=80, state=\"disabled\")\n        self.history_box.pack()\n\n    def send_simple(self, action):\n        command = {\"action\": action}\n        self.write_cache([command])\n        self.append_history(json.dumps(command, ensure_ascii=False))\n\n    def send_command(self):\n        try:\n            text = self.input_box.get(\"1.0\", tk.END).strip()\n            if not text:\n                messagebox.showwarning(\"–£–≤–∞–≥–∞\", \"–ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î\")\n                return\n            command = json.loads(text)\n            if not isinstance(command, list):\n                command = [command]\n            self.write_cache(command)\n            self.append_history(text)\n            self.input_box.delete(\"1.0\", tk.END)\n        except Exception as e:\n            messagebox.showerror(\"–ü–æ–º–∏–ª–∫–∞\", f\"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π JSON: {str(e)}\")\n\n    def write_cache(self, data):\n        with open(CACHE_FILE, \"w\", encoding=\"utf-8\") as f:\n            json.dump(data, f, indent=2, ensure_ascii=False)\n\n    def append_history(self, text):\n        self.history_box.configure(state=\"normal\")\n        self.history_box.insert(tk.END, text + \"\\n\\n\")\n        self.history_box.configure(state=\"disabled\")\n\nif __name__ == \"__main__\":\n    if not os.path.exists(\"ben_gui_desktop\"):\n        os.makedirs(\"ben_gui_desktop\")\n\n    root = tk.Tk()\n    gui = BenGUI(root)\n    root.mainloop()",
    "timestamp": "2025-03-27 10:56:06"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: create_file ben_gui_desktop/ben_gui.py",
    "timestamp": "2025-03-27 10:56:14"
  },
  {
    "action": "append_file",
    "filename": "ben_gui_desktop/ben_gui.py",
    "content": "\n        self.list_button = tk.Button(root, text=\"üìÑ List Files\", command=lambda: self.send_simple(\"list_files\"))\n        self.list_button.pack(pady=2)",
    "timestamp": "2025-03-27 10:59:00"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file ben_gui_desktop/ben_gui.py",
    "timestamp": "2025-03-27 10:59:07"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\nimport autopep8\n\n# –ö—Ä–æ–∫ 2: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤\n\ndef fix_indentation(filepath):\n    try:\n        with open(filepath, 'r', encoding='utf-8') as file:\n            code = file.read()\n\n        fixed_code = autopep8.fix_code(code)\n\n        with open(filepath, 'w', encoding='utf-8') as file:\n            file.write(fixed_code)\n\n        return {'status': 'success', 'message': f'üßπ –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –≤ —Ñ–∞–π–ª—ñ {filepath}'}\n    except Exception as e:\n        return {'status': 'error', 'message': f'‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤: {str(e)}'}\n\n# –ö—Ä–æ–∫ 3: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏\n\ndef handle_command(cmd):\n    try:\n        action = cmd.get('action')\n        filename = cmd.get('filename')\n        full_file_path = os.path.join(base_path, filename) if filename else None\n\n        if full_file_path:\n            # –í–∏–∫–ª–∏–∫–∞—î–º–æ fix_indentation –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏\n            fix_result = fix_indentation(full_file_path)\n            if fix_result['status'] == 'error':\n                return fix_result  # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ, –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\n\n        # –î–∞–ª—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —ñ–Ω—à—ñ –¥—ñ—ó, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –∑–∞–º—ñ–Ω–∏\n        if action == 'replace_in_file':\n            # –í–∞—à –∫–æ–¥ –∑–∞–º—ñ–Ω–∏\n            pass\n\n        return {'status': 'success', 'message': '–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'}\n    except Exception as e:\n        return {'status': 'error', 'message': f'‚ùå Exception: {str(e)}'}",
    "timestamp": "2025-03-27 11:39:28"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file gpt_agent_cache.py",
    "timestamp": "2025-03-27 11:39:37"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\n# –í–∏–∫–ª–∏–∫–∞—î–º–æ fix_indentation –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏\nif full_file_path:\n    fix_result = fix_indentation(full_file_path)\n    if fix_result['status'] == 'error':\n        return fix_result  # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ, –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
    "timestamp": "2025-03-27 11:46:23"
  },
  {
    "action": "git_push",
    "message": "‚úÖ Auto-commit: append_file gpt_agent_cache.py",
    "timestamp": "2025-03-27 11:46:30"
  },
  {
    "action": "append_file",
    "filename": "gpt_agent_cache.py",
    "content": "\nimport sqlite3\n\n# –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite\ndef create_connection():\n    conn = sqlite3.connect('history.db')\n    return conn\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å—Ç–æ—Ä—ñ—ó\ndef create_history_table():\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    CREATE TABLE IF NOT EXISTS history (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        action TEXT NOT NULL,\n        filename TEXT,\n        content TEXT,\n        result TEXT,\n        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n    ''')\n    conn.commit()\n    conn.close()\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—é\ndef save_to_history(action, filename, content, result):\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    INSERT INTO history (action, filename, content, result)\n    VALUES (?, ?, ?, ?)\n    ''', (action, filename, content, result))\n    conn.commit()\n    conn.close()\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó\ndef get_history():\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM history ORDER BY timestamp DESC LIMIT 10')\n    rows = cursor.fetchall()\n    conn.close()\n    return rows\n",
    "timestamp": "2025-03-27 12:39:35"
  }
]