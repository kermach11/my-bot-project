[
  {
    "status": "success",
    "content": "import tkinter as tk\nfrom tkinter import ttk\nfrom widgets.action_selector import ActionSelector\nfrom tkinter import scrolledtext\nimport os\nfrom widgets.git_log_viewer import GitLogViewer\nfrom template_manager import render_template\nfrom widgets.user_profile_panel import UserProfilePanel\nfrom widgets.template_editor import TemplateEditor\nfrom widgets.history_viewer import HistoryViewer\nfrom widgets.macro_builder import MacroBuilder\n\nimport json\n\nfrom widgets.parameter_form import ParameterForm\n\ndef filter_history_entries(entries, filter_type):\n    if filter_type == \"all\":\n        return entries\n    elif filter_type == \"commands\":\n        return [e for e in entries if e.get(\"action\")]\n    elif filter_type == \"errors\":\n        return [e for e in entries if e.get(\"status\") == \"error\"]\n    elif filter_type == \"system\":\n        return [e for e in entries if not e.get(\"action\") and not e.get(\"status\")]\n    return entries\n\ndef on_action_change(action):\n    user_profile = UserProfilePanel(root)\n    user_profile.pack(fill=tk.X, padx=20, pady=10)\n\n    template_editor = TemplateEditor(root)\n    template_editor.pack(fill=tk.BOTH, expand=True, padx=20, pady=5)\n\n    print(\"üîÑ Action changed to:\", action)\n\nroot = tk.Tk()\nroot.title(\"Ben GUI Interface\")\nroot.geometry(\"600x400\")\n\nttk.Label(root, text=\"Ben Assistant GUI\", font=(\"Arial\", 16)).pack(pady=10)\nhistory_memory = HistoryViewer(root, \"üß† –Ü—Å—Ç–æ—Ä—ñ—è .ben_memory.json\")\ngit_log = GitLogViewer(root)\ngit_log.pack(fill=tk.BOTH, expand=True, padx=20, pady=5)\nhistory_memory.pack(fill=tk.BOTH, expand=True, padx=20, pady=5)\n\nhistory_sqlite = HistoryViewer(root, \"üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑ SQLite\")\nhistory_sqlite.pack(fill=tk.BOTH, expand=True, padx=20, pady=5)\n\ndef insert_from_template():\n    action = action_selector.get_selected_action()\n    fields = parameter_form.get_command_fields()\n    template_name = f\"{action}.j2\"\n    rendered = render_template(template_name, fields)\n\n    # üõ°Ô∏è –ê–≤—Ç–æ–≤–∞–ª—ñ–¥–∞—Ç–æ—Ä JSON\n    try:\n        parsed = json.loads(rendered)\n    except json.JSONDecodeError as e:\n        response_area.insert(tk.END, f\"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —à–∞–±–ª–æ–Ω {template_name}:\\n{e}\\n\")\n        response_area.see(tk.END)\n        return\n\n    # ‚úÖ –Ø–∫—â–æ JSON –≤–∞–ª—ñ–¥–Ω–∏–π ‚Äî –≤—Å—Ç–∞–≤–∏—Ç–∏ —É —Ñ–æ—Ä–º—É\n    parameter_form.entries.get(\"filename\", ttk.Entry()).delete(0, tk.END)\n    parameter_form.entries.get(\"filename\", ttk.Entry()).insert(0, parsed.get(\"filename\", \"\"))\n    parameter_form.entries.get(\"content\", ttk.Entry()).delete(0, tk.END)\n    parameter_form.entries.get(\"content\", ttk.Entry()).insert(0, parsed.get(\"content\", \"\"))\n    response_area.insert(tk.END, f\"üß© –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —à–∞–±–ª–æ–Ω {template_name}\\n\")\n    response_area.see(tk.END)\n\ninsert_tpl_btn = ttk.Button(root, text=\"üß© Insert from Template\", command=insert_from_template)\ninsert_tpl_btn.pack(pady=5)\n\nimport ast\nparameter_form = ParameterForm(root)\ndef check_duplicate_function():\n    content = parameter_form.get_command_fields().get(\"content\")\n    filename = parameter_form.get_command_fields().get(\"filename\")\n    if not content or not filename:\n        response_area.insert(tk.END, \"‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ content —ñ filename\\n\")\n        return\n    try:\n        new_ast = ast.parse(content)\n        new_func_name = next((n.name for n in ast.walk(new_ast) if isinstance(n, ast.FunctionDef)), None)\n        if not new_func_name:\n            response_area.insert(tk.END, \"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–º º—è —Ñ—É–Ω–∫—Ü—ñ—ó —É content\\n\")\n            return\n\n        file_path = os.path.join(os.path.dirname(__file__), filename)\n        if not os.path.exists(file_path):\n            response_area.insert(tk.END, \"‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –¥—É–±–ª—é–≤–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ\\n\")\n            return\n\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            existing_ast = ast.parse(f.read())\n        for node in ast.walk(existing_ast):\n            if isinstance(node, ast.FunctionDef) and node.name == new_func_name:\n                response_area.insert(tk.END, f\"‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è '{new_func_name}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ '{filename}'\\n\")\n                return\n        response_area.insert(tk.END, f\"‚úÖ –§—É–Ω–∫—Ü—ñ—è '{new_func_name}' –≤—ñ–¥—Å—É—Ç–Ω—è –≤ '{filename}' ‚Äî –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–ª—è—Ç–∏\\n\")\n    except Exception as e:\n        response_area.insert(tk.END, f\"‚ùå Error: {e}\\n\")\n\ncheck_btn = ttk.Button(root, text=\"üß† –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞ –¥—É–±–ª—å\", command=check_duplicate_function)\ncheck_btn.pack(pady=5)\ndef refresh_history():\n    cmds = [\n        {\"action\": \"list_history\"},\n        {\"action\": \"view_sql_history\"}\n    ]\n    with open(request_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(cmds, f, indent=2)\n\n    def load():\n        if os.path.exists(response_file):\n            with open(response_file, \"r\", encoding=\"utf-8\") as f:\n                try:\n                    responses = json.load(f)\n                    history_memory.update_history(responses[0].get(\"history\", []))\n                    history_sqlite.update_history(responses[1].get(\"history\", []))\n                except Exception as e:\n                    response_area.insert(tk.END, f\"‚ùå Error loading history: {e}\\n\")\n    root.after(1500, load)\n\nrefresh_btn = ttk.Button(root, text=\"üîÅ –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é\", command=refresh_history)\nrefresh_btn.pack(pady=5)\nresponse_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, height=10)\nresponse_area.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)\n\nmacro_builder = MacroBuilder(root, response_area)\nmacro_builder.pack(fill=tk.BOTH, expand=True, padx=20, pady=5)\n\n# [BEN-ANCHOR: run_macro_button]\nrun_macro_btn = ttk.Button(root, text=\"‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–∞–∫—Ä–æ—Å\", command=macro_builder.run_macro)\nrun_macro_btn.pack(pady=5)\n# [BEN-ANCHOR-END]\n\nstatus_label = ttk.Label(root, text=\"üü° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞–≥–µ–Ω—Ç–∞...\")\nstatus_label.pack(pady=5)\nrequest_file = \"request.json\"\nresponse_file = \"gpt_response.json\"\n\ndef test_python_file():\n    filename = parameter_form.get_command_fields().get(\"filename\")\n    if not filename:\n        response_area.insert(tk.END, \"‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å 'filename' –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.\\n\")\n        return\n    command = {\"action\": \"test_python\", \"filename\": filename}\n    with open(request_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump([command], f, indent=2)\n    def show_result():\n        if os.path.exists(response_file):\n            with open(response_file, \"r\", encoding=\"utf-8\") as f:\n                try:\n                    result = json.load(f)\n                    response_area.insert(tk.END, f\"üß™ –¢–µ—Å—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}\\n\")\n                    response_area.see(tk.END)\n                except Exception as e:\n                    response_area.insert(tk.END, f\"‚ùå Error: {e}\\n\")\n    root.after(1000, show_result)\n\ntest_button = ttk.Button(root, text=\"üß™ Test Python File\", command=test_python_file)\ntest_button.pack(pady=5)\n\ndef undo_last_change():\n    filename = parameter_form.get_command_fields().get(\"filename\")\n    if not filename:\n        response_area.insert(tk.END, \"‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å 'filename' –¥–ª—è –≤—ñ–¥–∫–∞—Ç—É.\\n\")\n        return\n    cmd = {\"action\": \"undo_change\", \"filename\": filename}\n    with open(request_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump([cmd], f, indent=2)\n\n    response_area.insert(tk.END, f\"‚Ü©Ô∏è –í—ñ–¥–∫–∞—Ç –∑–º—ñ–Ω –¥–ª—è: {filename}\\n\")\n    response_area.see(tk.END)\n    root.after(1000, load_response)\n\nundo_btn = ttk.Button(root, text=\"‚Ü©Ô∏è Undo Last Change\", command=undo_last_change)\nundo_btn.pack(pady=5)\n\ndef check_agent_status():\n    command = {\"action\": \"check_status\"}\n    with open(request_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump([command], f, indent=2)\n\n    def update_status():\n        if os.path.exists(response_file):\n            with open(response_file, \"r\", encoding=\"utf-8\") as f:\n                try:\n                    response = json.load(f)[0]\n                    msg = response.get(\"message\", \"‚ùå No response\")\n                    if \"üü¢\" in msg:\n                        status_label.config(text=msg)\n                    else:\n                        status_label.config(text=f\"üî¥ {msg}\")\n                except:\n                    status_label.config(text=\"‚ùå Error reading agent status\")\n\n    root.after(1500, update_status)\n\ncheck_agent_status()\n\n\ndef load_response():\n    if os.path.exists(response_file):\n        with open(response_file, \"r\", encoding=\"utf-8\") as f:\n            try:\n                data = json.load(f)\n\n                # üß† –ê–≤—Ç–æ–∞–Ω–∞–ª—ñ–∑ –≤—ñ–¥—Ö–∏–ª–µ–Ω—å\n                if isinstance(data, list):\n                    for entry in data:\n                        msg = entry.get(\"message\", \"\")\n                        if \"‚ùå\" in msg or \"‚ö†Ô∏è\" in msg:\n                            response_area.insert(tk.END, f\"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {msg}\\n\")\n                else:\n                    msg = data.get(\"message\", \"\")\n                    if \"‚ùå\" in msg or \"‚ö†Ô∏è\" in msg:\n                        response_area.insert(tk.END, f\"‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {msg}\\n\")\n\n                response_area.insert(tk.END, f\"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, indent=2, ensure_ascii=False)}\\n\")\n                response_area.see(tk.END)\n            except Exception as e:\n                response_area.insert(tk.END, f\"‚ùå Error reading response: {e}\\n\")\n\n\ndef send_command():\n    command = {\n        \"action\": action_selector.get_selected_action()\n    }\n    command.update(parameter_form.get_command_fields())\n\n    with open(request_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump([command], f, indent=2)\n\n    response_area.insert(tk.END, f\"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {json.dumps(command, indent=2, ensure_ascii=False)}\\n\")\n    response_area.see(tk.END)\n    root.after(1000, load_response)\nparameter_form.pack(fill=tk.X, padx=20, pady=10)\n\nsend_button = ttk.Button(root, text=\"üì© –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É\", command=send_command)\nsend_button.pack(pady=10)\naction_selector = ActionSelector(root, on_action_change)\naction_selector.pack(fill=tk.X, padx=20, pady=10)\n\ndef on_close():\n    if user_profile:\n        user_profile.save_profile_settings()\n    root.destroy()\n\nroot.protocol(\"WM_DELETE_WINDOW\", on_close)\nroot.mainloop()"
  },
  {
    "status": "success",
    "message": "‚úÖ ben_gui_desktop/main_gui.py –ø—Ä–æ–π—à–æ–≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É"
  }
]