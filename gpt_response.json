[
  {
    "status": "success",
    "files": {
      ".ben_memory.json": "[\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/widgets/parameter_form.py\",\n    \"content\": \"import tkinter as tk\\nfrom tkinter import ttk\\n\\nclass ParameterForm(ttk.Frame):\\n    def __init__(self, parent):\\n        super().__init__(parent)\\n        self.entries = {}\\n        self.fields = [\\n            \\\"filename\\\", \\\"content\\\", \\\"pattern\\\", \\\"replacement\\\",\\n            \\\"update_type\\\", \\\"insert_at_line\\\", \\\"rollback_on_fail\\\"\\n        ]\\n\\n        for field in self.fields:\\n            row = ttk.Frame(self)\\n            row.pack(fill=tk.X, pady=2)\\n\\n            ttk.Label(row, text=field + \\\":\\\", width=18).pack(side=tk.LEFT)\\n            entry = ttk.Entry(row)\\n            entry.pack(fill=tk.X, expand=True)\\n            self.entries[field] = entry\\n\\n    def get_command_fields(self):\\n        result = {}\\n        for field, entry in self.entries.items():\\n            value = entry.get().strip()\\n            if value:\\n                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ rollback_on_fail –≤ bool\\n                if field == \\\"rollback_on_fail\\\":\\n                    result[field] = value.lower() in [\\\"true\\\", \\\"1\\\", \\\"yes\\\"]\\n                elif field == \\\"insert_at_line\\\":\\n                    try:\\n                        result[field] = int(value)\\n                    except ValueError:\\n                        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ\\n                else:\\n                    result[field] = value\\n        return result\\n\\n    def clear(self):\\n        for entry in self.entries.values():\\n            entry.delete(0, tk.END)\",\n    \"timestamp\": \"2025-03-28 17:12:19\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/parameter_form.py\",\n    \"timestamp\": \"2025-03-28 17:12:22\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:13:06\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:13:39\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:14:25\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:15:44\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:16:06\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:17:36\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:24:43\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/widgets/history_viewer.py\",\n    \"content\": \"import tkinter as tk\\nfrom tkinter import ttk, scrolledtext\\n\\nclass HistoryViewer(ttk.Frame):\\n    def __init__(self, parent, label_text):\\n        super().__init__(parent)\\n        ttk.Label(self, text=label_text).pack(anchor=\\\"w\\\")\\n        self.text_area = scrolledtext.ScrolledText(self, height=10, wrap=tk.WORD)\\n        self.text_area.pack(fill=tk.BOTH, expand=True)\\n\\n    def update_history(self, data):\\n        self.text_area.delete(\\\"1.0\\\", tk.END)\\n        for item in data:\\n            self.text_area.insert(tk.END, f\\\"{item}\\\\n\\\")\\n        self.text_area.see(tk.END)\",\n    \"timestamp\": \"2025-03-28 17:25:41\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/history_viewer.py\",\n    \"timestamp\": \"2025-03-28 17:25:44\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:26:55\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:27:48\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:28:26\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:29:43\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:32:17\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/widgets/git_log_viewer.py\",\n    \"content\": \"import tkinter as tk\\nfrom tkinter import ttk, scrolledtext\\nimport subprocess\\n\\nclass GitLogViewer(ttk.Frame):\\n    def __init__(self, parent):\\n        super().__init__(parent)\\n        ttk.Label(self, text=\\\"üïò Git Log\\\").pack(anchor=\\\"w\\\")\\n        self.text_area = scrolledtext.ScrolledText(self, height=10, wrap=tk.WORD)\\n        self.text_area.pack(fill=tk.BOTH, expand=True)\\n\\n        refresh_btn = ttk.Button(self, text=\\\"üîÑ –û–Ω–æ–≤–∏—Ç–∏ Git Log\\\", command=self.load_git_log)\\n        refresh_btn.pack(pady=5)\\n\\n    def load_git_log(self):\\n        try:\\n            output = subprocess.check_output([\\\"git\\\", \\\"log\\\", \\\"-n\\\", \\\"10\\\", \\\"--oneline\\\"], stderr=subprocess.STDOUT, text=True)\\n            self.text_area.delete(\\\"1.0\\\", tk.END)\\n            self.text_area.insert(tk.END, output)\\n            self.text_area.see(tk.END)\\n        except subprocess.CalledProcessError as e:\\n            self.text_area.insert(tk.END, f\\\"‚ùå Git Error: {e.output}\\\\n\\\")\",\n    \"timestamp\": \"2025-03-28 17:34:34\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/git_log_viewer.py\",\n    \"timestamp\": \"2025-03-28 17:34:37\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:35:10\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:35:20\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/template_manager.py\",\n    \"content\": \"from jinja2 import Environment, FileSystemLoader\\nimport os\\n\\nTEMPLATE_DIR = os.path.join(os.path.dirname(__file__), \\\"templates\\\")\\nenv = Environment(loader=FileSystemLoader(TEMPLATE_DIR))\\n\\ndef render_template(template_name, context):\\n    try:\\n        template = env.get_template(template_name)\\n        return template.render(context)\\n    except Exception as e:\\n        return f\\\"‚ùå Template rendering error: {e}\\\"\",\n    \"timestamp\": \"2025-03-28 17:39:29\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/template_manager.py\",\n    \"timestamp\": \"2025-03-28 17:39:32\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_folder \",\n    \"timestamp\": \"2025-03-28 17:48:51\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/templates/create_file.j2\",\n    \"content\": \"{\\n  \\\"action\\\": \\\"create_file\\\",\\n  \\\"filename\\\": \\\"{{ filename }}\\\",\\n  \\\"content\\\": \\\"{{ content }}\\\"\\n}\",\n    \"timestamp\": \"2025-03-28 17:49:18\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/templates/create_file.j2\",\n    \"timestamp\": \"2025-03-28 17:49:22\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:51:03\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 17:51:13\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"{{ filename }}\",\n    \"content\": \"{{ content }}\",\n    \"timestamp\": \"2025-03-28 17:53:51\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: append_file {{ filename }}\",\n    \"timestamp\": \"2025-03-28 17:53:55\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/templates/append_file.j2\",\n    \"content\": \"{\\n  \\\"action\\\": \\\"append_file\\\",\\n  \\\"filename\\\": \\\"{{ filename }}\\\",\\n  \\\"content\\\": \\\"{{ content }}\\\"\\n}\",\n    \"timestamp\": \"2025-03-28 17:54:26\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/templates/append_file.j2\",\n    \"timestamp\": \"2025-03-28 17:54:29\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/templates/update_code.j2\",\n    \"content\": \"{\\n  \\\"action\\\": \\\"update_code\\\",\\n  \\\"file_path\\\": \\\"{{ file_path }}\\\",\\n  \\\"update_type\\\": \\\"{{ update_type }}\\\",\\n  \\\"insert_at_line\\\": {{ insert_at_line }},\\n  \\\"code\\\": \\\"{{ code | replace(\\\"\\\\n\\\", \\\"\\\\\\\\n\\\") }}\\\"\\n}\",\n    \"timestamp\": \"2025-03-28 17:56:17\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/templates/update_code.j2\",\n    \"timestamp\": \"2025-03-28 17:56:20\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/templates/update_code_bulk.j2\",\n    \"content\": \"{\\n  \\\"action\\\": \\\"update_code_bulk\\\",\\n  \\\"updates\\\": [\\n    {\\n      \\\"file_path\\\": \\\"{{ file_path }}\\\",\\n      \\\"update_type\\\": \\\"{{ update_type }}\\\",\\n      \\\"insert_at_line\\\": {{ insert_at_line }},\\n      \\\"code\\\": \\\"{{ code | replace(\\\"\\\\n\\\", \\\"\\\\\\\\n\\\") }}\\\"\\n    }\\n  ]\\n}\",\n    \"timestamp\": \"2025-03-28 19:48:21\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/templates/update_code_bulk.j2\",\n    \"timestamp\": \"2025-03-28 19:48:24\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/templates/replace_in_file.j2\",\n    \"content\": \"{\\n  \\\"action\\\": \\\"replace_in_file\\\",\\n  \\\"filename\\\": \\\"{{ filename }}\\\",\\n  \\\"pattern\\\": \\\"{{ pattern }}\\\",\\n  \\\"replacement\\\": \\\"{{ replacement }}\\\"\\n}\",\n    \"timestamp\": \"2025-03-28 19:50:02\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/templates/replace_in_file.j2\",\n    \"timestamp\": \"2025-03-28 19:50:05\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/templates/macro.j2\",\n    \"content\": \"{\\n  \\\"action\\\": \\\"macro\\\",\\n  \\\"steps\\\": {{ steps | tojson }}\\n}\",\n    \"timestamp\": \"2025-03-28 19:50:33\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/templates/macro.j2\",\n    \"timestamp\": \"2025-03-28 19:50:37\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/widgets/user_profile_panel.py\",\n    \"content\": \"import tkinter as tk\\nfrom tkinter import ttk\\n\\nclass UserProfilePanel(ttk.Frame):\\n    def __init__(self, parent):\\n        super().__init__(parent)\\n\\n        style = ttk.Style()\\n        style.configure(\\\"TLabel\\\", font=(\\\"Helvetica\\\", 11))\\n        style.configure(\\\"TCombobox\\\", padding=6)\\n        style.configure(\\\"TCheckbutton\\\", padding=6)\\n\\n        ttk.Label(self, text=\\\"üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\\\", font=(\\\"Helvetica\\\", 14, \\\"bold\\\")).pack(anchor=\\\"w\\\", pady=(0, 10))\\n\\n        # –¢–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\\n        ttk.Label(self, text=\\\"üé® –¢–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:\\\").pack(anchor=\\\"w\\\")\\n        self.theme_var = tk.StringVar(value=\\\"light\\\")\\n        ttk.Combobox(self, textvariable=self.theme_var, values=[\\\"light\\\", \\\"dark\\\", \\\"system\\\"]).pack(fill=tk.X, pady=5)\\n\\n        # –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\\n        ttk.Label(self, text=\\\"üîê –†–æ–ª—å:\\\").pack(anchor=\\\"w\\\")\\n        self.role_var = tk.StringVar(value=\\\"developer\\\")\\n        ttk.Combobox(self, textvariable=self.role_var, values=[\\\"developer\\\", \\\"admin\\\", \\\"viewer\\\"]).pack(fill=tk.X, pady=5)\\n\\n        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∂—É—Ä–Ω–∞–ª—É\\n        ttk.Label(self, text=\\\"üîç –§—ñ–ª—å—Ç—Ä –ø–æ–¥—ñ–π:\\\").pack(anchor=\\\"w\\\")\\n        self.filter_var = tk.StringVar(value=\\\"all\\\")\\n        ttk.Combobox(self, textvariable=self.filter_var, values=[\\\"all\\\", \\\"commands\\\", \\\"errors\\\", \\\"system\\\"]).pack(fill=tk.X, pady=5)\\n\\n        # –ü—Ä–æ–≥–∞–ª–∏–Ω–∏ –¥–ª—è –µ—Å—Ç–µ—Ç–∏–∫–∏\\n        ttk.Label(self, text=\\\"\\\").pack(pady=10)\\n\\n    def get_profile_settings(self):\\n        return {\\n            \\\"theme\\\": self.theme_var.get(),\\n            \\\"role\\\": self.role_var.get(),\\n            \\\"filter\\\": self.filter_var.get()\\n        }\",\n    \"timestamp\": \"2025-03-28 19:57:26\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/user_profile_panel.py\",\n    \"timestamp\": \"2025-03-28 19:57:29\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 19:58:04\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 19:58:38\"\n  },\n  {\n    \"action\": \"replace_in_file\",\n    \"filename\": \"ben_gui_desktop/main_gui.py\",\n    \"pattern\": \"history_memory\\\\.update_history\\\\(responses\\\\[0\\\\]\\\\.get\\\\(\\\"history\\\", \\\\[\\\\]\\\\)\\\\).*?history_sqlite\\\\.update_history\\\\(responses\\\\[1\\\\]\\\\.get\\\\(\\\"history\\\", \\\\[\\\\]\\\\)\\\\)\",\n    \"replacement\": \"profile_settings = user_profile.get_profile_settings()\\nflt = profile_settings.get(\\\"filter\\\", \\\"all\\\")\\n\\nfiltered_memory = filter_history_entries(responses[0].get(\\\"history\\\", []), flt)\\nfiltered_sqlite = filter_history_entries(responses[1].get(\\\"history\\\", []), flt)\\n\\nhistory_memory.update_history(filtered_memory)\\nhistory_sqlite.update_history(filtered_sqlite)\",\n    \"timestamp\": \"2025-03-28 20:31:54\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: replace_in_file ben_gui_desktop/main_gui.py\",\n    \"timestamp\": \"2025-03-28 20:31:57\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 20:36:39\"\n  },\n  {\n    \"action\": \"replace_in_file\",\n    \"filename\": \"ben_gui_desktop/main_gui.py\",\n    \"pattern\": \"root\\\\.mainloop\\\\(\\\\)\",\n    \"replacement\": \"def on_close():\\n    if user_profile:\\n        user_profile.save_profile_settings()\\n    root.destroy()\\n\\nroot.protocol(\\\"WM_DELETE_WINDOW\\\", on_close)\\nroot.mainloop()\",\n    \"timestamp\": \"2025-03-28 20:39:55\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: replace_in_file ben_gui_desktop/main_gui.py\",\n    \"timestamp\": \"2025-03-28 20:39:58\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 20:45:09\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 20:45:50\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/widgets/template_editor.py\",\n    \"content\": \"import tkinter as tk\\nfrom tkinter import ttk, messagebox, scrolledtext\\nimport os\\n\\nclass TemplateEditor(ttk.Frame):\\n    def __init__(self, parent):\\n        super().__init__(parent)\\n\\n        self.template_dir = os.path.join(os.path.dirname(__file__), '..', 'templates')\\n        self.current_template = None\\n        self.unsaved_changes = False\\n\\n        ttk.Label(self, text=\\\"üìÅ Template Editor\\\", font=(\\\"Helvetica\\\", 14, \\\"bold\\\")).pack(anchor=\\\"w\\\", pady=(0, 5))\\n\\n        top_frame = ttk.Frame(self)\\n        top_frame.pack(fill=tk.X)\\n\\n        self.template_selector = ttk.Combobox(top_frame, state=\\\"readonly\\\")\\n        self.template_selector.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))\\n        self.template_selector.bind(\\\"<<ComboboxSelected>>\\\", self.load_selected_template)\\n\\n        ttk.Button(top_frame, text=\\\"üîÑ Refresh List\\\", command=self.refresh_list).pack(side=tk.LEFT)\\n\\n        self.editor = scrolledtext.ScrolledText(self, wrap=tk.WORD, height=12)\\n        self.editor.pack(fill=tk.BOTH, expand=True, pady=5)\\n        self.editor.bind(\\\"<Key>\\\", lambda e: self.set_unsaved())\\n\\n        save_btn = ttk.Button(self, text=\\\"üíæ Save\\\", command=self.save_template)\\n        save_btn.pack(pady=5)\\n\\n        self.refresh_list()\\n        parent.protocol(\\\"WM_DELETE_WINDOW\\\", self.on_close)\\n\\n    def refresh_list(self):\\n        try:\\n            files = [f for f in os.listdir(self.template_dir) if f.endswith(\\\".j2\\\")]\\n            self.template_selector[\\\"values\\\"] = files\\n            if files:\\n                self.template_selector.current(0)\\n                self.load_selected_template()\\n        except Exception as e:\\n            messagebox.showerror(\\\"Error\\\", f\\\"‚ùå Failed to load templates: {e}\\\")\\n\\n    def load_selected_template(self, event=None):\\n        if self.unsaved_changes:\\n            if not messagebox.askyesno(\\\"Unsaved\\\", \\\"‚ö†Ô∏è Unsaved changes. Discard?\\\"):\\n                return\\n        name = self.template_selector.get()\\n        path = os.path.join(self.template_dir, name)\\n        try:\\n            with open(path, \\\"r\\\", encoding=\\\"utf-8\\\") as f:\\n                content = f.read()\\n            self.editor.delete(\\\"1.0\\\", tk.END)\\n            self.editor.insert(tk.END, content)\\n            self.current_template = name\\n            self.unsaved_changes = False\\n        except Exception as e:\\n            messagebox.showerror(\\\"Error\\\", f\\\"‚ùå Failed to load: {e}\\\")\\n\\n    def save_template(self):\\n        if not self.current_template:\\n            return\\n        try:\\n            content = self.editor.get(\\\"1.0\\\", tk.END)\\n            path = os.path.join(self.template_dir, self.current_template)\\n            with open(path, \\\"w\\\", encoding=\\\"utf-8\\\") as f:\\n                f.write(content)\\n            self.unsaved_changes = False\\n            messagebox.showinfo(\\\"Saved\\\", f\\\"‚úÖ Saved {self.current_template}\\\")\\n        except Exception as e:\\n            messagebox.showerror(\\\"Error\\\", f\\\"‚ùå Failed to save: {e}\\\")\\n\\n    def set_unsaved(self):\\n        self.unsaved_changes = True\\n\\n    def on_close(self):\\n        if self.unsaved_changes:\\n            if not messagebox.askyesno(\\\"Exit\\\", \\\"‚ö†Ô∏è Unsaved changes. Exit anyway?\\\"):\\n                return\\n        self.master.destroy()\",\n    \"timestamp\": \"2025-03-28 20:48:53\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/template_editor.py\",\n    \"timestamp\": \"2025-03-28 20:48:57\"\n  },\n  {\n    \"action\": \"replace_in_file\",\n    \"filename\": \"ben_gui_desktop/widgets/template_editor.py\",\n    \"pattern\": \"self\\\\.template_selector\\\\.bind\\\\(\\\"<<ComboboxSelected>>\\\", self\\\\.load_selected_template\\\\)\",\n    \"replacement\": \"self.template_selector.bind(\\\"<<ComboboxSelected>>\\\", self.load_selected_template)\\n\\n        ttk.Button(top_frame, text=\\\"üÜï New Template\\\", command=self.create_new_template).pack(side=tk.LEFT, padx=(5, 0))\",\n    \"timestamp\": \"2025-03-28 20:53:45\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: replace_in_file ben_gui_desktop/widgets/template_editor.py\",\n    \"timestamp\": \"2025-03-28 20:53:48\"\n  },\n  {\n    \"action\": \"replace_in_file\",\n    \"filename\": \"ben_gui_desktop/widgets/template_editor.py\",\n    \"pattern\": \"# self\\\\.template_selector\\\\.bind\\\\(\\\"<<ComboboxSelected>>\\\", self\\\\.load_selected_template\\\\)\",\n    \"replacement\": \"# self.template_selector.bind(\\\"<<ComboboxSelected>>\\\", self.load_selected_template)\\n\\n    def create_new_template(self):\\n        name = tk.simpledialog.askstring(\\\"New Template\\\", \\\"Enter filename (with .j2):\\\")\\n        if not name or not name.endswith(\\\".j2\\\"):\\n            messagebox.showerror(\\\"Error\\\", \\\"‚ùå Invalid filename\\\")\\n            return\\n        path = os.path.join(self.template_dir, name)\\n        if os.path.exists(path):\\n            messagebox.showerror(\\\"Error\\\", \\\"‚ùå File already exists\\\")\\n            return\\n        with open(path, \\\"w\\\", encoding=\\\"utf-8\\\") as f:\\n            f.write(\\\"{\\\\n  \\\\\\\"action\\\\\\\": \\\\\\\"\\\\\\\"\\\\n}\\\")\\n        self.refresh_list()\\n        self.template_selector.set(name)\\n        self.load_selected_template()\",\n    \"timestamp\": \"2025-03-28 20:55:05\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: replace_in_file ben_gui_desktop/widgets/template_editor.py\",\n    \"timestamp\": \"2025-03-28 20:55:08\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 21:16:42\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_desktop/widgets/macro_builder.py\",\n    \"content\": \"import tkinter as tk\\nfrom tkinter import ttk, messagebox\\nimport json\\n\\nclass MacroBuilder(ttk.Frame):\\n    def __init__(self, parent):\\n        super().__init__(parent)\\n\\n        self.steps = []\\n\\n        ttk.Label(self, text=\\\"üß± Macro Builder\\\", font=(\\\"Helvetica\\\", 14, \\\"bold\\\")).pack(anchor=\\\"w\\\", pady=(0, 5))\\n\\n        self.listbox = tk.Listbox(self)\\n        self.listbox.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\\n\\n        form_frame = ttk.Frame(self)\\n        form_frame.pack(fill=tk.X, padx=5)\\n\\n        ttk.Label(form_frame, text=\\\"Action:\\\").pack(side=tk.LEFT)\\n        self.action_var = tk.StringVar()\\n        self.action_entry = ttk.Entry(form_frame, textvariable=self.action_var)\\n        self.action_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 5))\\n        ttk.Button(form_frame, text=\\\"‚ûï Add\\\", command=self.add_step).pack(side=tk.LEFT)\\n        ttk.Button(form_frame, text=\\\"üóë Remove\\\", command=self.remove_selected).pack(side=tk.LEFT, padx=(5, 0))\\n\\n        ttk.Button(self, text=\\\"üíæ Save Macro\\\", command=self.save_macro).pack(pady=5)\\n\\n    def add_step(self):\\n        action = self.action_var.get().strip()\\n        if action:\\n            self.steps.append({\\\"action\\\": action})\\n            self.listbox.insert(tk.END, action)\\n            self.action_var.set(\\\"\\\")\\n\\n    def remove_selected(self):\\n        selected = self.listbox.curselection()\\n        if not selected:\\n            return\\n        index = selected[0]\\n        self.listbox.delete(index)\\n        del self.steps[index]\\n\\n    def save_macro(self):\\n        if not self.steps:\\n            messagebox.showerror(\\\"Error\\\", \\\"No steps to save\\\")\\n            return\\n        macro = {\\n            \\\"action\\\": \\\"macro\\\",\\n            \\\"steps\\\": self.steps\\n        }\\n        with open(\\\"macro_command.json\\\", \\\"w\\\", encoding=\\\"utf-8\\\") as f:\\n            json.dump(macro, f, indent=2)\\n        messagebox.showinfo(\\\"Saved\\\", \\\"‚úÖ Macro saved to macro_command.json\\\")\",\n    \"timestamp\": \"2025-03-28 21:19:24\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: create_file ben_gui_desktop/widgets/macro_builder.py\",\n    \"timestamp\": \"2025-03-28 21:19:27\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-28 21:23:28\"\n  },\n  {\n    \"action\": \"replace_in_file\",\n    \"filename\": \"ben_gui_desktop/widgets/macro_builder.py\",\n    \"pattern\": \"# def add_full_step\\\\(self\\\\):\",\n    \"replacement\": \"    def add_full_step(self):\\n        step = {k: v.get().strip() for k, v in self.field_vars.items() if v.get().strip()}\\n        if \\\"action\\\" not in step:\\n            messagebox.showerror(\\\"Error\\\", \\\"‚ö†Ô∏è Action is required\\\")\\n            return\\n        self.steps.append(step)\\n        label = step.get(\\\"action\\\", \\\"<unnamed>\\\")\\n        self.listbox.insert(tk.END, label)\\n        for var in self.field_vars.values():\\n            var.set(\\\"\\\")\",\n    \"timestamp\": \"2025-03-28 21:25:20\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: replace_in_file ben_gui_desktop/widgets/macro_builder.py\",\n    \"timestamp\": \"2025-03-28 21:25:24\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-29 06:56:30\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code \",\n    \"timestamp\": \"2025-03-29 07:01:38\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code_bulk \",\n    \"timestamp\": \"2025-03-29 07:34:18\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code_bulk \",\n    \"timestamp\": \"2025-03-29 07:35:05\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code_bulk \",\n    \"timestamp\": \"2025-03-29 07:35:43\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code_bulk \",\n    \"timestamp\": \"2025-03-29 08:07:13\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code_bulk \",\n    \"timestamp\": \"2025-03-29 08:18:39\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: update_code_bulk \",\n    \"timestamp\": \"2025-03-29 10:52:19\"\n  },\n  {\n    \"action\": \"read_file\",\n    \"filename\": \"main_gui.py\",\n    \"timestamp\": \"2025-03-29 10:54:54\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: read_file ben_gui_desktop/main_gui.py\",\n    \"timestamp\": \"2025-03-29 10:58:20\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: test_python ben_gui_desktop/main_gui.py\",\n    \"timestamp\": \"2025-03-29 10:58:23\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: macro \",\n    \"timestamp\": \"2025-03-29 11:34:09\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \".gitignore\",\n    \"content\": \"env\\n\",\n    \"timestamp\": \"2025-03-29 19:53:44\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"C:/Users/DC/env_files/env\",\n    \"content\": \"OPENAI_API_KEY=your-api-key-here\",\n    \"timestamp\": \"2025-03-29 20:27:15\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"make_snapshot.bat\",\n    \"content\": \"@echo off\\nsetlocal\\nset SNAPSHOT_DIR=%~dp0snapshots\\nset SNAPSHOT_NAME=ben_snapshot_%date:~-4%%date:~3,2%%date:~0,2%_%time:~0,2%%time:~3,2%%time:~6,2%\\nset SNAPSHOT_NAME=%SNAPSHOT_NAME: =0%\\nmkdir \\\"%SNAPSHOT_DIR%\\\" 2>nul\\npowershell -Command \\\"Compress-Archive -Path '%~dp0*' -CompressionLevel Optimal -DestinationPath '%SNAPSHOT_DIR%\\\\\\\\%SNAPSHOT_NAME%.zip' -Force -Exclude 'env', 'env/*', '*.sqlite', '*.pyc', '__pycache__'\\\"\\necho üì¶ Snapshot created at: %SNAPSHOT_DIR%\\\\%SNAPSHOT_NAME%.zip\\npause\",\n    \"timestamp\": \"2025-03-29 20:48:02\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"gpt_agent_cache.py\",\n    \"content\": \"def write_debug_log(message):\\n    with open(os.path.join(base_path, 'debug.log'), 'a', encoding='utf-8') as f:\\n        f.write(f'[{datetime.now().strftime(\\\"%Y-%m-%d %H:%M:%S\\\")}] {message}\\\\n')\",\n    \"timestamp\": \"2025-03-29 21:08:33\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: macro \",\n    \"timestamp\": \"2025-03-29 21:08:36\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: test_gpt_api \",\n    \"timestamp\": \"2025-03-30 07:01:44\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"password_utils.py\",\n    \"content\": \"\\ndef is_valid_password(password):\\n    return len(password) >= 8\\n\",\n    \"timestamp\": \"2025-03-30 07:26:42\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: append_file password_utils.py\",\n    \"timestamp\": \"2025-03-30 07:26:45\"\n  },\n  {\n    \"action\": \"create_file\",\n    \"filename\": \"ben_gui_v2/ben_gui_v2.py\",\n    \"content\": \"import os\\nimport tkinter as tk\\nfrom tkinter import ttk, scrolledtext\\n\\nclass BenAssistantGUI:\\n    def __init__(self, root):\\n        self.root = root\\n        self.root.title(\\\"Ben Assistant v2\\\")\\n        self.root.geometry(\\\"1200x700\\\")\\n\\n        self.setup_layout()\\n\\n    def setup_layout(self):\\n        self.left_panel = tk.Frame(self.root, width=250, bg=\\\"#f0f0f0\\\")\\n        self.left_panel.pack(side=\\\"left\\\", fill=\\\"y\\\")\\n\\n        self.project_label = tk.Label(self.left_panel, text=\\\"üóÇÔ∏è –°—Ç—ñ–ª\\\", bg=\\\"#f0f0f0\\\", font=(\\\"Arial\\\", 12, \\\"bold\\\"))\\n        self.project_label.pack(pady=10)\\n\\n        self.project_tree = ttk.Treeview(self.left_panel)\\n        self.project_tree.pack(expand=True, fill=\\\"both\\\", padx=5)\\n        self.populate_tree(\\\".\\\", \\\"\\\")\\n\\n        self.center_panel = tk.Frame(self.root, bg=\\\"#ffffff\\\")\\n        self.center_panel.pack(side=\\\"left\\\", fill=\\\"both\\\", expand=True)\\n\\n        self.chat_display = scrolledtext.ScrolledText(self.center_panel, wrap=\\\"word\\\", height=30)\\n        self.chat_display.pack(fill=\\\"both\\\", expand=True, padx=10, pady=(10, 0))\\n\\n        self.prompt_entry = tk.Entry(self.center_panel, font=(\\\"Arial\\\", 12))\\n        self.prompt_entry.pack(fill=\\\"x\\\", padx=10, pady=5)\\n\\n        self.send_button = tk.Button(self.center_panel, text=\\\"–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏\\\", command=self.send_prompt)\\n        self.send_button.pack(padx=10, pady=(0,10))\\n\\n        self.right_panel = tk.Frame(self.root, width=400, bg=\\\"#f9f9f9\\\")\\n        self.right_panel.pack(side=\\\"right\\\", fill=\\\"y\\\")\\n\\n        self.code_label = tk.Label(self.right_panel, text=\\\"üëÅÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–¥\\\", bg=\\\"#f9f9f9\\\", font=(\\\"Arial\\\", 12, \\\"bold\\\"))\\n        self.code_label.pack(pady=10)\\n\\n        self.code_preview = scrolledtext.ScrolledText(self.right_panel, wrap=\\\"none\\\", height=30)\\n        self.code_preview.pack(fill=\\\"both\\\", expand=True, padx=10)\\n\\n    def populate_tree(self, path, parent):\\n        for item in os.listdir(path):\\n            abspath = os.path.join(path, item)\\n            isdir = os.path.isdir(abspath)\\n            oid = self.project_tree.insert(parent, \\\"end\\\", text=item, open=False)\\n            if isdir:\\n                self.populate_tree(abspath, oid)\\n\\n    def send_prompt(self):\\n        user_input = self.prompt_entry.get()\\n        if not user_input.strip():\\n            return\\n        self.chat_display.insert(tk.END, f\\\"üë§ {user_input}\\\\n\\\")\\n        self.chat_display.insert(tk.END, f\\\"ü§ñ GPT: (–≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç—É—Ç –±—É–¥–µ...)\\\\n\\\\n\\\")\\n        self.chat_display.see(tk.END)\\n        self.prompt_entry.delete(0, tk.END)\\n\\nif __name__ == \\\"__main__\\\":\\n    root = tk.Tk()\\n    app = BenAssistantGUI(root)\\n    root.mainloop()\\n\",\n    \"timestamp\": \"2025-03-30 08:09:33\"\n  },\n  {\n    \"action\": \"git_push\",\n    \"message\": \"‚úÖ Auto-commit: macro \",\n    \"timestamp\": \"2025-03-30 08:09:36\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"greeting.py\",\n    \"content\": \"\\ndef greet_user(name):\\n    print(f\\\"Hello, {name}!\\\")\\n\",\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 12:31:44\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"greeting.py\",\n    \"content\": \"\\ndef greet_user(name):\\n    print(f\\\"Hello, {name}!\\\")\\n\",\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 12:31:44\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"main.py\",\n    \"content\": \"\\ndef print_hello():\\n    print(\\\"Hello!\\\")\\n\",\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 14:35:45\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"main.py\",\n    \"content\": \"\\ndef print_hello():\\n    print(\\\"Hello!\\\")\\n\",\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 14:35:45\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"script.py\",\n    \"content\": \"\\ndef greet(name):\\n    print(f\\\"Hello, {name}\\\")\\n\",\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 21:27:27\"\n  },\n  {\n    \"action\": \"append_file\",\n    \"filename\": \"script.py\",\n    \"content\": \"\\ndef greet(name):\\n    print(f\\\"Hello, {name}\\\")\\n\",\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 21:27:27\"\n  },\n  {\n    \"action\": \"run_macro\",\n    \"name\": \"undo_last_change\",\n    \"parameters\": {\n      \"target_id\": \"cmd_001\"\n    },\n    \"history_id\": \"cmd_002\",\n    \"target_id\": \"id_002\",\n    \"timestamp\": \"2025-03-30 21:39:21\"\n  },\n  {\n    \"action\": \"acknowledge\",\n    \"response\": \"–¢–∞–∫, —è —Ç—É—Ç! –Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?\",\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 23:03:56\"\n  },\n  {\n    \"action\": \"run_shell\",\n    \"command\": \"pylint **/*.py && flake8 **/*.py\",\n    \"history_id\": \"cmd_002\",\n    \"target_id\": \"id_003\",\n    \"timestamp\": \"2025-03-30 23:07:32\"\n  },\n  {\n    \"run_macro\": {\n      \"name\": \"check_progress\"\n    },\n    \"history_id\": \"cmd_003\",\n    \"target_id\": \"id_004\",\n    \"timestamp\": \"2025-03-30 23:08:46\"\n  },\n  {\n    \"action\": \"respond\",\n    \"message\": \"–¢–∞–∫, —è —Ç—É—Ç! –Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?\",\n    \"history_id\": \"cmd_004\",\n    \"target_id\": \"id_005\",\n    \"timestamp\": \"2025-03-30 23:10:34\"\n  },\n  {\n    \"action\": \"respond\",\n    \"message\": \"–¢–∞–∫, —è —Ç—É—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?\",\n    \"history_id\": \"cmd_005\",\n    \"target_id\": \"id_009\",\n    \"timestamp\": \"2025-03-30 23:30:56\"\n  },\n  {\n    \"action\": \"respond\",\n    \"content\": \"–¢–∞–∫, —è —Ç—É—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?\",\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 23:32:15\"\n  },\n  {\n    \"action\": \"run_macro\",\n    \"macro_name\": \"read_manual_on_table\",\n    \"history_id\": \"cmd_002\",\n    \"target_id\": \"id_002\",\n    \"timestamp\": \"2025-03-30 23:32:59\"\n  },\n  {\n    \"error\": \"Insufficient context. Please provide more details or specify the document or content you are referring to.\",\n    \"history_id\": \"cmd_003\",\n    \"target_id\": \"id_003\",\n    \"timestamp\": \"2025-03-30 23:33:27\"\n  },\n  {\n    \"run_shell\": {\n      \"command\": \"ls *.py\"\n    },\n    \"history_id\": \"cmd_001\",\n    \"target_id\": \"id_001\",\n    \"timestamp\": \"2025-03-30 23:57:46\"\n  }\n]",
      "ben_test_check.txt": "‚úÖ –ë–µ–Ω –ø—Ä–∞—Ü—é—î —Å–ø—Ä–∞–≤–Ω–æ!",
      "ben_writer.py": "import json\nimport os\n\nbase_path = r\"C:\\Users\\DC\\my-bot-project\"\ncache_file = os.path.join(base_path, \"cache.txt\")\n\ncommands = [\n    {\n        \"action\": \"create_folder\",\n        \"foldername\": \"BEN_TEST_FOLDER\"\n    },\n    {\n        \"action\": \"create_file\",\n        \"filename\": \"ben_test.txt\",\n        \"content\": \"üß† –¶–µ —Ç–µ—Å—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º GPT-–∞–≥–µ–Ω—Ç–æ–º!\"\n    }\n]\n\nwith open(cache_file, \"w\", encoding=\"utf-8\") as f:\n    json.dump(commands, f, indent=2, ensure_ascii=False)\n\nprint(\"‚úÖ –ö–æ–º–∞–Ω–¥–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–≥–µ–Ω—Ç—É —á–µ—Ä–µ–∑ cache.txt!\")\n",
      "cache.txt": "{\n  \"action\": \"scan_all_files\"\n}\n",
      "config.py": "import os\nfrom dotenv import load_dotenv\n\n# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ env-—Ñ–∞–π–ª—É\nload_dotenv(\"C:/Users/DC/env_files/env\")\n\n# –î–æ—Å—Ç—É–ø –¥–æ –∫–ª—é—á–∞\nAPI_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# –û—Å–Ω–æ–≤–Ω—ñ —à–ª—è—Ö–∏\nbase_path = r\"C:\\Users\\DC\\my-bot-project\"\nrequest_file = os.path.join(base_path, \"cache.txt\")\nresponse_file = os.path.join(base_path, \"gpt_response.json\")\nhistory_file = os.path.join(base_path, \"ben_history.log\")\nmemory_file = os.path.join(base_path, \".ben_memory.json\")\n",
      "full_tsi_bot.py": "\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom indicators.indicators import calculate_tsi, detect_tsi_divergence, detect_local_tsi_entry\nfrom structure.structure import detect_market_structure\nfrom utils.utils import confidence_score_update, log_trade_to_csv\nfrom utils.blackbox_logger import log_blackbox\nfrom structure.lux_structure import detect_lux_structure  \n\n# --- –Ü—Å—Ç–æ—Ä—ñ—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –¥–ª—è —Ç—Ä–µ–π–¥—ñ–≤ ---\nprevious_confidences = {}\n\n# –ó–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó run_bot_logic –≤—Å—Ç–∞–≤ —Ü—é:\ndef run_bot_logic(data, symbol):\n    df_1h = calculate_tsi(data[\"1h\"])\n    df_30m = calculate_tsi(data[\"30m\"])\n    df_15m = calculate_tsi(data[\"15m\"])\n    df_5m = calculate_tsi(data[\"5m\"])\n    df_1m = calculate_tsi(data[\"1m\"])\n\n    divergence_1h = detect_tsi_divergence(df_1h)\n    divergence_30m = detect_tsi_divergence(df_30m)\n    divergence_15m = detect_tsi_divergence(df_15m)\n    divergence_1m = detect_tsi_divergence(df_1m)\n\n    local_div = detect_local_tsi_entry(df_1m)\n    market_structure = detect_market_structure(df_1m)\n    lux_structure = detect_lux_structure(df_1m)  # üÜï\n\n    tsi_now = df_1m[\"tsi\"].iloc[-1]\n    tsi_signal = df_1m[\"tsi_signal\"].iloc[-1]\n\n    trade_key = f\"{divergence_1h}_{divergence_30m}_{divergence_15m}_{divergence_1m}_{local_div}_{market_structure}_{lux_structure}\"\n    previous_score = previous_confidences.get(trade_key, 1.0)\n    confidence = confidence_score_update(trade_key, was_success=None)\n    previous_confidences[trade_key] = confidence\n\n    # üß† –£–º–æ–≤–∞ –≤—Ö–æ–¥—É –∑ LuxAlgo-—Ç—Ä–∏–≥–µ—Ä–æ–º BOS/CHoCH\n    if divergence_1m in [\"üîª –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è\", \"üîº –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è\"] and \\\n       local_div.startswith(\"üîª\") and market_structure in [\"LH\", \"LL\"] and \\\n       any(d in [\"üîª –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è\", \"üîº –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è\"] for d in [divergence_1h, divergence_30m, divergence_15m]) and \\\n       lux_structure in [\"BOS\", \"CHoCH\"]:\n        decision = \"üîª –ü–†–û–î–ê–ñ\"\n    elif divergence_1m in [\"üîª –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è\", \"üîº –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è\"] and \\\n         local_div.startswith(\"üîº\") and market_structure in [\"HH\", \"HL\"] and \\\n         any(d in [\"üîª –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è\", \"üîº –î–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è\"] for d in [divergence_1h, divergence_30m, divergence_15m]) and \\\n         lux_structure in [\"BOS\", \"CHoCH\"]:\n        decision = \"üîº –ö–£–ü–Ü–í–õ–Ø\"\n    else:\n        decision = \"üö´ –ë–ï–ó –î–Ü–á\"\n\n    print(f\"[{datetime.utcnow().strftime('%H:%M:%S')}] {symbol} | {decision} | Conf: {round(confidence, 2)}\")\n\n    log_blackbox({\n        \"time\": datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'),\n        \"symbol\": symbol,\n        \"tsi_now\": round(tsi_now, 2),\n        \"tsi_signal\": round(tsi_signal, 2),\n        \"divergence_1h\": divergence_1h,\n        \"divergence_30m\": divergence_30m,\n        \"divergence_15m\": divergence_15m,\n        \"divergence_1m\": divergence_1m,\n        \"local_signal\": local_div,\n        \"structure\": market_structure,\n        \"lux_structure\": lux_structure,  # üÜï\n        \"confidence\": round(confidence, 3),\n        \"decision\": decision\n    })\n\n    log_trade_to_csv({\n        \"time\": datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'),\n        \"symbol\": symbol,\n        \"tsi_now\": round(tsi_now, 2),\n        \"tsi_signal\": round(tsi_signal, 2),\n        \"divergence_1h\": divergence_1h,\n        \"divergence_30m\": divergence_30m,\n        \"divergence_15m\": divergence_15m,\n        \"divergence_1m\": divergence_1m,\n        \"local_signal\": local_div,\n        \"structure\": market_structure,\n        \"lux_structure\": lux_structure,  # üÜï\n        \"confidence\": round(confidence, 3),\n        \"decision\": decision\n    })\n\n    return {\n        \"tsi_now\": round(tsi_now, 2),\n        \"tsi_signal\": round(tsi_signal, 2),\n        \"divergence_1h\": divergence_1h,\n        \"divergence_30m\": divergence_30m,\n        \"divergence_15m\": divergence_15m,\n        \"divergence_1m\": divergence_1m,\n        \"local_signal\": local_div,\n        \"structure\": market_structure,\n        \"lux_structure\": lux_structure,  # üÜï\n        \"confidence\": round(confidence, 3),\n        \"decision\": decision\n    }",
      "get_binance_data.py": "from binance.client import Client\nimport pandas as pd\nimport os\n\n\ndef fetch_binance_data(symbol=\"BTCUSDT\", interval=\"1m\", limit=1000):\n    api_key = \"CFVGHR2sE3CudLhc7BImmxw4CoSAkRWRX8PfaNxEVboLvYYp4R5mRdqQcBrz9yqL\"\n    api_secret = \"EpWMO4wRe6a6EQYWZf9kz7zsOG11dnTWw7blpRONaYSB2QLtR2IS925btvOLp9No\"\n    client = Client(api_key, api_secret)\n\n    klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)\n\n    df = pd.DataFrame(klines, columns=[\n        \"timestamp\", \"open\", \"high\", \"low\", \"close\", \"volume\",\n        \"close_time\", \"quote_asset_volume\", \"number_of_trades\",\n        \"taker_buy_base_asset_volume\", \"taker_buy_quote_asset_volume\", \"ignore\"\n    ])\n    df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"], unit=\"ms\")\n    df.set_index(\"timestamp\", inplace=True)\n\n    df = df[[\"open\", \"high\", \"low\", \"close\", \"volume\"]].astype(float)\n    os.makedirs(\"data\", exist_ok=True)\n    df.to_csv(\"data/binance_data.csv\")\n    print(\"‚úÖ –î–∞–Ω—ñ –∑ Binance –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ data/binance_data.csv\")\n\nif __name__ == \"__main__\":\n    fetch_binance_data()\n    import pandas as pd\nimport os",
      "gpt_agent_cache.py": "def handle_command(cmd):\n    # üß† –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è rollback\n    if cmd.get(\"action\") in [\"yes\", \"no\"] and cmd.get(\"target_id\"):\n        target_id = cmd[\"target_id\"]\n        if cmd[\"action\"] == \"yes\":\n            prev_cmd = get_command_by_id(target_id)\n            if not prev_cmd:\n                return {\"status\": \"error\", \"message\": f\"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ñ–¥–∫–∞—Ç—É: {target_id}\"}\n            file_path = prev_cmd.get(\"file\")\n            if not file_path or not os.path.exists(file_path + \".bak\"):\n                return {\"status\": \"error\", \"message\": f\"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è '{target_id}'\"}\n            shutil.copy(file_path + \".bak\", file_path)\n            return {\"status\": \"success\", \"message\": f\"‚úÖ –í—ñ–¥–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {target_id}\"}\n        else:\n            return {\"status\": \"cancelled\", \"message\": f\"‚õî –í—ñ–¥–∫–∞—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–ª—è {target_id}\"}\n\n    if cmd.get(\"filename\") == \"env\" or cmd.get(\"file_path\", \"\").endswith(\"env\"):\n        if cmd[\"action\"] in [\"update_file\", \"append_file\", \"replace_in_file\", \"update_code\", \"delete_file\"]:\n            return {\"status\": \"error\", \"message\": \"‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∞–±–æ –∫–æ–º—ñ—Ç–∏—Ç–∏ —Ñ–∞–π–ª 'env'\"}\n\nimport os\nimport json\nfrom colorama import init, Fore, Style\ninit()\nimport time\nimport re\nimport ast\nimport shutil\nimport subprocess\nimport traceback\nfrom datetime import datetime, timezone\nfrom config import base_path, request_file, response_file, history_file\nfrom config import API_KEY\nfrom dotenv import load_dotenv\nload_dotenv()\nimport os\nAPI_KEY = os.getenv(\"OPENAI_API_KEY\")\nfrom gpt_interpreter import interpret_user_prompt\ninterpret_user_prompt(\"—Å—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–∞—Ä–æ–ª—å –º–∞—î —â–æ–Ω–∞–π–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤\")\n\nimport sqlite3\n\ndef backup_file(filepath):\n    if not os.path.exists(filepath):\n        return\n    bak_path = filepath + \".bak\"\n    if not os.path.exists(bak_path):\n        shutil.copy(filepath, bak_path)\n\nimport subprocess\ndef write_debug_log(message):\n    debug_log_path = os.path.join(base_path, \"debug.log\")\n    timestamp = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n    with open(debug_log_path, \"a\", encoding=\"utf-8\") as f:\n        f.write(f\"[{timestamp}] {message}\\n\")\n\ndef handle_run_shell(command):\n    shell_cmd = command.get(\"command\")\n    if not shell_cmd:\n        return {\"status\": \"error\", \"message\": \"‚ùå Missing shell command\"}\n\n    try:\n        print(f\"[BEN] üíª Running shell: {shell_cmd}\")\n        result = subprocess.run(shell_cmd, shell=True, capture_output=True, text=True)\n        if result.returncode != 0:\n            return {\"status\": \"error\", \"message\": f\"‚ùå Shell error: {result.stderr.strip()}\"}\n        return {\"status\": \"success\", \"message\": f\"‚úÖ Shell OK: {result.stdout.strip()}\"}\n    except Exception as e:\n        return {\"status\": \"error\", \"message\": f\"‚ùå Shell exception: {e}\"}\n\ndef create_history_table():\n    conn = sqlite3.connect(os.path.join(base_path, \"history.sqlite\"))\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS command_history (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            action TEXT,\n            file_path TEXT,\n            update_type TEXT,\n            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n        )\n    ''')\n    conn.commit()\n    conn.close()\nwrite_debug_log('üü¢ Agent started and listening...')\n\ndef is_valid_python_file(filepath):\n    try:\n        with open(filepath, \"r\", encoding=\"utf-8\") as f:\n            source = f.read()\n        ast.parse(source)\n        return True\n    except SyntaxError as e:\n        print(f\"‚ùå Syntax error in {filepath}: {e}\")\n        return False\n\ncreate_history_table()\n\ndef log_action(message):\n    timestamp = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n    with open(history_file, \"a\", encoding=\"utf-8\") as f:\n        f.write(f\"[{timestamp}] {message}\\n\")\ndef get_command_by_id(target_id):\n    try:\n        with open(\".ben_memory.json\", \"r\", encoding=\"utf-8\") as f:\n            memory = json.load(f)\n        for entry in reversed(memory):  # –û—Å—Ç–∞–Ω–Ω—ñ –ø–µ—Ä—à–∏–º–∏\n            if entry.get(\"history_id\") == target_id:\n                return entry\n    except:\n        pass\n    return None\ndef ask_confirmation_for_rollback(prev_code, target_id):\n    prompt = (\n        f\"üß† –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥, —è–∫–∏–π –±—É–¥–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑ ID {target_id}:\\n\\n\"\n        f\"{prev_code}\\n\\n\"\n        \"üîÅ –•–æ—á–µ—à –≤—ñ–¥–∫–æ—Ç–∏—Ç–∏ –¥–æ —Ü—å–æ–≥–æ –∫–æ–¥—É? –ù–∞–ø–∏—à–∏ 'yes' –∞–±–æ 'no'\"\n    )\n    with open(\"gpt_response.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump({\"status\": \"awaiting_confirmation\", \"message\": prompt, \"target_id\": target_id}, f, indent=2, ensure_ascii=False)\n    return {\"status\": \"paused\", \"message\": \"‚è∏Ô∏è –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ –≤—ñ–¥–∫–∞—Ç\"}\n\ndef save_to_memory(cmd):\n    memory_file = os.path.join(base_path, \".ben_memory.json\")\n    try:\n        if os.path.exists(memory_file):\n            with open(memory_file, \"r\", encoding=\"utf-8\") as f:\n                memory = json.load(f)\n        else:\n            memory = []\n        cmd[\"timestamp\"] = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n        memory.append(cmd)\n        with open(memory_file, \"w\", encoding=\"utf-8\") as f:\n            json.dump(memory[-100:], f, indent=2, ensure_ascii=False)\n    except Exception as e:\n        log_action(f\"‚ö†Ô∏è Error saving to memory: {str(e)}\")\n\ndef handle_list_history():\n    memory_file = os.path.join(base_path, \".ben_memory.json\")\n    if os.path.exists(memory_file):\n        with open(memory_file, \"r\", encoding=\"utf-8\") as f:\n            memory = json.load(f)\n        return {\"status\": \"success\", \"history\": memory[-20:]}\n    return {\"status\": \"error\", \"message\": \"‚ùå Memory file not found\"}\n\ndef get_history():\n    try:\n        import sqlite3\n        conn = sqlite3.connect(os.path.join(base_path, \"history.sqlite\"))\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM command_history ORDER BY timestamp DESC LIMIT 20\")\n        rows = cursor.fetchall()\n        conn.close()\n        return {\"status\": \"success\", \"history\": rows}\n    except Exception as e:\n        return {\"status\": \"error\", \"message\": f\"‚ùå Failed to fetch from SQLite: {e}\"}\n\ndef read_requests():\n    if not os.path.exists(request_file):\n        return []\n    with open(request_file, \"r\", encoding=\"utf-8\") as f:\n        try:\n            text = f.read().strip()\n            if not text:\n                return []\n            data = json.loads(text)\n            return data if isinstance(data, list) else [data]\n        except Exception as e:\n            return [{\"status\": \"error\", \"message\": f\"‚ùå JSON error: {str(e)}\"}]\n\ndef write_response(responses):\n    with open(response_file, \"w\", encoding=\"utf-8\") as f:\n        json.dump(responses, f, indent=2, ensure_ascii=False)\n\ndef clear_cache():\n    with open(request_file, \"w\", encoding=\"utf-8\") as f:\n        f.write(\"\")\n\nimport difflib\n\ndef smart_deduplicate_insertion(existing_block, new_block):\n    existing_lines = [line.strip() for line in existing_block.strip().splitlines()]\n    new_lines = [line.strip() for line in new_block.strip().splitlines()]\n    merged = existing_block.strip().splitlines()\n    for line in new_lines:\n        if line and line.strip() not in existing_lines:\n            merged.append(line)\n    return \"\\n\".join(merged) + \"\\n\"\n\ndef handle_update_code(command):\n    file_path = command.get('file_path')\n    update_type = command.get('update_type')  # 'validation', 'exceptions', 'logging', 'custom_insert', ...\n    insert_at_line = command.get('insert_at_line')\n    insert_code = command.get('code') \n\n    # üÜï –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –±–µ–∑ updates[]\n    if \"updates\" not in command and all(k in command for k in (\"pattern\", \"replacement\", \"update_type\")):\n        command[\"updates\"] = [{\n            \"pattern\": command[\"pattern\"],\n            \"replacement\": command[\"replacement\"],\n            \"update_type\": command[\"update_type\"]\n        }]\n\n    if not file_path:\n        return {\"status\": \"error\", \"message\": \"‚ùå Missing 'file_path'\"}\n\n    # üîÅ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ç–∏–ø–∏\n    if update_type in (\"validation\", \"exceptions\", \"logging\", \"custom_insert\"):\n        test_result = handle_command({\"action\": \"test_python\", \"filename\": file_path})\n        if test_result.get(\"status\") == \"error\":\n            return {\"status\": \"error\", \"message\": f\"‚ùå Syntax check failed: {test_result.get('message')}\"}\n\n        with open(file_path, 'r', encoding='utf-8') as f:\n            lines = f.readlines()\n\n        if update_type == 'validation':\n            lines.append('\\nif data is None:\\n    raise ValueError(\"Input data cannot be None\")')\n        elif update_type == 'exceptions':\n            lines.append('\\ntry:\\n    risky_operation()\\nexcept Exception as e:\\n    print(f\"Exception occurred: {e}\")')\n        elif update_type == 'logging':\n            lines.append('\\nimport logging\\nlogging.basicConfig(level=logging.INFO)\\nlogging.info(\"Log message from BEN\")')\n        elif update_type == 'custom_insert' and insert_code:\n            if isinstance(insert_at_line, int) and 0 <= insert_at_line <= len(lines):\n                lines.insert(insert_at_line, insert_code + '\\n')\n            else:\n                return {\"status\": \"error\", \"message\": \"‚ùå Invalid insert_at_line value\"}\n\n        with open(file_path, 'w', encoding='utf-8') as f:\n            f.writelines(lines)\n\n        if not is_valid_python_file(file_path):\n            return {\"status\": \"error\", \"message\": f\"‚ùå Syntax error after applying update_code to {file_path}\"}\n\n        print(f\"[BEN] update_code applied to {file_path} with type {update_type}\")\n        return {\"status\": \"success\", \"message\": f\"‚úÖ update_code applied to {file_path} with type {update_type}\"}\n\n    # üîÅ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º: updates[]. –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ù–ï –æ–¥–∏–Ω —ñ–∑ –≤–∏—â–µ\n    updates = command.get(\"updates\")\n    if not updates:\n        return {\"status\": \"error\", \"message\": \"‚ùå Missing 'updates' or unsupported update_type\"}\n\n    try:\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n    except FileNotFoundError:\n        return {\"status\": \"error\", \"message\": \"‚ùå File not found\"}\n\n    # –ó–±–µ—Ä–µ–≥—Ç–∏ .bak –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–∞–º–∏\n    backup_path = file_path + \".bak\"\n    with open(backup_path, \"w\", encoding=\"utf-8\") as backup:\n        backup.write(content)\n\n    for upd in updates:\n        pattern = upd.get(\"pattern\")\n        replacement = upd.get(\"replacement\")\n        u_type = upd.get(\"update_type\")\n\n        if not all([pattern, replacement, u_type]):\n            return {\"status\": \"error\", \"message\": \"‚ùå Missing fields in update\"}\n\n        import re\n        if u_type == \"replace\":\n            matches = list(re.finditer(pattern, content, flags=re.DOTALL))\n            if not matches:\n                return {\"status\": \"error\", \"message\": \"‚ùå Pattern not found\"}\n            for match in reversed(matches):\n                span = match.span()\n                target = content[span[0]:span[1]]\n                updated = smart_deduplicate_insertion(target, replacement)\n                content = content[:span[0]] + updated + content[span[1]:]\n\n        elif u_type == \"append\":\n            content = smart_deduplicate_insertion(content, replacement)\n\n        elif u_type == \"prepend\":\n            content = smart_deduplicate_insertion(replacement, content)\n\n        else:\n            return {\"status\": \"error\", \"message\": f\"‚ùå Unknown update_type: {u_type}\"}\n\n\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(content)\n\n    return {\"status\": \"success\", \"message\": f\"‚úÖ Updated {file_path}\"}\n\n\ndef log_diff(filepath):\n    try:\n        result = subprocess.run([\"git\", \"diff\", filepath], capture_output=True, text=True)\n        diff = result.stdout.strip()\n        if diff:\n            timestamp = datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")\n            with open(history_file, \"a\", encoding=\"utf-8\") as f:\n                f.write(f\"[DIFF {timestamp}] File: {filepath}\\n{diff}\\n---\\n\")\n    except Exception as e:\n        with open(history_file, \"a\", encoding=\"utf-8\") as f:\n            f.write(f\"[DIFF ERROR] {filepath}: {str(e)}\\n\")\n\n\ndef handle_macro(cmd):\n    if not isinstance(cmd.get(\"steps\"), list):\n        return {\"status\": \"error\", \"message\": \"‚ùå Invalid macro steps\"}\n\n    steps = cmd[\"steps\"]\n    rollback = cmd.get(\"rollback_on_fail\", False)\n    results = []\n    created_files = []\n\n    if rollback:\n        for step in steps:\n            if \"filename\" in step:\n                file_path = os.path.join(base_path, step[\"filename\"])\n                if os.path.exists(file_path):\n                    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                        original = f.read()\n                    with open(file_path + \".bak\", \"w\", encoding=\"utf-8\") as f:\n                        f.write(original)\n\n    for step in steps:\n        result = handle_command(step)\n        results.append(result)\n\n        # –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏ (–¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É rollback)\n        if step.get(\"action\") == \"create_file\" and \"filename\" in step:\n            created_files.append(step[\"filename\"])\n\n        if result.get(\"status\") == \"error\" and rollback:\n            # –í—ñ–¥–∫–∞—Ç –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π\n            for s in steps:\n                if \"filename\" in s:\n                    file_path = os.path.join(base_path, s[\"filename\"])\n                    bak_file = file_path + \".bak\"\n                    if os.path.exists(bak_file):\n                        with open(bak_file, \"r\", encoding=\"utf-8\") as f:\n                            restored = f.read()\n                        with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                            f.write(restored)\n\n            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏\n            for fname in created_files:\n                file_path = os.path.join(base_path, fname)\n                if os.path.exists(file_path):\n                    os.remove(file_path)\n\n            # üß† –ó–∞–ø–∏—Å rollback'—É –≤ –ø–∞–º º—è—Ç—å\n            save_to_memory({\n                \"action\": \"rollback\",\n                \"reason\": result.get(\"message\"),\n                \"rollback_steps\": steps\n            })\n\n            # ‚ôªÔ∏è Git-–∫–æ–º—ñ—Ç\n            auto_commit(\"‚ôªÔ∏è Rollback after failure\")\n\n            return {\n                \"status\": \"error\",\n                \"message\": \"‚ùå Macro failed. Rolled back all changes.\",\n                \"results\": results\n            }\n\n    return {\"status\": \"success\", \"steps\": results}\n\ndef handle_command(cmd):\n    if not isinstance(cmd, dict):\n        return {\"status\": \"error\", \"message\": \"‚ùå Invalid command format ‚Äî expected a JSON object\"}\n\n    # üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ —Ñ—É–Ω–∫—Ü—ñ–π\n    if cmd.get(\"action\") == \"append_file\" and \"def \" in cmd.get(\"content\", \"\"):\n        new_func_name = None\n        try:\n            new_func_ast = ast.parse(cmd[\"content\"])\n            for node in ast.walk(new_func_ast):\n                if isinstance(node, ast.FunctionDef):\n                    new_func_name = node.name  # <-- –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø —Ç—É—Ç!\n                    break  # <-- –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø —Ç—É—Ç!\n        except SyntaxError:\n            return {\"status\": \"error\", \"message\": \"‚ùå Syntax error in new function code\"}\n\n        if new_func_name:\n            existing_file_path = os.path.join(base_path, cmd[\"filename\"])\n            if os.path.exists(existing_file_path):\n                with open(existing_file_path, \"r\", encoding=\"utf-8\") as f:\n                    existing_ast = ast.parse(f.read())\n                    for node in ast.walk(existing_ast):\n                        if isinstance(node, ast.FunctionDef) and node.name == new_func_name:\n                            return {\n                                \"status\": \"skipped\",\n                                \"message\": f\"‚ö†Ô∏è Function '{new_func_name}' already exists in {cmd['filename']}\"\n                            }\n\n    required_keys = [\"action\"]\n    for key in required_keys:\n        if key not in cmd:\n            return {\"status\": \"error\", \"message\": f\"‚ùå Missing required field: {key}\"}\n    try:\n        action = cmd.get(\"action\")\n        filename = cmd.get(\"filename\")\n        foldername = cmd.get(\"foldername\")\n        content = cmd.get(\"content\", \"\")\n        pattern = cmd.get(\"pattern\")\n        replacement = cmd.get(\"replacement\")\n        target_folder = cmd.get(\"target_folder\")\n        new_name = cmd.get(\"new_name\")\n\n        full_file_path = os.path.join(base_path, filename) if filename else None\n        full_folder_path = os.path.join(base_path, foldername) if foldername else None\n        dst_folder_path = os.path.join(base_path, target_folder) if target_folder else None\n        dst_file_path = os.path.join(dst_folder_path, filename) if target_folder and filename else None\n\n        if action == \"create_file\":\n            with open(full_file_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(content)\n            save_to_memory(cmd)  \n            return {\"status\": \"success\", \"message\": f\"‚úÖ Created file '{filename}'\"}\n\n        elif action == \"update_code\":\n            filepath = os.path.join(base_path, cmd[\"file\"])\n            backup_file(filepath)  \n            return handle_update_code(cmd)\n        elif action == \"update_code_bulk\":\n            return handle_update_code_bulk(cmd)\n\n        elif action == \"append_file\":\n            filepath = os.path.join(base_path, cmd[\"filename\"])\n            backup_file(filepath)\n            with open(full_file_path, \"a\", encoding=\"utf-8\") as f:\n                f.write(content)\n            save_to_memory(cmd)\n            return {\"status\": \"success\", \"message\": f\"üìå Appended to file '{filename}'\"}\n        elif action == \"scan_all_files\":\n            result = {}\n            for fname in os.listdir(base_path):\n                fpath = os.path.join(base_path, fname)\n                if os.path.isfile(fpath) and fname.endswith((\".py\", \".json\", \".txt\", \".csv\")):\n                    try:\n                        with open(fpath, \"r\", encoding=\"utf-8\") as f:\n                            result[fname] = f.read()\n                    except Exception as e:\n                        result[fname] = f\"‚ö†Ô∏è Error reading: {str(e)}\"\n            return {\"status\": \"success\", \"files\": result}\n\n        elif action == \"update_file\":\n            if os.path.exists(full_file_path):\n                with open(full_file_path, \"r\", encoding=\"utf-8\") as f:\n                    data = f.read()\n                updated = re.sub(pattern, replacement, data)\n                with open(full_file_path, \"w\", encoding=\"utf-8\") as f:\n                    f.write(updated)\n                save_to_memory(cmd)\n                return {\"status\": \"success\", \"message\": f\"üîÅ Updated file '{filename}'\"}\n            else:\n                return {\"status\": \"error\", \"message\": \"File not found\"}\n\n        elif action == \"replace_in_file\":\n            filepath = os.path.join(base_path, cmd[\"filename\"])\n            backup_file(filepath)\n            if filename.endswith('.py'):\n                test_result = handle_command({\"action\": \"test_python\", \"filename\": filename})\n                if test_result.get(\"status\") == \"error\":\n                    return {\"status\": \"error\", \"message\": f\"‚ùå –ü–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é: {test_result.get('message')}\"}\n                \n                if not is_valid_python_file(full_file_path):\n                    return {\"status\": \"error\", \"message\": f\"‚ùå Syntax error before change in {filename}\"}\n\n            if filename in [\"config.py\", \"api_keys.py\", \"cache.txt\"]:\n                    return {\"status\": \"error\", \"message\": f\"‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª: {filename}\"}\n                \n            if os.path.exists(full_file_path):\n                with open(full_file_path, \"r\", encoding=\"utf-8\") as f:\n                    text = f.read()\n                # üß† –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é\n                backup_path = full_file_path + \".bak\"\n                with open(backup_path, \"w\", encoding=\"utf-8\") as f:\n                    f.write(text)\n                    \n                # üìù Git diff –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º\n                try:\n                    diff_output = subprocess.check_output([\"git\", \"diff\", full_file_path], cwd=base_path, text=True)\n                    if diff_output.strip():\n                        log_action(\"üìÑ Git diff –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é:\" + diff_output)\n                except Exception as e:\n                    log_action(f\"‚ö†Ô∏è Git diff error: {str(e)}\")\n\n                # üîÅ –ó–∞–º—ñ–Ω–∞ —á–µ—Ä–µ–∑ regex\n                new_text = re.sub(pattern, replacement, text)\n                with open(full_file_path, \"w\", encoding=\"utf-8\") as f:\n                    f.write(new_text)\n                \n                if not is_valid_python_file(full_file_path):\n                    return {\"status\": \"error\", \"message\": f\"‚ùå Syntax error after change in {filename}. Revert or fix manually.\"}\n\n                # üìú –õ–æ–≥ –∑–º—ñ–Ω (git diff)\n                log_diff(full_file_path)\n                save_to_memory(cmd)\n                return {\"status\": \"success\", \"message\": f\"‚úèÔ∏è Replaced text in '{filename}'\"}\n            \n        elif action == \"insert_between_markers\":\n            filepath = os.path.join(base_path, cmd[\"filename\"])\n            backup_file(filepath)\n            file_path = os.path.join(base_path, cmd.get(\"file_path\"))\n            marker_start = cmd.get(\"marker_start\")\n            marker_end = cmd.get(\"marker_end\")\n            insert_code = cmd.get(\"code\")\n\n            if not all([file_path, marker_start, marker_end, insert_code]):\n                return {\"status\": \"error\", \"message\": \"‚ùå Missing required fields for marker-based insertion\"}\n\n            if not os.path.exists(file_path):\n                return {\"status\": \"error\", \"message\": f\"‚ùå File '{file_path}' not found\"}\n\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            start_idx, end_idx = -1, -1\n            for i, line in enumerate(lines):\n                if marker_start in line:\n                    start_idx = i + 1\n                if marker_end in line:\n                    end_idx = i\n\n            if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:\n                return {\"status\": \"error\", \"message\": \"‚ùå Markers not found or invalid order\"}\n\n            lines = lines[:start_idx] + [insert_code + \"\\n\"] + lines[end_idx:]\n\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                f.writelines(lines)\n\n            save_to_memory(cmd)\n            return {\"status\": \"success\", \"message\": f\"‚úÖ Inserted code between markers in {cmd.get('file_path')}\"}\n           \n        elif action == \"read_file\":\n            if os.path.exists(full_file_path):\n                with open(full_file_path, \"r\", encoding=\"utf-8\") as f:\n                    return {\"status\": \"success\", \"content\": f.read()}\n            save_to_memory(cmd)\n            return {\"status\": \"error\", \"message\": \"File not found\"}\n\n        elif action == \"search_text_in_file\":\n            if os.path.exists(full_file_path):\n                with open(full_file_path, \"r\", encoding=\"utf-8\") as f:\n                    lines = f.readlines()\n                matches = [line for line in lines if pattern in line]\n                return {\"status\": \"success\", \"matches\": matches}\n\n        elif action == \"create_folder\":\n            os.makedirs(full_folder_path, exist_ok=True)\n            return {\"status\": \"success\", \"message\": f\"üìÅ Folder '{foldername}' created\"}\n\n        elif action == \"delete_file\":\n            filepath = os.path.join(base_path, cmd[\"filename\"])\n            backup_file(filepath)\n            if os.path.exists(full_file_path):\n                os.remove(full_file_path)\n                save_to_memory(cmd)\n                return {\"status\": \"success\", \"message\": f\"üóëÔ∏è File '{filename}' deleted\"}\n            else:\n                return {\"status\": \"error\", \"message\": f\"File '{filename}' not found\"}\n\n        elif action == \"rename_file\":\n            if not os.path.exists(full_file_path):\n                return {\"status\": \"error\", \"message\": f\"‚ùå File '{filename}' not found\"}\n            new_path = os.path.join(base_path, new_name)\n            os.rename(full_file_path, new_path)\n            save_to_memory(cmd)\n            return {\"status\": \"success\", \"message\": f\"üìÑ File renamed to '{new_name}'\"}\n\n        elif action == \"copy_file\":\n            shutil.copy(full_file_path, dst_file_path)\n            save_to_memory(cmd)\n            return {\"status\": \"success\", \"message\": f\"üìÇ Copied '{filename}' to '{target_folder}'\"}\n\n        elif action == \"read_folder\":\n            if os.path.exists(full_folder_path):\n                files = os.listdir(full_folder_path)\n                return {\"status\": \"success\", \"files\": files}\n            return {\"status\": \"error\", \"message\": \"Folder not found\"}\n\n        elif action == \"run_python\":\n            if not os.path.exists(full_file_path):\n                return {\"status\": \"error\", \"message\": f\"‚ùå File '{filename}' not found\"}\n            result = subprocess.run([\"python\", full_file_path], capture_output=True, text=True)\n            return {\"status\": \"success\", \"output\": result.stdout, \"errors\": result.stderr}\n        \n        elif action == \"test_gpt_api\":\n            try:\n                from openai import OpenAI\n                from config import API_KEY\n                client = OpenAI(api_key=API_KEY)\n                response = client.chat.completions.create(\n                    model=\"gpt-4o\",\n                    messages=[\n                        {\"role\": \"user\", \"content\": \"Ping\"}\n                    ]\n                )\n                return {\"status\": \"success\", \"message\": \"üü¢ GPT API connected!\", \"response\": response.choices[0].message.content}\n            except Exception as e:\n                return {\"status\": \"error\", \"message\": f\"‚ùå GPT API error: {str(e)}\"}\n\n\n        elif action == \"test_python\":\n            if os.path.exists(full_file_path):\n                try:\n                    with open(full_file_path, \"r\", encoding=\"utf-8\") as f:\n                        source = f.read()\n                    compile(source, filename, 'exec')\n                    return {\"status\": \"success\", \"message\": f\"‚úÖ {filename} –ø—Ä–æ–π—à–æ–≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É\"}\n                except SyntaxError as e:\n                    return {\"status\": \"error\", \"message\": f\"‚ùå Syntax error in {filename}: {e}\"}\n            return {\"status\": \"error\", \"message\": \"File not found\"}\n\n        elif action == \"undo_change\":\n            target_id = cmd.get(\"target_id\")\n\n            if target_id:\n                # üîç –®—É–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –ø–æ ID –∑ —ñ—Å—Ç–æ—Ä—ñ—ó\n                prev_cmd = get_command_by_id(target_id)\n                if not prev_cmd:\n                    return {\"status\": \"error\", \"message\": f\"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑ ID: {target_id}\"}\n\n                file_path = prev_cmd.get(\"file\")\n                if not file_path or not os.path.exists(file_path + \".bak\"):\n                    return {\"status\": \"error\", \"message\": f\"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è ID: {target_id}\"}\n\n                with open(file_path + \".bak\", \"r\", encoding=\"utf-8\") as f:\n                    prev_code = f.read()\n\n                return ask_confirmation_for_rollback(prev_code, target_id)\n\n            else:\n                # üïó –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ .bak\n                if os.path.exists(full_file_path + \".bak\"):\n                    shutil.copy(full_file_path + \".bak\", full_file_path)\n                    save_to_memory(cmd)\n                    return {\"status\": \"success\", \"message\": f\"‚Ü©Ô∏è Undo: –≤—ñ–¥–∫–∞—Ç –¥–æ .bak –¥–ª—è '{filename}'\"}\n                else:\n                    return {\"status\": \"error\", \"message\": f\"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è '{filename}'\"}\n\n        elif action == \"macro\":\n            return handle_macro(cmd)\n        \n        elif action == \"run_macro\":\n            from macros import run_macro  \n            return run_macro(cmd)\n\n        elif cmd[\"action\"] == \"run_shell\":\n            return handle_run_shell(cmd)\n\n        elif action == \"list_files\":\n            return {\"status\": \"success\", \"files\": os.listdir(base_path)}\n\n        elif action == \"check_status\":\n            return {\"status\": \"success\", \"message\": \"üü¢ Agent is running\"}\n\n        elif action == \"show_memory\":\n            memory_file = os.path.join(base_path, \".ben_memory.json\")\n            if os.path.exists(memory_file):\n                with open(memory_file, \"r\", encoding=\"utf-8\") as f:\n                    memory = json.load(f)\n                return {\"status\": \"success\", \"memory\": memory[-20:]}\n            else:\n                return {\"status\": \"error\", \"message\": \"‚ùå Memory file not found\"}\n        \n        elif action == \"list_history\":\n            return handle_list_history()\n\n        elif action == \"view_sql_history\":\n            return get_history()\n\n        else:\n            return {\"status\": \"error\", \"message\": f\"‚ùå Unknown action: {action}\"}\n\n        # üìù –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ—é –≤ SQLite\n        try:\n            import sqlite3\n            conn = sqlite3.connect(os.path.join(base_path, \"history.sqlite\"))\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n                INSERT INTO command_history (action, file_path, update_type)\n                VALUES (?, ?, ?)\n            \"\"\", (cmd.get(\"action\"), cmd.get(\"file_path\") or cmd.get(\"filename\"), cmd.get(\"update_type\")))\n            conn.commit()\n            conn.close()\n        except Exception as e:\n            log_action(f\"‚ö†Ô∏è SQLite save error: {e}\")\n\n\n    except Exception as e:\n        traceback.print_exc()\n        return {\"status\": \"error\", \"message\": f\"‚ùå Exception: {str(e)}\"}\ndef run_self_tests():\n    print(\"\\nüß™ Running self-tests...\")\n    tests_passed = 0\n    tests_failed = 0\n\n    # 1. Test basic command structure\n    result = handle_command({\"action\": \"check_status\"})\n    if result.get(\"status\") == \"success\":\n        print(\"‚úÖ check_status passed\")\n        tests_passed += 1\n    else:\n        print(\"‚ùå check_status failed\")\n        tests_failed += 1\n\n    # 2. Test missing required key\n    result = handle_command({})\n    if result.get(\"status\") == \"error\" and \"Missing required field\" in result.get(\"message\", \"\"):\n        print(\"‚úÖ missing field validation passed\")\n        tests_passed += 1\n    else:\n        print(\"‚ùå missing field validation failed\")\n        tests_failed += 1\n\n    # 3. Test invalid command type\n    result = handle_command(\"not_a_dict\")\n    if result.get(\"status\") == \"error\" and \"Invalid command format\" in result.get(\"message\", \"\"):\n        print(\"‚úÖ invalid format validation passed\")\n        tests_passed += 1\n    else:\n        print(\"‚ùå invalid format validation failed\")\n        tests_failed += 1\n\n    # ‚úÖ –ü–ï–†–ï–ù–ï–°–ï–ù–û –°–Æ–î–ò:\n    handle_command({\"action\": \"delete_file\", \"filename\": \"test_self.txt\"})\n\n    result = handle_command({\"action\": \"create_file\", \"filename\": \"test_self.txt\", \"content\": \"Hello test!\"})\n    if result.get(\"status\") == \"success\":\n        print(\"‚úÖ create_file passed\")\n        tests_passed += 1\n    else:\n        print(\"‚ùå create_file failed\")\n        tests_failed += 1\n\n    result = handle_command({\"action\": \"read_file\", \"filename\": \"test_self.txt\"})\n    if result.get(\"status\") == \"success\" and \"Hello test!\" in result.get(\"content\", \"\"):\n        print(\"‚úÖ read_file passed\")\n        tests_passed += 1\n    else:\n        print(\"‚ùå read_file failed\")\n        tests_failed += 1\n\n    result = handle_command({\"action\": \"delete_file\", \"filename\": \"test_self.txt\"})\n    if result.get(\"status\") == \"success\":\n        print(\"‚úÖ delete_file passed\")\n        tests_passed += 1\n    else:\n        print(\"‚ùå delete_file failed\")\n        tests_failed += 1\n\n    # ‚úÖ –¢—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä ‚Äî —Ñ—ñ–Ω–∞–ª\n    print(f\"\\nüß™ Test results: {tests_passed} passed, {tests_failed} failed\")\n    return tests_failed == 0\n# üß∞ CLI-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥\nimport argparse\n\nimport argparse\nimport sys\nimport json\n\ndef run_cli():\n    parser = argparse.ArgumentParser(description=\"Ben CLI\")\n    parser.add_argument(\"--action\", help=\"–î—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, create_file)\")\n    parser.add_argument(\"--filename\", help=\"–Ü–º'—è —Ñ–∞–π–ª—É\")\n    parser.add_argument(\"--content\", help=\"–í–º—ñ—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å—É\")\n    parser.add_argument(\"--pattern\", help=\"–ü–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É\")\n    parser.add_argument(\"--replacement\", help=\"–¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–º—ñ–Ω–∏\")\n    parser.add_argument(\"--foldername\", help=\"–Ü–º'—è –ø–∞–ø–∫–∏\")\n    parser.add_argument(\"--target_folder\", help=\"–¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞\")\n    parser.add_argument(\"--new_name\", help=\"–ù–æ–≤–µ —ñ–º'—è —Ñ–∞–π–ª—É\")\n    parser.add_argument(\"--steps\", help=\"JSON-—Ä—è–¥–æ–∫ –¥–ª—è macro-–∫–æ–º–∞–Ω–¥–∏\")\n\n    args = parser.parse_args()\n\n    print(\"–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞:\", sys.argv)  # –í–∏–≤–æ–¥–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏\n\n    cmd = {k: v for k, v in vars(args).items() if v is not None}\n\n    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –ø–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è macro-–∫–æ–º–∞–Ω–¥–∏\n    if cmd.get(\"action\") == \"macro\" and \"steps\" in cmd:\n        try:\n            cmd[\"steps\"] = json.loads(cmd[\"steps\"])  # –ü–∞—Ä—Å–∏–º–æ JSON\n            print(\"–ü–∞—Ä—Å–∏–Ω–≥ JSON —É—Å–ø—ñ—à–Ω–∏–π:\", cmd[\"steps\"])  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É\n        except Exception as e:\n            print(f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É steps: {str(e)}\")\n            return\n\n    if \"action\" not in cmd:\n        print(\"‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ --action\")\n        return\n\n    result = handle_command(cmd)\n    print(\"üîß –†–µ–∑—É–ª—å—Ç–∞—Ç:\", result)\n\n\ndef git_auto_push(commit_msg=\"üöÄ Auto-commit by Ben\"):\n    try:\n        subprocess.run([\"git\", \"add\", \".\"], cwd=base_path, check=True)\n\n        # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–º—ñ–Ω–∏\n        diff_result = subprocess.run([\"git\", \"diff\", \"--cached\", \"--quiet\"], cwd=base_path)\n        if diff_result.returncode == 0:\n            log_action(\"‚ÑπÔ∏è –ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∫–æ–º—ñ—Ç—É ‚Äî git push –ø—Ä–æ–ø—É—â–µ–Ω–æ\")\n            return {\"status\": \"skipped\", \"message\": \"‚ÑπÔ∏è No changes to commit\"}\n\n        subprocess.run([\"git\", \"commit\", \"-m\", commit_msg], cwd=base_path, check=True)\n        subprocess.run([\"git\", \"push\"], cwd=base_path, check=True)\n        log_action(f\"üì§ Git push: {commit_msg}\")\n        save_to_memory({\"action\": \"git_push\", \"message\": commit_msg})\n        return {\"status\": \"success\", \"message\": \"üì§ Git push —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\"}\n\n    except subprocess.CalledProcessError as e:\n        log_action(f\"‚ùå Git push –ø–æ–º–∏–ª–∫–∞: {str(e)}\")\n        return {\"status\": \"error\", \"message\": f\"‚ùå Git push –ø–æ–º–∏–ª–∫–∞: {str(e)}\"}\ndef handle_update_code_bulk(command):\n    updates = command.get('updates', [])\n    results = []\n    for update in updates:\n        result = handle_update_code(update)\n        results.append(result)\n    return {\"status\": \"success\", \"results\": results}\n   \nif __name__ == \"__main__\":\n    import argparse\n    import sys\n\n    parser = argparse.ArgumentParser(description=\"GPT Agent CLI\")\n    parser.add_argument(\"--cli\", action=\"store_true\", help=\"–ó–∞–ø—É—Å—Ç–∏—Ç–∏ CLI-—Ä–µ–∂–∏–º\")\n    parser.add_argument(\"--test\", action=\"store_true\", help=\"–ó–∞–ø—É—Å—Ç–∏—Ç–∏ self-—Ç–µ—Å—Ç–∏\")\n    parser.add_argument(\"--action\")\n    parser.add_argument(\"--filename\")\n    parser.add_argument(\"--content\")\n    parser.add_argument(\"--pattern\")\n    parser.add_argument(\"--replacement\")\n    parser.add_argument(\"--foldername\")\n    parser.add_argument(\"--target_folder\")\n    parser.add_argument(\"--new_name\")\n\n    args = parser.parse_args()\n\n    if args.test:\n        run_self_tests()\n        sys.exit()\n\n    if args.cli:\n        cmd = {k: v for k, v in vars(args).items() if v is not None and k not in [\"cli\", \"test\"]}\n        if \"action\" not in cmd:\n            print(\"‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ --action\")\n            sys.exit(1)\n        result = handle_command(cmd)\n        print(\"üîß –†–µ–∑—É–ª—å—Ç–∞—Ç:\", result)\n        sys.exit()\n\n    # –Ø–∫—â–æ –Ω–µ CLI —ñ –Ω–µ test ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —è–∫ –∑–≤–∏—á–Ω–æ\n    print(\"üü¢ –ë–µ–Ω –∑–∞–ø—É—â–µ–Ω–∏–π —ñ —Å–ª—É—Ö–∞—î –∫–æ–º–∞–Ω–¥–∏ –∑ cache.txt...\")\n\n    try:\n        from macros import run_macro\n        auto = run_macro({\"name\": \"scan_all_on_start\"})\n        print(f\"[AUTO] {auto.get('message')}\")\n    except Exception as e:\n        print(f\"[AUTO] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É: {e}\")\n        \n    while True:\n        commands = read_requests()\n        print(\"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥–∏:\", commands)\n\n        responses = []\n        for cmd in commands:\n            result = handle_command(cmd)\n            print(\"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ:\", result)\n            responses.append(result)\n            log_action(result.get(\"message\", str(result)))\n            if result.get(\"status\") == \"success\":\n                push_result = git_auto_push(f\"‚úÖ Auto-commit: {cmd.get('action')} {cmd.get('filename', '')}\")\n                print(push_result.get('message', ''))\n\n        if responses:\n            for r in responses:\n                status = r.get(\"status\")\n                if status == \"success\":\n                    print(Fore.GREEN + \"‚úÖ\", r.get(\"message\", \"\") + Style.RESET_ALL)\n                elif status == \"error\":\n                    print(Fore.RED + \"‚ùå\", r.get(\"message\", \"\") + Style.RESET_ALL)\n                elif status == \"cancelled\":\n                    print(Fore.YELLOW + \"‚ö†Ô∏è\", r.get(\"message\", \"\") + Style.RESET_ALL)\n                elif status == \"macro\":\n                    print(Fore.CYAN + \"üì¶ –í–∏–∫–æ–Ω–∞–Ω–æ macro-–∫–æ–º–∞–Ω–¥—É:\" + Style.RESET_ALL)\n                    for step_result in r.get(\"results\", []):\n                        print(\"  -\", step_result.get(\"message\", \"\"))\n\n            print(\"üíæ –ó–∞–ø–∏—Å—É—é gpt_response.json —ñ –æ—á–∏—â–∞—é cache.txt\")\n            write_response(responses)\n            clear_cache()\n        time.sleep(1)\n\ndef repeat_last_action():\n    memory_file = os.path.join(base_path, \".ben_memory.json\")\n    if not os.path.exists(memory_file):\n        return {\"status\": \"error\", \"message\": \"‚ùå Memory file not found\"}\n    try:\n        with open(memory_file, \"r\", encoding=\"utf-8\") as f:\n            memory = json.load(f)\n        if not memory:\n            return {\"status\": \"error\", \"message\": \"‚ùå No memory to repeat\"}\n        last_cmd = memory[-1]\n        save_to_memory(last_cmd)\n        return handle_command(last_cmd)\n    except Exception as e:\n        return {\"status\": \"error\", \"message\": f\"‚ùå Repeat error: {str(e)}\"}\n\n\nimport autopep8\nimport os\n\n# –ö—Ä–æ–∫ 2: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤\ndef fix_indentation(filepath):\n    try:\n        with open(filepath, 'r', encoding='utf-8') as file:\n            code = file.read()\n\n        fixed_code = autopep8.fix_code(code)\n\n        with open(filepath, 'w', encoding='utf-8') as file:\n            file.write(fixed_code)\n\n        return {'status': 'success', 'message': f'üßπ –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –≤ —Ñ–∞–π–ª—ñ {filepath}'}\n    except Exception as e:\n        return {'status': 'error', 'message': f'‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤: {str(e)}'}\n\nimport sqlite3\n\n# –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite\ndef create_connection():\n    conn = sqlite3.connect('history.db')\n    return conn\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—é\ndef save_to_history(action, filename, content, result):\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n    INSERT INTO history (action, filename, content, result)\n    VALUES (?, ?, ?, ?)\n    ''', (action, filename, content, result))\n    conn.commit()\n    conn.close()\n\n# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó\ndef get_history():\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM history ORDER BY timestamp DESC LIMIT 10')\n    rows = cursor.fetchall()\n    conn.close()\n    return rows\n\ndef auto_commit(commit_msg=\"‚ôªÔ∏è Rollback after failure\"):\n    try:\n        subprocess.run([\"git\", \"add\", \".\"], cwd=base_path, check=True)\n        subprocess.run([\"git\", \"commit\", \"-m\", commit_msg], cwd=base_path, check=True)\n        subprocess.run([\"git\", \"push\"], cwd=base_path, check=True)\n        log_action(f\"üì§ Git auto-commit: {commit_msg}\")\n        save_to_memory({\"action\": \"auto_commit\", \"message\": commit_msg})\n        return {\"status\": \"success\", \"message\": \"üì§ Git auto-commit –∑–∞–≤–µ—Ä—à–µ–Ω–æ\"}\n    except subprocess.CalledProcessError as e:\n        log_action(f\"‚ùå Auto-commit –ø–æ–º–∏–ª–∫–∞: {str(e)}\")\n        return {\"status\": \"error\", \"message\": f\"‚ùå Auto-commit –ø–æ–º–∏–ª–∫–∞: {str(e)}\"}\n\n\n# [BEN] Validation logic inserted here\ndef write_debug_log(message):\n    with open(os.path.join(base_path, 'debug.log'), 'a', encoding='utf-8') as f:\n        f.write(f'[{datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}] {message}\\n')",
      "gpt_interpreter.py": "import os\nimport json\ndef interpret_user_prompt(prompt):\n    from openai import OpenAI\n    from config import API_KEY\n    import json\n\n    client = OpenAI(api_key=API_KEY)\n    system_msg = {\n        \"role\": \"system\",\n        \"content\": (\n            \"–¢–∏ –ø—Ä–∞—Ü—é—î—à –≤ —Å–∏—Å—Ç–µ–º—ñ Ben Assistant. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–º–ø—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥—ñ—é \"\n            \"—É —Ñ–æ—Ä–º–∞—Ç—ñ JSON, —è–∫—É –∞–≥–µ–Ω—Ç –∑–º–æ–∂–µ –≤–∏–∫–æ–Ω–∞—Ç–∏. –ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –æ–¥–∏–Ω JSON-–æ–± º—î–∫—Ç. \"\n            \"–î–æ–∑–≤–æ–ª–µ–Ω—ñ –¥—ñ—ó: append_file, update_code, run_macro, insert_between_markers, run_shell —Ç–æ—â–æ. \"\n            \"–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤–∏–≥–∞–¥–∞–Ω—ñ –¥—ñ—ó –Ω–∞ –∫—à—Ç–∞–ª—Ç 'create_function' ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π append_file –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ filename —ñ content.\"\n        )\n    }\n\n    user_msg = {\"role\": \"user\", \"content\": prompt}\n\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[system_msg, user_msg],\n        temperature=0.3\n    )\n\n    raw = response.choices[0].message.content.strip()\n\n    # üßº –û—á–∏—Å—Ç–∫–∞ Markdown-—Ñ–æ—Ä–º–∞—Ç—É\n    if raw.startswith(\"```json\"):\n        raw = raw[7:]  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫\n    if raw.endswith(\"```\"):\n        raw = raw[:-3]  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫\n    raw = raw.strip()\n\n    print(\"[GPT RAW OUTPUT]\\n\", raw)\n\n    try:\n        data = json.loads(raw)\n        with open(\"cache.txt\", \"w\", encoding=\"utf-8\") as f:\n            f.write(json.dumps(data, indent=2, ensure_ascii=False))\n        print(\"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ cache.txt\")\n    except Exception as e:\n        print(f\"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ JSON: {e}\")\n",
      "gpt_response.json": "[\n  {\n    \"status\": \"error\",\n    \"message\": \"‚ùå Missing fields in update\"\n  }\n]",
      "greeting.py": "\ndef greet_user(name):\n    print(f\"Hello, {name}!\")\n",
      "lux_structure.py": "\nimport pandas as pd\n\ndef get_lux_structure_signal(df):\n    \"\"\"\n    –ê–Ω–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∏–Ω–∫—É, —è–∫ —É LuxAlgo: HH, LL, LH, HL + BOS/CHoCH\n    \"\"\"\n    if len(df) < 20 or not {'high', 'low'}.issubset(df.columns):\n        return {\"direction\": None, \"BOS\": False, \"CHoCH\": False, \"last_structure\": None}\n\n    highs = df['high'].values\n    lows = df['low'].values\n\n    structure = []\n    direction = None\n    bos = False\n    choch = False\n\n    swing_points = []\n\n    for i in range(2, len(df) - 2):\n        if highs[i] > highs[i-2] and highs[i] > highs[i-1] and highs[i] > highs[i+1] and highs[i] > highs[i+2]:\n            swing_points.append((df.index[i], 'high', highs[i]))\n        elif lows[i] < lows[i-2] and lows[i] < lows[i-1] and lows[i] < lows[i+1] and lows[i] < lows[i+2]:\n            swing_points.append((df.index[i], 'low', lows[i]))\n\n    if len(swing_points) < 3:\n        return {\"direction\": None, \"BOS\": False, \"CHoCH\": False, \"last_structure\": None}\n\n    p1 = swing_points[-3]\n    p2 = swing_points[-2]\n    p3 = swing_points[-1]\n\n    def get_type(p1, p2):\n        if p1[1] == 'high' and p2[1] == 'high':\n            return 'HH' if p2[2] > p1[2] else 'LH'\n        elif p1[1] == 'low' and p2[1] == 'low':\n            return 'LL' if p2[2] < p1[2] else 'HL'\n        return None\n\n    type1 = get_type(p1, p2)\n    type2 = get_type(p2, p3)\n\n    if type1 and type2:\n        structure.append(type2)\n        if type1 in ['HH', 'HL'] and type2 in ['LH', 'LL']:\n            direction = 'down'\n            choch = True if type1 == 'HH' and type2 == 'LL' else False\n            bos = True if type1 == 'HL' and type2 == 'LL' else False\n        elif type1 in ['LL', 'LH'] and type2 in ['HH', 'HL']:\n            direction = 'up'\n            choch = True if type1 == 'LL' and type2 == 'HH' else False\n            bos = True if type1 == 'LH' and type2 == 'HH' else False\n\n    return {\n        \"direction\": direction,\n        \"BOS\": bos,\n        \"CHoCH\": choch,\n        \"last_structure\": structure[-1] if structure else None\n    }\n",
      "macros.py": "import json\nfrom gpt_agent_cache import handle_command\n\ndef run_macro(cmd):\n    name = cmd.get(\"name\")\n    params = cmd.get(\"parameters\", {})\n\n    if name == \"undo_last_change\":\n        target_id = params.get(\"target_id\")\n        if not target_id:\n            return {\"status\": \"error\", \"message\": \"‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ target_id –¥–ª—è undo\"}\n\n        undo_cmd = {\n            \"action\": \"undo_change\",\n            \"target_id\": target_id\n        }\n        return handle_command(undo_cmd)\n\n    elif name == \"scan_all_on_start\":\n        steps = [\n            {\"action\": \"scan_all_files\"},\n            {\"action\": \"analyze_all_code\"}\n        ]\n        for step in steps:\n            result = handle_command(step)\n            if result.get(\"status\") != \"success\":\n                return {\"status\": \"error\", \"message\": f\"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ {step['action']}: {result.get('message')}\"}\n        return {\"status\": \"success\", \"message\": \"‚úÖ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\"}\n\n    return {\"status\": \"error\", \"message\": f\"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∞: {name}\"}\n",
      "main.py": "def run_bot():\n    print(\"–ë–æ—Ç –ø—Ä–∞—Ü—é—î. –ü–æ—á–∞—Ç–æ–∫ –ª–æ–≥—ñ–∫–∏...\")\n\nif __name__ == \"__main__\":\n    run_bot()\n\ndef print_hello():\n    print(\"Hello!\")\n",
      "password_utils.py": "\ndef is_valid_password(password):\n    return len(password) >= 8\n",
      "requirements.txt": "requests\nopenai\npython-dotenv\n",
      "run_bot_logic.py": "import pandas as pd\nimport numpy as np\nfrom lux_structure import get_lux_structure_signal\nfrom tsi_divergence import find_tsi_divergence\nfrom confidence import calculate_confidence_score, confidence_score_update  # üß† –î–æ–¥–∞–Ω–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—É –æ—Ü—ñ–Ω–∫—É\nfrom utils.log_trade_to_csv import log_trade  # üß† –ù–æ–≤–∏–π –ª–æ–≥–µ—Ä —Ç—Ä–µ–π–¥—É\n\n# üîÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (–∑ Binance –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É)\ndata_path = 'data/binance_data.csv'\ntry:\n    df = pd.read_csv(data_path)\nexcept:\n    data_path = 'data/historical_data.csv'\n    df = pd.read_csv(data_path)\n\nprint(f\"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ –∑: {data_path}\")\n\n# –û–±—Ä–æ–±–∫–∞ —á–∞—Å—É —Ç–∞ –∫–æ–ª–æ–Ω–æ–∫\ndf.index = pd.to_datetime(df['timestamp'] if 'timestamp' in df.columns else df.index)\n\n# üßÆ –û–±—á–∏—Å–ª–µ–Ω–Ω—è TSI\n# üîÅ –¢–ï–°–¢\n\ndef calculate_tsi(close, long=25, short=13):\n    diff = close.diff()\n    abs_diff = diff.abs()\n    double_smoothed_diff = diff.ewm(span=short).mean().ewm(span=long).mean()\n    double_smoothed_abs = abs_diff.ewm(span=short).mean().ewm(span=long).mean()\n    tsi = 100 * (double_smoothed_diff / double_smoothed_abs)\n    return tsi\n\ndf['tsi'] = calculate_tsi(df['close'])\n\nresults = []\nwindow = 50\n\ntrades_executed = []\nconfidence_memory = {}\n\nfor i in range(window, len(df)):\n    slice_df = df.iloc[:i].copy()\n    current_time = df.index[i]\n    current_price = df['close'].iloc[i]\n    volume_high = slice_df['volume'].iloc[-1] > slice_df['volume'].rolling(20).mean().iloc[-1]\n\n    tsi_signal = find_tsi_divergence(slice_df)\n    tsi_divergence = bool(tsi_signal['divergence'])\n\n    lux_result = get_lux_structure_signal(slice_df)\n\n    # üß† –ö–ª—é—á —Ç—Ä–µ–π–¥—É –¥–ª—è –ø–∞–º º—è—Ç—ñ\n    trade_key = f\"{tsi_signal['divergence']}_{lux_result['BOS']}_{lux_result['CHoCH']}_{volume_high}\"\n    confidence = confidence_score_update(trade_key, None, confidence_memory)\n\n    if (lux_result['BOS'] or lux_result['CHoCH']) and confidence >= 0.5:\n        decision = 'buy' if lux_result['direction'] == 'up' else 'sell'\n        print(f\"‚úÖ –í—Ö—ñ–¥ ({decision.upper()}) | –ß–∞—Å: {current_time} | –ù–∞–ø—Ä—è–º: {lux_result['direction']}\")\n\n        entry_price = current_price\n        tp = round(entry_price * (1.01 if decision == 'buy' else 0.99), 2)\n        sl = round(entry_price * (0.995 if decision == 'buy' else 1.005), 2)\n        rr_ratio = round(abs(tp - entry_price) / abs(entry_price - sl), 2)\n\n        log_trade({\n            'time': current_time.isoformat(),\n            'entry': decision,\n            'price': entry_price,\n            'tp': tp,\n            'sl': sl,\n            'rr': rr_ratio,\n            'tsi_divergence': tsi_signal['divergence'],\n            'lux_structure': 'BOS' if lux_result['BOS'] else 'CHoCH' if lux_result['CHoCH'] else None,\n            'direction': lux_result['direction'],\n            'volume_high': volume_high,\n            'confidence_score': confidence\n        })\n\n        pnl = tp - entry_price if decision == 'buy' else entry_price - tp\n        trades_executed.append({\n            'entry': decision,\n            'entry_price': entry_price,\n            'tp': tp,\n            'sl': sl,\n            'confidence': confidence,\n            'pnl': pnl\n        })\n\n        # üß† –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ\n        confidence_score_update(trade_key, True, confidence_memory)\n    else:\n        decision = 'hold'\n        tp = sl = rr_ratio = None\n        print(f\"‚õî –ü—Ä–æ–ø—É—Å–∫ | {current_time}\")\n        with open('debug_log.txt', 'a', encoding='utf-8') as dbg:\n            dbg.write(f\"‚õî NO ENTRY | Time: {current_time}\\n\")\n            if not tsi_divergence:\n                dbg.write(\"–ü—Ä–∏—á–∏–Ω–∞: TSI-–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è\\n\")\n            if not volume_high:\n                dbg.write(\"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –æ–± º—î–º\\n\")\n            if not (lux_result['BOS'] or lux_result['CHoCH']):\n                dbg.write(\"–ü—Ä–∏—á–∏–Ω–∞: LuxAlgo –Ω–µ –¥–∞–≤ BOS/CHoCH\\n\")\n            if confidence < 0.5:\n                dbg.write(f\"–ü—Ä–∏—á–∏–Ω–∞: –Ω–∏–∑—å–∫–∏–π confidence_score = {confidence}\\n\")\n            dbg.write(\"---\\n\")\n\n        # üß† –ó–Ω–∏–∂–µ–Ω–Ω—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ\n        confidence_score_update(trade_key, False, confidence_memory)\n\n    results.append({\n        'time': current_time.isoformat(),\n        'entry': decision,\n        'price': current_price,\n        'tp': tp,\n        'sl': sl,\n        'rr': rr_ratio,\n        'tsi_divergence': tsi_signal['divergence'],\n        'lux_structure': 'BOS' if lux_result['BOS'] else 'CHoCH' if lux_result['CHoCH'] else None,\n        'direction': lux_result['direction'],\n        'volume_high': volume_high,\n        'confidence_score': confidence\n    })\n\npd.DataFrame(results).to_csv('results.csv', index=False)\nprint(\"üìä –ë–µ–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Üí results.csv\")\n\n# üìà performance.csv: –ø—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\nif trades_executed:\n    df_perf = pd.DataFrame(trades_executed)\n    total_pnl = round(df_perf['pnl'].sum(), 2)\n    winrate = round((df_perf['pnl'] > 0).mean() * 100, 2)\n    avg_profit = round(df_perf[df_perf['pnl'] > 0]['pnl'].mean(), 2)\n    avg_loss = round(df_perf[df_perf['pnl'] <= 0]['pnl'].mean(), 2)\n\n    pd.DataFrame([{\n        'Total Trades': len(df_perf),\n        'Total PnL': total_pnl,\n        'Winrate (%)': winrate,\n        'Avg Profit': avg_profit,\n        'Avg Loss': avg_loss\n    }]).to_csv('performance.csv', index=False)\n\n    print(\"üìà performance.csv –∑–±–µ—Ä–µ–∂–µ–Ω–æ\")\nelse:\n    print(\"‚ö†Ô∏è –ñ–æ–¥–Ω–æ—ó —É–≥–æ–¥–∏ –Ω–µ –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ ‚Üí performance.csv –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ\")\n",
      "script.py": "\ndef greet(name):\n    print(f\"Hello, {name}\")\n",
      "test1.py": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó\n# [BEN] Validation logic inserted here",
      "test2.py": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è exceptions\n# [BEN] Exception handling logic inserted here",
      "test3.py": "# –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è logging\n# [BEN] Logging logic inserted here",
      "test_append.py": "# –ü–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç—Édef test_func():\ndef test_func():\n    return True\n",
      "test_ben_module.py": "# –¶–µ–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É —Ñ—É–Ω–∫—Ü—ñ—ó update_code\n\n# [BEN] Validation logic inserted here\nprint('–í—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ 3-–π —Ä—è–¥–æ–∫')\n# [BEN] Validation logic inserted here\n# [BEN] Validation logic inserted here\n# [BEN] Validation logic inserted here\n# [BEN] Validation logic inserted here\n# [BEN] Exception handling logic inserted here\n# [BEN] Validation logic inserted here",
      "test_cli.txt": "–ü—Ä–∏–≤—ñ—Ç —ñ–∑ CLI!",
      "test_memory_renamed.txt": "Memory test",
      "tsi_divergence.py": "import pandas as pd\nfrom scipy.signal import argrelextrema\nimport numpy as np\n\ndef find_tsi_divergence(df: pd.DataFrame, order: int = 5):\n    \"\"\"\n    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å TSI-–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó –º—ñ–∂ —Ü—ñ–Ω–æ—é —Ç–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º TSI\n    \"\"\"\n    if 'close' not in df.columns or 'tsi' not in df.columns:\n        return {'divergence': None}\n\n    df = df.copy()\n    df['price_max'] = df['close'].iloc[argrelextrema(df['close'].values, np.greater_equal, order=order)[0]]\n    df['price_min'] = df['close'].iloc[argrelextrema(df['close'].values, np.less_equal, order=order)[0]]\n    df['tsi_max'] = df['tsi'].iloc[argrelextrema(df['tsi'].values, np.greater_equal, order=order)[0]]\n    df['tsi_min'] = df['tsi'].iloc[argrelextrema(df['tsi'].values, np.less_equal, order=order)[0]]\n\n    # Bearish divergence: higher high in price, lower high in TSI\n    price_highs = df.dropna(subset=['price_max'])[-2:]\n    tsi_highs = df.dropna(subset=['tsi_max'])[-2:]\n    if len(price_highs) == 2 and len(tsi_highs) == 2:\n        if price_highs['price_max'].iloc[1] > price_highs['price_max'].iloc[0] and \\\n           tsi_highs['tsi_max'].iloc[1] < tsi_highs['tsi_max'].iloc[0]:\n            return {\n                'divergence': 'bearish',\n                'price_point_1': price_highs['price_max'].iloc[0],\n                'price_point_2': price_highs['price_max'].iloc[1],\n                'tsi_point_1': tsi_highs['tsi_max'].iloc[0],\n                'tsi_point_2': tsi_highs['tsi_max'].iloc[1]\n            }\n\n    # Bullish divergence: lower low in price, higher low in TSI\n    price_lows = df.dropna(subset=['price_min'])[-2:]\n    tsi_lows = df.dropna(subset=['tsi_min'])[-2:]\n    if len(price_lows) == 2 and len(tsi_lows) == 2:\n        if price_lows['price_min'].iloc[1] < price_lows['price_min'].iloc[0] and \\\n           tsi_lows['tsi_min'].iloc[1] > tsi_lows['tsi_min'].iloc[0]:\n            return {\n                'divergence': 'bullish',\n                'price_point_1': price_lows['price_min'].iloc[0],\n                'price_point_2': price_lows['price_min'].iloc[1],\n                'tsi_point_1': tsi_lows['tsi_min'].iloc[0],\n                'tsi_point_2': tsi_lows['tsi_min'].iloc[1]\n            }\n\n    return {'divergence': None}",
      "–∫–æ–º–∞–Ω–¥–∏.txt": "python gpt_agent_cache.py\n"
    }
  }
]