{
  "action": "create_file",
  "filename": "ben_gui_desktop/widgets/template_editor.py",
  "content": "import tkinter as tk\nfrom tkinter import ttk, messagebox, scrolledtext\nimport os\n\nclass TemplateEditor(ttk.Frame):\n    def __init__(self, parent):\n        super().__init__(parent)\n\n        self.template_dir = os.path.join(os.path.dirname(__file__), '..', 'templates')\n        self.current_template = None\n        self.unsaved_changes = False\n\n        ttk.Label(self, text=\"üìÅ Template Editor\", font=(\"Helvetica\", 14, \"bold\")).pack(anchor=\"w\", pady=(0, 5))\n\n        top_frame = ttk.Frame(self)\n        top_frame.pack(fill=tk.X)\n\n        self.template_selector = ttk.Combobox(top_frame, state=\"readonly\")\n        self.template_selector.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))\n        self.template_selector.bind(\"<<ComboboxSelected>>\", self.load_selected_template)\n\n        ttk.Button(top_frame, text=\"üîÑ Refresh List\", command=self.refresh_list).pack(side=tk.LEFT)\n\n        self.editor = scrolledtext.ScrolledText(self, wrap=tk.WORD, height=12)\n        self.editor.pack(fill=tk.BOTH, expand=True, pady=5)\n        self.editor.bind(\"<Key>\", lambda e: self.set_unsaved())\n\n        save_btn = ttk.Button(self, text=\"üíæ Save\", command=self.save_template)\n        save_btn.pack(pady=5)\n\n        self.refresh_list()\n        parent.protocol(\"WM_DELETE_WINDOW\", self.on_close)\n\n    def refresh_list(self):\n        try:\n            files = [f for f in os.listdir(self.template_dir) if f.endswith(\".j2\")]\n            self.template_selector[\"values\"] = files\n            if files:\n                self.template_selector.current(0)\n                self.load_selected_template()\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"‚ùå Failed to load templates: {e}\")\n\n    def load_selected_template(self, event=None):\n        if self.unsaved_changes:\n            if not messagebox.askyesno(\"Unsaved\", \"‚ö†Ô∏è Unsaved changes. Discard?\"):\n                return\n        name = self.template_selector.get()\n        path = os.path.join(self.template_dir, name)\n        try:\n            with open(path, \"r\", encoding=\"utf-8\") as f:\n                content = f.read()\n            self.editor.delete(\"1.0\", tk.END)\n            self.editor.insert(tk.END, content)\n            self.current_template = name\n            self.unsaved_changes = False\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"‚ùå Failed to load: {e}\")\n\n    def save_template(self):\n        if not self.current_template:\n            return\n        try:\n            content = self.editor.get(\"1.0\", tk.END)\n            path = os.path.join(self.template_dir, self.current_template)\n            with open(path, \"w\", encoding=\"utf-8\") as f:\n                f.write(content)\n            self.unsaved_changes = False\n            messagebox.showinfo(\"Saved\", f\"‚úÖ Saved {self.current_template}\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"‚ùå Failed to save: {e}\")\n\n    def set_unsaved(self):\n        self.unsaved_changes = True\n\n    def on_close(self):\n        if self.unsaved_changes:\n            if not messagebox.askyesno(\"Exit\", \"‚ö†Ô∏è Unsaved changes. Exit anyway?\"):\n                return\n        self.master.destroy()"
}
