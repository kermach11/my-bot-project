{
  "action": "update_code",
  "file_path": "ben_gui_desktop/main_gui.py",
  "update_type": "custom_insert",
  "insert_at_line": 25,
  "code": "def check_duplicate_function():\n    content = parameter_form.get_command_fields().get(\"content\")\n    filename = parameter_form.get_command_fields().get(\"filename\")\n    if not content or not filename:\n        response_area.insert(tk.END, \"‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ content —ñ filename\\n\")\n        return\n    try:\n        new_ast = ast.parse(content)\n        new_func_name = next((n.name for n in ast.walk(new_ast) if isinstance(n, ast.FunctionDef)), None)\n        if not new_func_name:\n            response_area.insert(tk.END, \"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–º º—è —Ñ—É–Ω–∫—Ü—ñ—ó —É content\\n\")\n            return\n\n        file_path = os.path.join(os.path.dirname(__file__), filename)\n        if not os.path.exists(file_path):\n            response_area.insert(tk.END, \"‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –¥—É–±–ª—é–≤–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ\\n\")\n            return\n\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            existing_ast = ast.parse(f.read())\n        for node in ast.walk(existing_ast):\n            if isinstance(node, ast.FunctionDef) and node.name == new_func_name:\n                response_area.insert(tk.END, f\"‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è '{new_func_name}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ '{filename}'\\n\")\n                return\n        response_area.insert(tk.END, f\"‚úÖ –§—É–Ω–∫—Ü—ñ—è '{new_func_name}' –≤—ñ–¥—Å—É—Ç–Ω—è –≤ '{filename}' ‚Äî –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–ª—è—Ç–∏\\n\")\n    except Exception as e:\n        response_area.insert(tk.END, f\"‚ùå Error: {e}\\n\")\n\ncheck_btn = ttk.Button(root, text=\"üß† –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞ –¥—É–±–ª—å\", command=check_duplicate_function)\ncheck_btn.pack(pady=5)"
}
