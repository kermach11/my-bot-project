def handle_command(cmd):
    # üß† –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è rollback
    if cmd.get("action") in ["yes", "no"] and cmd.get("target_id"):
        target_id = cmd["target_id"]
        if cmd["action"] == "yes":
            prev_cmd = get_command_by_id(target_id)
            if not prev_cmd:
                return {"status": "error", "message": f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ñ–¥–∫–∞—Ç—É: {target_id}"}
            file_path = prev_cmd.get("file")
            if not file_path or not os.path.exists(file_path + ".bak"):
                return {"status": "error", "message": f"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è '{target_id}'"}
            shutil.copy(file_path + ".bak", file_path)
            return {"status": "success", "message": f"‚úÖ –í—ñ–¥–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {target_id}"}
        else:
            return {"status": "cancelled", "message": f"‚õî –í—ñ–¥–∫–∞—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–ª—è {target_id}"}

    if cmd.get("filename") == "env" or cmd.get("file_path", "").endswith("env"):
        if cmd["action"] in ["update_file", "append_file", "replace_in_file", "update_code", "delete_file"]:
            return {"status": "error", "message": "‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∞–±–æ –∫–æ–º—ñ—Ç–∏—Ç–∏ —Ñ–∞–π–ª 'env'"}

import os
import sys
import json
import time
import re
import ast
import shutil
import subprocess
import traceback
import sqlite3
from datetime import datetime, timezone
from colorama import init, Fore, Style
from dotenv import load_dotenv

init()

# üß† –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv("C:/Users/DC/env_files/env")

# üß© –î–æ–¥–∞–≤–∞–Ω–Ω—è base_path –¥–æ sys.path –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
if os.getcwd() not in sys.path:
    sys.path.append(os.getcwd())

# ‚öôÔ∏è –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config import base_path, request_file, response_file, history_file, API_KEY

# üß† GPT-—ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è
from gpt_interpreter import interpret_user_prompt
interpret_user_prompt("—Å—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–∞—Ä–æ–ª—å –º–∞—î —â–æ–Ω–∞–π–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤")

def backup_file(filepath):
    if not filepath or not os.path.isfile(filepath):
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ backup ‚Äî –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —à–ª—è—Ö: {filepath}")
        return

    # –§–æ—Ä–º—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –∑ .bak
    bak_path = filepath + ".bak"
    if not os.path.exists(bak_path):
        try:
            shutil.copy2(filepath, bak_path)
            print(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {bak_path}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: {e}")

import re

def substitute_arguments(command_str, arguments):
    if not arguments:
        return command_str
    for key, value in arguments.items():
        command_str = command_str.replace(f"{{{{{key}}}}}", str(value))
    return command_str

def execute_macro(macro_name, arguments=None):
    macro_file = os.path.join(base_path, "macro_commands.json")
    if not os.path.isfile(macro_file):
        return {"status": "error", "message": "‚ùå macro_commands.json not found"}

    with open(macro_file, "r", encoding="utf-8") as f:
        macros = json.load(f)

    # üîÑ –ü–æ—à—É–∫ –º–∞–∫—Ä–æ—Å—É –ø–æ —ñ–º–µ–Ω—ñ
    macro_steps = None
    for macro in macros:
        if macro.get("macro_name") == macro_name:
            macro_steps = macro.get("steps")
            break

    if not macro_steps:
        return {"status": "error", "message": f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∞: {macro_name}"}

    for step in macro_steps:
        if isinstance(step, dict):
            if "action" in step:
                # üü¢ –ü–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: { "action": "...", "filename": "...", ... }
                action = step["action"]
                params = {k: v for k, v in step.items() if k != "action"}
            else:
                # üîµ –ö–ª–∞—Å–∏—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: { "replace_in_file": { ... } }
                action, params = next(iter(step.items()))
        else:
            print("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫—Ä–æ–∫—É –º–∞–∫—Ä–æ—Å—É, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
            continue

        if action == "run_shell":
            command = substitute_arguments(params["command"], arguments)
            result = os.popen(command).read().strip()
            print(result)
        else:
            # –í—Å—Ç–∞–≤–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –¥—ñ–π (replace, append, update_code, —Ç–æ—â–æ)
            response = handle_command({ "action": action, **params })
            print(response.get("message", f"‚úÖ {action} –≤–∏–∫–æ–Ω–∞–Ω–æ"))

    return {"status": "success", "message": f"‚úÖ –ú–∞–∫—Ä–æ—Å '{macro_name}' –≤–∏–∫–æ–Ω–∞–Ω–æ"}

import shutil

def undo_last_backup(filepath):
    backups = [f for f in os.listdir(base_path) if f.startswith(os.path.basename(filepath)) and ".backup_" in f]
    backups.sort(reverse=True)
    if backups:
        last_backup = os.path.join(base_path, backups[0])
        shutil.copy2(last_backup, filepath)
        return {"status": "success", "message": f"‚úÖ Restored from backup: {last_backup}"}
    return {"status": "error", "message": "‚ùå No backup found"}

import subprocess

def write_debug_log(message):
    debug_log_path = os.path.join(base_path, "debug.log")
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
    with open(debug_log_path, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")

def generate_macro_steps_from_prompt(prompt_text):
    from openai import OpenAI
    client = OpenAI(api_key=API_KEY)

    system_prompt = """
–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–¥—É–≤–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
–ù–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–∏ JSON-–º–∞—Å–∏–≤ macro-–∫—Ä–æ–∫—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ:

[
  {"action": "create_file", "filename": "example.py", "content": "..."},
  {"action": "update_code", "file_path": "example.py", "update_type": "logging"},
  {"action": "run_python", "filename": "example.py"}
]

–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –º–∞—Å–∏–≤ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å.
"""

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt_text}
        ]
    )

    try:
        steps = json.loads(response.choices[0].message.content.strip())
        return {"status": "success", "steps": steps}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫—Ä–æ–∫–∏: {e}"}

def self_improve_agent(filename="gpt_agent_cache.py"):
    try:
        filepath = os.path.join(base_path, filename)
        with open(filepath, "r", encoding="utf-8") as f:
            code = f.read()

        prompt = f"""
üîç –¢–∏ GPT-–∞–≥–µ–Ω—Ç, —è–∫–∏–π –∞–Ω–∞–ª—ñ–∑—É—î —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π –∫–æ–¥.  
–§–∞–π–ª: `{filename}`  
–û—Å—å –π–æ–≥–æ –≤–º—ñ—Å—Ç:

{code}

üß† –í–∏–∑–Ω–∞—á, —è–∫—ñ –º—ñ–∫—Ä–æ–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–Ω–µ—Å—Ç–∏: –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ—â–µ–Ω–Ω—è, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –∞–±–æ —á–∏—Å—Ç–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É.

‚öôÔ∏è –ó–≥–µ–Ω–µ—Ä—É–π Python-JSON –æ–± º—î–∫—Ç —ñ–∑ –¥—ñ—î—é `safe_update_code`, —É —Ñ–æ—Ä–º–∞—Ç—ñ:

{{
  "action": "safe_update_code",
  "filename": "{filename}",
  "updates": [
    {{
      "pattern": "REGEX-–ü–ê–¢–ï–†–ù",
      "replacement": "–ù–û–í–ò–ô –ö–û–î",
      "update_type": "replace"
    }}
  ]
}}

–ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ –æ–±'—î–∫—Ç JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å.
"""

        from openai import OpenAI
        client = OpenAI(api_key=API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        result = json.loads(response.choices[0].message.content.strip())

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
        with open("gpt_response.json", "w", encoding="utf-8") as f:
            json.dump(result, f, indent=2, ensure_ascii=False)

        # ‚õëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ safe update
        update_result = handle_safe_update_code(result, base_path)
        return update_result

    except Exception as e:
        return {"status": "error", "message": f"‚ùå Self-improvement failed: {e}"}
def generate_improvement_plan():
    try:
        # 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ .py —Ñ–∞–π–ª–∏
        files = scan_all_files(base_path, [".py"])
        file_snippets = []

        for path in files:
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read()
                    file_snippets.append({"file": path, "code": content[:2000]})  # –¥–æ 2k —Å–∏–º–≤–æ–ª—ñ–≤
            except:
                continue

        # 2. GPT prompt
        prompt = f"""
üìÅ –£ –º–µ–Ω–µ —î Python-–ø—Ä–æ—î–∫—Ç —ñ–∑ —Ç–∞–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:
{json.dumps(file_snippets, indent=2, ensure_ascii=False)}

üß† –ó–≥–µ–Ω–µ—Ä—É–π –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É ‚Äî —Å–ø–∏—Å–æ–∫ macro-–∫—Ä–æ–∫—ñ–≤ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É, –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó, –∑–∞—Ö–∏—Å—Ç—É –∞–±–æ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É.

–ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ JSON —É —Ñ–æ—Ä–º–∞—Ç—ñ:

{{
  "action": "run_macro",
  "steps": [ ... ]
}}
"""

        from openai import OpenAI
        client = OpenAI(api_key=API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        plan = json.loads(response.choices[0].message.content.strip())

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ gpt_plan.json
        with open("gpt_plan.json", "w", encoding="utf-8") as f:
            json.dump(plan, f, indent=2, ensure_ascii=False)

        return {"status": "success", "message": "üìã –ü–ª–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ gpt_plan.json", "steps": plan.get("steps", [])}

    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ü–æ–º–∏–ª–∫–∞ Smart-–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}"}

def analyze_all_code():
    try:
        files = scan_all_files(base_path, [".py"])
        file_snippets = []

        for path in files:
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read()
                    file_snippets.append({"file": path, "code": content[:2000]})
            except:
                continue

        prompt = f"""
üìÅ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —è–∫—ñ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ Python-–∫–æ–¥—É.  
–ü–µ—Ä–µ–≤—ñ—Ä: –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–π, –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ª–æ–≥—É–≤–∞–Ω–Ω—è, –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –º—ñ—Å—Ü—è, –ø–æ–≥–∞–Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è.

–§–∞–π–ª–∏:
{json.dumps(file_snippets, indent=2, ensure_ascii=False)}

üß† –ü–æ–≤–µ—Ä–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ:
{{
  "status": "ok",
  "recommendations": [ ... ]
}}
"""

        from openai import OpenAI
        client = OpenAI(api_key=API_KEY)

        # –°–ø—Ä–æ–±–∞ –º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∏, —è–∫—â–æ JSON –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π
        for attempt in range(2):
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}]
            )
            raw = response.choices[0].message.content.strip()

            # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ RAW-–≤–∏–≤—ñ–¥ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            with open("gpt_analysis_raw.txt", "w", encoding="utf-8") as f:
                f.write(raw)

            try:
                report = json.loads(raw)
                break  # ‚úÖ JSON –≤–∞–ª—ñ–¥–Ω–∏–π, –≤–∏—Ö–æ–¥–∏–º–æ
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt + 1} ‚Äî –ø–æ–º–∏–ª–∫–∞ JSON: {e}")
                if attempt == 1:
                    return {"status": "error", "message": f"‚ùå GPT –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤–∞–ª—ñ–¥–Ω–∏–π JSON: {e}"}

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –∑–≤—ñ—Ç
        with open("gpt_analysis.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        return {"status": "success", "message": "üìä –ê–Ω–∞–ª—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ gpt_analysis.json"}

    except Exception as e:
        return {"status": "error", "message": f"‚ùå Analyze failed: {e}"}

def execute_plan():
    plan_file = os.path.join(base_path, "gpt_plan.json")
    if not os.path.exists(plan_file):
        return {"status": "error", "message": "‚ùå gpt_plan.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

    try:
        with open(plan_file, "r", encoding="utf-8") as f:
            plan = json.load(f)

        if not isinstance(plan, list):
            return {"status": "error", "message": "‚ùå gpt_plan.json –º–∞—î –±—É—Ç–∏ —Å–ø–∏—Å–∫–æ–º –¥—ñ–π"}

        results = []
        for i, step in enumerate(plan):
            print(f"\n‚öôÔ∏è –í–∏–∫–æ–Ω—É—é –∫—Ä–æ–∫ {i + 1}/{len(plan)}: {step.get('action')}")
            result = handle_command(step)
            results.append(result)

            if result.get("status") != "success":
                print(f"‚ùå –ó—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ –∫—Ä–æ—Ü—ñ {i + 1} ‚Äî –ø–æ–º–∏–ª–∫–∞: {result.get('message')}")
                return {
                    "status": "error",
                    "message": f"‚ùå –ü–ª–∞–Ω –∑—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ –∫—Ä–æ—Ü—ñ {i + 1}",
                    "results": results
                }

        return {
            "status": "success",
            "message": f"‚úÖ –ü–ª–∞–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é ({len(plan)} –∫—Ä–æ–∫—ñ–≤)",
            "results": results
        }

    except Exception as e:
        return {"status": "error", "message": f"‚ùå execute_plan –ø–æ–º–∏–ª–∫–∞: {e}"}

def handle_run_shell(command):
    shell_cmd = command.get("command")
    if not shell_cmd:
        return {"status": "error", "message": "‚ùå Missing shell command"}

    try:
        print(f"[BEN] üíª Running shell: {shell_cmd}")
        result = subprocess.run(shell_cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            return {"status": "error", "message": f"‚ùå Shell error: {result.stderr.strip()}"}
        return {"status": "success", "message": f"‚úÖ Shell OK: {result.stdout.strip()}"}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Shell exception: {e}"}

def create_history_table():
    conn = sqlite3.connect(os.path.join(base_path, "history.sqlite"))
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS command_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            action TEXT,
            file_path TEXT,
            update_type TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()
write_debug_log('üü¢ Agent started and listening...')

def is_valid_python_file(filepath):
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            source = f.read()
        ast.parse(source)
        return True
    except SyntaxError as e:
        print(f"‚ùå Syntax error in {filepath}: {e}")
        return False

create_history_table()

def log_action(message):
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
    with open(history_file, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")
def get_command_by_id(target_id):
    try:
        with open(".ben_memory.json", "r", encoding="utf-8") as f:
            memory = json.load(f)
        for entry in reversed(memory):  # –û—Å—Ç–∞–Ω–Ω—ñ –ø–µ—Ä—à–∏–º–∏
            if entry.get("history_id") == target_id:
                return entry
    except:
        pass
    return None
def ask_confirmation_for_rollback(prev_code, target_id):
    prompt = (
        f"üß† –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥, —è–∫–∏–π –±—É–¥–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑ ID {target_id}:\n\n"
        f"{prev_code}\n\n"
        "üîÅ –•–æ—á–µ—à –≤—ñ–¥–∫–æ—Ç–∏—Ç–∏ –¥–æ —Ü—å–æ–≥–æ –∫–æ–¥—É? –ù–∞–ø–∏—à–∏ 'yes' –∞–±–æ 'no'"
    )
    with open("gpt_response.json", "w", encoding="utf-8") as f:
        json.dump({"status": "awaiting_confirmation", "message": prompt, "target_id": target_id}, f, indent=2, ensure_ascii=False)
    return {"status": "paused", "message": "‚è∏Ô∏è –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ –≤—ñ–¥–∫–∞—Ç"}

import importlib.util
import shutil

CRITICAL_FILES = [
    "gpt_agent_cache.py",
    "ben_writer.py",
    "cache.txt",
    "gpt_response.json",
    "macro_commands.json"
]

def handle_safe_update_code(cmd, base_path):
    filename = cmd.get("filename")
    updates = cmd.get("updates", [])
    filepath = os.path.join(base_path, filename)

    if not os.path.exists(filepath):
        return {"status": "error", "message": f"‚ùå File not found: {filename}"}

    # üîß –î–æ–¥–∞—î–º–æ base_path —É sys.path
    import sys
    if base_path not in sys.path:
        sys.path.append(base_path)

    # 1. Create backup
    backup_path = filepath + ".bak"
    shutil.copyfile(filepath, backup_path)

    # 2. Read original
    with open(filepath, "r", encoding="utf-8") as f:
        content = f.read()

    # 3. Apply updates
    try:
        for update in updates:
            pattern = update["pattern"]
            replacement = update["replacement"]
            multiple = update.get("multiple", False)
            flags = re.MULTILINE | re.DOTALL
            if multiple:
                content = re.sub(pattern, replacement, content, flags=flags)
            else:
                content = re.sub(pattern, replacement, content, count=1, flags=flags)
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Regex error: {str(e)}"}

    # 4. Write to temp
    tmp_path = filepath + ".tmp"
    with open(tmp_path, "w", encoding="utf-8") as f:
        f.write(content)

    # 5. –°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ ast
    if filename.endswith(".py"):
        try:
            with open(tmp_path, "r", encoding="utf-8") as f:
                code = f.read()
                ast.parse(code)  # üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—É –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
        except Exception as e:
            return {"status": "error", "message": f"‚ùå Syntax error: {str(e)}. Rolled back."}

        # 6. (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—É
        try:
            spec = importlib.util.spec_from_file_location("tmp_module", tmp_path)
            if spec and spec.loader:
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
        except Exception as e:
            return {"status": "error", "message": f"‚ùå Import error: {str(e)}. Rolled back."}


    # 7. All good ‚Äî apply
    shutil.move(tmp_path, filepath)
    return {"status": "success", "message": f"‚úÖ Safe update applied to {filename}"}

def save_to_memory(cmd):
    memory_file = os.path.join(base_path, ".ben_memory.json")
    try:
        if os.path.exists(memory_file):
            with open(memory_file, "r", encoding="utf-8") as f:
                memory = json.load(f)
        else:
            memory = []
        cmd["timestamp"] = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
        memory.append(cmd)
        with open(memory_file, "w", encoding="utf-8") as f:
            json.dump(memory[-100:], f, indent=2, ensure_ascii=False)
    except Exception as e:
        log_action(f"‚ö†Ô∏è Error saving to memory: {str(e)}")

def handle_list_history():
    memory_file = os.path.join(base_path, ".ben_memory.json")
    if os.path.exists(memory_file):
        with open(memory_file, "r", encoding="utf-8") as f:
            memory = json.load(f)
        return {"status": "success", "history": memory[-20:]}
    return {"status": "error", "message": "‚ùå Memory file not found"}

def get_history():
    try:
        import sqlite3
        conn = sqlite3.connect(os.path.join(base_path, "history.sqlite"))
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM command_history ORDER BY timestamp DESC LIMIT 20")
        rows = cursor.fetchall()
        conn.close()
        return {"status": "success", "history": rows}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Failed to fetch from SQLite: {e}"}

def handle_check_file_access(filename):
    filepath = os.path.join(base_path, filename)
    if os.path.isfile(filepath):
        return {"status": "success", "message": "‚úÖ File exists"}
    else:
        return {"status": "error", "message": f"‚ùå File not found: {filename}"}

def read_requests():
    if not os.path.exists(request_file):
        return []
    with open(request_file, "r", encoding="utf-8") as f:
        try:
            text = f.read().strip()
            if not text:
                return []
            data = json.loads(text)
            return data if isinstance(data, list) else [data]
        except Exception as e:
            return [{"status": "error", "message": f"‚ùå JSON error: {str(e)}"}]

def write_response(responses):
    with open(response_file, "w", encoding="utf-8") as f:
        json.dump(responses, f, indent=2, ensure_ascii=False)

def clear_cache():
    with open(request_file, "w", encoding="utf-8") as f:
        f.write("")

import difflib

def smart_deduplicate_insertion(existing_block, new_block):
    existing_lines = [line.strip() for line in existing_block.strip().splitlines()]
    new_lines = [line.strip() for line in new_block.strip().splitlines()]
    merged = existing_block.strip().splitlines()
    for line in new_lines:
        if line and line.strip() not in existing_lines:
            merged.append(line)
    return "\n".join(merged) + "\n"

def handle_update_code(command):
    file_path = command.get('file_path')

    # üõ°Ô∏è –ó–∞—Ö–∏—â–µ–Ω—ñ —Ñ–∞–π–ª–∏
    protected_files = ["gpt_agent_cache.py", "cache.txt", "ben_gui_v2.py"]
    filename = os.path.basename(file_path)
    if filename in protected_files:
        return {"status": "error", "message": f"‚ùå Cannot modify protected file: {filename}"}
    
    # ‚úÖ –ë–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–∞–º–∏
    if file_path and os.path.exists(file_path):
        backup_file(file_path)

    update_type = command.get('update_type')  # 'validation', 'exceptions', 'logging', 'custom_insert', ...
    insert_at_line = command.get('insert_at_line')
    insert_code = command.get('code') 

    # üÜï –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –±–µ–∑ updates[]
    if "updates" not in command and all(k in command for k in ("pattern", "replacement", "update_type")):
        command["updates"] = [{
            "pattern": command["pattern"],
            "replacement": command["replacement"],
            "update_type": command["update_type"]
        }]

    if not file_path:
        return {"status": "error", "message": "‚ùå Missing 'file_path'"}

    # üîÅ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ç–∏–ø–∏
    if update_type in ("validation", "exceptions", "logging", "custom_insert"):
        test_result = handle_command({"action": "test_python", "filename": file_path})
        if test_result.get("status") == "error":
            return {"status": "error", "message": f"‚ùå Syntax check failed: {test_result.get('message')}"}

        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        if update_type == 'validation':
            lines.append('\nif data is None:\n    raise ValueError("Input data cannot be None")')
        elif update_type == 'exceptions':
            lines.append('\ntry:\n    risky_operation()\nexcept Exception as e:\n    print(f"Exception occurred: {e}")')
        elif update_type == 'logging':
            lines.append('\nimport logging\nlogging.basicConfig(level=logging.INFO)\nlogging.info("Log message from BEN")')
        elif update_type == 'custom_insert' and insert_code:
            if isinstance(insert_at_line, int) and 0 <= insert_at_line <= len(lines):
                lines.insert(insert_at_line, insert_code + '\n')
            else:
                return {"status": "error", "message": "‚ùå Invalid insert_at_line value"}

        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)

        if not is_valid_python_file(file_path):
            return {"status": "error", "message": f"‚ùå Syntax error after applying update_code to {file_path}"}

        print(f"[BEN] update_code applied to {file_path} with type {update_type}")
        return {"status": "success", "message": f"‚úÖ update_code applied to {file_path} with type {update_type}"}

    # üîÅ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º: updates[]. –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ù–ï –æ–¥–∏–Ω —ñ–∑ –≤–∏—â–µ
    updates = command.get("updates")
    if not updates:
        return {"status": "error", "message": "‚ùå Missing 'updates' or unsupported update_type"}

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        return {"status": "error", "message": "‚ùå File not found"}

    # –ó–±–µ—Ä–µ–≥—Ç–∏ .bak –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–∞–º–∏
    backup_path = file_path + ".bak"
    with open(backup_path, "w", encoding="utf-8") as backup:
        backup.write(content)

    for upd in updates:
        pattern = upd.get("pattern")
        replacement = upd.get("replacement")
        u_type = upd.get("update_type")

        if not all([pattern, replacement, u_type]):
            return {"status": "error", "message": "‚ùå Missing fields in update"}

        import re
        if u_type == "replace":
            matches = list(re.finditer(pattern, content, flags=re.DOTALL))
            if not matches:
                return {"status": "error", "message": "‚ùå Pattern not found"}
            for match in reversed(matches):
                span = match.span()
                target = content[span[0]:span[1]]
                updated = smart_deduplicate_insertion(target, replacement)
                content = content[:span[0]] + updated + content[span[1]:]

        elif u_type == "append":
            content = smart_deduplicate_insertion(content, replacement)

        elif u_type == "prepend":
            content = smart_deduplicate_insertion(replacement, content)

        else:
            return {"status": "error", "message": f"‚ùå Unknown update_type: {u_type}"}


    with open(file_path, "w", encoding="utf-8") as f:
        f.write(content)

    return {"status": "success", "message": f"‚úÖ Updated {file_path}"}

def log_diff(filepath):
    try:
        result = subprocess.run(["git", "diff", filepath], capture_output=True, text=True)
        diff = result.stdout.strip()
        if diff:
            timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
            with open(history_file, "a", encoding="utf-8") as f:
                f.write(f"[DIFF {timestamp}] File: {filepath}\n{diff}\n---\n")
    except Exception as e:
        with open(history_file, "a", encoding="utf-8") as f:
            f.write(f"[DIFF ERROR] {filepath}: {str(e)}\n")


def handle_macro(cmd):
    if not isinstance(cmd.get("steps"), list):
        return {"status": "error", "message": "‚ùå Invalid macro steps"}

    steps = cmd["steps"]
    rollback = cmd.get("rollback_on_fail", False)
    results = []
    created_files = []

    if rollback:
        for step in steps:
            if "filename" in step:
                file_path = os.path.join(base_path, step["filename"])
                if os.path.exists(file_path):
                    with open(file_path, "r", encoding="utf-8") as f:
                        original = f.read()
                    with open(file_path + ".bak", "w", encoding="utf-8") as f:
                        f.write(original)

    for step in steps:
        result = handle_command(step)
        results.append(result)

        # –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏ (–¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É rollback)
        if step.get("action") == "create_file" and "filename" in step:
            created_files.append(step["filename"])

        if result.get("status") == "error" and rollback:
            # –í—ñ–¥–∫–∞—Ç –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π
            for s in steps:
                if "filename" in s:
                    file_path = os.path.join(base_path, s["filename"])
                    bak_file = file_path + ".bak"
                    if os.path.exists(bak_file):
                        with open(bak_file, "r", encoding="utf-8") as f:
                            restored = f.read()
                        with open(file_path, "w", encoding="utf-8") as f:
                            f.write(restored)

            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏
            for fname in created_files:
                file_path = os.path.join(base_path, fname)
                if os.path.exists(file_path):
                    os.remove(file_path)

            # üß† –ó–∞–ø–∏—Å rollback'—É –≤ –ø–∞–º º—è—Ç—å
            save_to_memory({
                "action": "rollback",
                "reason": result.get("message"),
                "rollback_steps": steps
            })

            # ‚ôªÔ∏è Git-–∫–æ–º—ñ—Ç
            auto_commit("‚ôªÔ∏è Rollback after failure")

            return {
                "status": "error",
                "message": "‚ùå Macro failed. Rolled back all changes.",
                "results": results
            }

    return {"status": "success", "steps": results}

def handle_analyze_json(cmd, base_path="."):
    filename = cmd.get("filename")
    if not filename:
        return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ 'filename'"}
    
    filepath = os.path.join(base_path, filename)
    if not os.path.exists(filepath):
        return {"status": "error", "message": f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {filepath}"}
    
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            content = f.read()
        data = json.loads(content)  # –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
    except Exception as e:
        return {"status": "error", "message": f"‚ùå JSON –ø–æ–º–∏–ª–∫–∞: {e}"}
    
    from openai import OpenAI
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π JSON —ñ –¥–∞–π –ø–æ—Ä–∞–¥–∏:
- —á–∏ –¥–æ–±—Ä–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ?
- —â–æ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏?
- —á–∏ —î –ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏?

–û—Å—å JSON:
{json.dumps(data, indent=2, ensure_ascii=False)}
"""
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )

    reply = response.choices[0].message.content.strip()

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    out_path = f"gpt_json_analysis_{timestamp}.txt"
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(reply)

    return {"status": "success", "message": f"üìÑ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∞–Ω–∞–ª—ñ–∑ —É {out_path}"}


def handle_command(cmd):
    if not isinstance(cmd, dict):
        return {"status": "error", "message": "‚ùå Invalid command format ‚Äî expected a JSON object"}

    # üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ —Ñ—É–Ω–∫—Ü—ñ–π
    if cmd.get("action") == "append_file" and "def " in cmd.get("content", ""):
        new_func_name = None
        try:
            new_func_ast = ast.parse(cmd["content"])
            for node in ast.walk(new_func_ast):
                if isinstance(node, ast.FunctionDef):
                    new_func_name = node.name  # <-- –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø —Ç—É—Ç!
                    break  # <-- –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø —Ç—É—Ç!
        except SyntaxError:
            return {"status": "error", "message": "‚ùå Syntax error in new function code"}

        if new_func_name:
            existing_file_path = os.path.join(base_path, cmd["filename"])
            if os.path.exists(existing_file_path):
                with open(existing_file_path, "r", encoding="utf-8") as f:
                    existing_ast = ast.parse(f.read())
                    for node in ast.walk(existing_ast):
                        if isinstance(node, ast.FunctionDef) and node.name == new_func_name:
                            return {
                                "status": "skipped",
                                "message": f"‚ö†Ô∏è Function '{new_func_name}' already exists in {cmd['filename']}"
                            }

    required_keys = ["action"]
    for key in required_keys:
        if key not in cmd:
            return {"status": "error", "message": f"‚ùå Missing required field: {key}"}
    try:
        action = cmd.get("action")
        filename = cmd.get("filename")
        foldername = cmd.get("foldername")
        content = cmd.get("content", "")
        pattern = cmd.get("pattern")
        replacement = cmd.get("replacement")
        target_folder = cmd.get("target_folder")
        new_name = cmd.get("new_name")

        full_file_path = os.path.join(base_path, filename) if filename else None
        full_folder_path = os.path.join(base_path, foldername) if foldername else None
        dst_folder_path = os.path.join(base_path, target_folder) if target_folder else None
        dst_file_path = os.path.join(dst_folder_path, filename) if target_folder and filename else None

        if action == "create_file":
            with open(full_file_path, "w", encoding="utf-8") as f:
                f.write(content)
            save_to_memory(cmd)  
            return {"status": "success", "message": f"‚úÖ Created file '{filename}'"}

        elif action == "update_code":
            filepath = cmd.get("file_path") or cmd.get("file")
            if not filepath:
                return {"status": "error", "message": "‚ùå Missing 'file_path'"}

            full_path = os.path.join(base_path, filepath)
            if not os.path.isfile(full_path):
                return {"status": "error", "message": f"‚ùå File not found: {filepath}"}

            updates = cmd.get("updates", [])
            if not updates:
                return {"status": "error", "message": "‚ùå No updates provided"}

            result = apply_updates_to_file(full_path, updates)

            # üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            test_result = handle_command({
                "action": "test_python",
                "filename": filepath
            })
            print(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç—É: {test_result}")

            return {"status": "success", "message": f"‚úÖ Updated {filepath}", "details": result}
      
        elif action == "safe_update_code":
            result = handle_safe_update_code(cmd, base_path)

            # üß† –î–æ–¥–∞–Ω–æ –∑–∞—Ö–∏—Å—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ .get() –ø–æ–º–∏–ª–∫–∏
            if result is None:
                result = {"status": "error", "message": "‚ùå handle_safe_update_code –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"}

            return result

        elif action == "update_code_bulk":
            return handle_update_code_bulk(cmd)

        elif action == "append_file":
            filename = cmd["filename"]
            content = cmd["content"]
            filepath = os.path.join(base_path, filename)
            backup_file(filepath)

            with open(filepath, "a", encoding="utf-8") as f:
                f.write(content)

            save_to_memory(cmd)

            # üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏
            test_result = handle_command({
                "action": "test_python",
                "filename": filename
            })
            print(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç—É: {test_result}")

            return {"status": "success", "message": f"üìå Appended to file '{filename}'"}

        
        elif action == "undo_change":
            ilename = cmd.get("filename")
            result = undo_last_backup(os.path.join(base_path, filename))
            results.append(result)

        elif action == "scan_all_files":
            result = {}
            for fname in os.listdir(base_path):
                fpath = os.path.join(base_path, fname)
                if os.path.isfile(fpath) and fname.endswith((".py", ".json", ".txt", ".csv")):
                    try:
                        with open(fpath, "r", encoding="utf-8") as f:
                            result[fname] = f.read()
                    except Exception as e:
                        result[fname] = f"‚ö†Ô∏è Error reading: {str(e)}"
            return {"status": "success", "files": result}

        elif action == "update_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    data = f.read()
                updated = re.sub(pattern, replacement, data)
                with open(full_file_path, "w", encoding="utf-8") as f:
                    f.write(updated)
                save_to_memory(cmd)
                return {"status": "success", "message": f"üîÅ Updated file '{filename}'"}
            else:
                return {"status": "error", "message": "File not found"}

        elif action == "replace_in_file":
            filename = cmd["filename"]
            pattern = cmd["pattern"]
            replacement = cmd["replacement"]
            filepath = os.path.join(base_path, filename)
            full_file_path = filepath

            backup_file(filepath)

            if filename.endswith('.py'):
                test_result = handle_command({"action": "test_python", "filename": filename})
                if test_result.get("status") == "error":
                    return {"status": "error", "message": f"‚ùå –ü–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é: {test_result.get('message')}"}

                if not is_valid_python_file(full_file_path):
                    return {"status": "error", "message": f"‚ùå Syntax error before change in {filename}"}

            if filename in ["config.py", "api_keys.py", "cache.txt"]:
                return {"status": "error", "message": f"‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª: {filename}"}

            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    text = f.read()

                # üß† –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
                backup_path = full_file_path + ".bak"
                with open(backup_path, "w", encoding="utf-8") as f:
                    f.write(text)

                # üìù Git diff –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º
                try:
                    diff_output = subprocess.check_output(["git", "diff", full_file_path], cwd=base_path, text=True)
                    if diff_output.strip():
                        log_action("üìÑ Git diff –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é:" + diff_output)
                except Exception as e:
                    log_action(f"‚ö†Ô∏è Git diff error: {str(e)}")

                # üîÅ –ó–∞–º—ñ–Ω–∞ —á–µ—Ä–µ–∑ regex
                new_text = re.sub(pattern, replacement, text)
                with open(full_file_path, "w", encoding="utf-8") as f:
                    f.write(new_text)

                if not is_valid_python_file(full_file_path):
                    return {"status": "error", "message": f"‚ùå Syntax error after change in {filename}. Revert or fix manually."}

                # üìú –õ–æ–≥ –∑–º—ñ–Ω
                log_diff(full_file_path)
                save_to_memory(cmd)

                # üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
                test_result = handle_command({
                    "action": "test_python",
                    "filename": filename
                })
                print(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç—É: {test_result}")

                return {"status": "success", "message": f"‚úèÔ∏è Replaced text in '{filename}'"}

            
        elif action == "insert_between_markers":
            filepath = os.path.join(base_path, cmd["filename"])
            backup_file(filepath)
            file_path = os.path.join(base_path, cmd.get("file_path"))
            marker_start = cmd.get("marker_start")
            marker_end = cmd.get("marker_end")
            insert_code = cmd.get("code")

            if not all([file_path, marker_start, marker_end, insert_code]):
                return {"status": "error", "message": "‚ùå Missing required fields for marker-based insertion"}

            if not os.path.exists(file_path):
                return {"status": "error", "message": f"‚ùå File '{file_path}' not found"}

            with open(file_path, "r", encoding="utf-8") as f:
                lines = f.readlines()

            start_idx, end_idx = -1, -1
            for i, line in enumerate(lines):
                if marker_start in line:
                    start_idx = i + 1
                if marker_end in line:
                    end_idx = i

            if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:
                return {"status": "error", "message": "‚ùå Markers not found or invalid order"}

            lines = lines[:start_idx] + [insert_code + "\n"] + lines[end_idx:]

            with open(file_path, "w", encoding="utf-8") as f:
                f.writelines(lines)

            save_to_memory(cmd)
            return {"status": "success", "message": f"‚úÖ Inserted code between markers in {cmd.get('file_path')}"}
           
        elif action == "read_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    return {"status": "success", "content": f.read()}
            save_to_memory(cmd)
            return {"status": "error", "message": "File not found"}

        elif action == "search_text_in_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                matches = [line for line in lines if pattern in line]
                return {"status": "success", "matches": matches}

        elif action == "create_folder":
            os.makedirs(full_folder_path, exist_ok=True)
            return {"status": "success", "message": f"üìÅ Folder '{foldername}' created"}

        elif action == "delete_file":
            filepath = os.path.join(base_path, cmd["filename"])
            backup_file(filepath)
            if os.path.exists(full_file_path):
                os.remove(full_file_path)
                save_to_memory(cmd)
                return {"status": "success", "message": f"üóëÔ∏è File '{filename}' deleted"}
            else:
                return {"status": "error", "message": f"File '{filename}' not found"}

        elif action == "rename_file":
            if not os.path.exists(full_file_path):
                return {"status": "error", "message": f"‚ùå File '{filename}' not found"}
            new_path = os.path.join(base_path, new_name)
            os.rename(full_file_path, new_path)
            save_to_memory(cmd)
            return {"status": "success", "message": f"üìÑ File renamed to '{new_name}'"}

        elif action == "copy_file":
            shutil.copy(full_file_path, dst_file_path)
            save_to_memory(cmd)
            return {"status": "success", "message": f"üìÇ Copied '{filename}' to '{target_folder}'"}

        elif action == "read_folder":
            if os.path.exists(full_folder_path):
                files = os.listdir(full_folder_path)
                return {"status": "success", "files": files}
            return {"status": "error", "message": "Folder not found"}

        elif action == "run_python":
            if not os.path.exists(full_file_path):
                return {"status": "error", "message": f"‚ùå File '{filename}' not found"}
            result = subprocess.run(["python", full_file_path], capture_output=True, text=True)
            return {"status": "success", "output": result.stdout, "errors": result.stderr}
        
        elif action == "self_improve":
            filename = cmd.get("filename", "gpt_agent_cache.py")
            result = self_improve_agent(filename)
            return result
        
        elif action == "smart_plan":
             result = generate_improvement_plan()
             return result
        
        elif action == "run_plan":
             return execute_plan()

        elif action == "analyze_all_code":
            result = analyze_all_code()
            return result
        
        elif action == "analyze_json":
             return handle_analyze_json(cmd, base_path)

        elif action == "test_gpt_api":
            try:
                from openai import OpenAI
                from config import API_KEY
                client = OpenAI(api_key=API_KEY)
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "user", "content": "Ping"}
                    ]
                )
                return {"status": "success", "message": "üü¢ GPT API connected!", "response": response.choices[0].message.content}
            except Exception as e:
                return {"status": "error", "message": f"‚ùå GPT API error: {str(e)}"}


        elif action == "test_python":
            if os.path.exists(full_file_path):
                try:
                    with open(full_file_path, "r", encoding="utf-8") as f:
                        source = f.read()
                    compile(source, filename, 'exec')
                    return {"status": "success", "message": f"‚úÖ {filename} –ø—Ä–æ–π—à–æ–≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É"}
                except SyntaxError as e:
                    return {"status": "error", "message": f"‚ùå Syntax error in {filename}: {e}"}
            return {"status": "error", "message": "File not found"}

        elif action == "undo_change":
            target_id = cmd.get("target_id")

            if target_id:
                # üîç –®—É–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –ø–æ ID –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
                prev_cmd = get_command_by_id(target_id)
                if not prev_cmd:
                    return {"status": "error", "message": f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑ ID: {target_id}"}

                file_path = prev_cmd.get("file")
                if not file_path or not os.path.exists(file_path + ".bak"):
                    return {"status": "error", "message": f"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è ID: {target_id}"}

                with open(file_path + ".bak", "r", encoding="utf-8") as f:
                    prev_code = f.read()

                return ask_confirmation_for_rollback(prev_code, target_id)

            else:
                # üïó –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ .bak
                if os.path.exists(full_file_path + ".bak"):
                    shutil.copy(full_file_path + ".bak", full_file_path)
                    save_to_memory(cmd)
                    return {"status": "success", "message": f"‚Ü©Ô∏è Undo: –≤—ñ–¥–∫–∞—Ç –¥–æ .bak –¥–ª—è '{filename}'"}
                else:
                    return {"status": "error", "message": f"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è '{filename}'"}

        elif action == "macro":
            return handle_macro(cmd)
        
        elif cmd.get("action") == "check_file_access":
            filename = cmd.get("filename")
            return handle_check_file_access(filename)

        elif action == "run_macro":
            macro_name = cmd.get("macro_name")
            arguments = cmd.get("arguments", {})
            if not macro_name:
                return {"status": "error", "message": "‚ùå No macro_name provided"}
            return execute_macro(macro_name, arguments)

        elif action == "check_file_access":
            filename = cmd.get("filename")
            if filename:
                filepath = os.path.join(base_path, filename)
                if os.path.exists(filepath):
                    result = f"‚úÖ File exists: {filename}"
                else:
                    result = f"‚ùå File not found: {filename}"
            else:
                result = "‚ùå No filename provided"
            print(result)
            return {"status": "success", "message": result}

        elif action == "execute_macro":
            macro_name = cmd.get("macro_name")
            arguments = cmd.get("arguments", {})
            return execute_macro(macro_name, arguments)
        
        elif cmd["action"] == "run_shell":
            return handle_run_shell(cmd)

        elif action == "list_files":
            return {"status": "success", "files": os.listdir(base_path)}

        elif action == "check_status":
            return {"status": "success", "message": "üü¢ Agent is running"}

        elif action == "show_memory":
            memory_file = os.path.join(base_path, ".ben_memory.json")
            if os.path.exists(memory_file):
                with open(memory_file, "r", encoding="utf-8") as f:
                    memory = json.load(f)
                return {"status": "success", "memory": memory[-20:]}
            else:
                return {"status": "error", "message": "‚ùå Memory file not found"}
        
        elif action == "list_history":
            return handle_list_history()

        elif action == "view_sql_history":
            return get_history()
        
        elif action == "safe_update":
            result = handle_safe_update_code(cmd, base_path)
            results.append(result)

        else:
            return {"status": "error", "message": f"‚ùå Unknown action: {action}"}

        # üìù –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ—é –≤ SQLite
        try:
            import sqlite3
            conn = sqlite3.connect(os.path.join(base_path, "history.sqlite"))
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO command_history (action, file_path, update_type)
                VALUES (?, ?, ?)
            """, (cmd.get("action"), cmd.get("file_path") or cmd.get("filename"), cmd.get("update_type")))
            conn.commit()
            conn.close()
        except Exception as e:
            log_action(f"‚ö†Ô∏è SQLite save error: {e}")

    except Exception as e:
        traceback.print_exc()

        # üõ†Ô∏è –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–¥–µ–±–∞–≥—É –ø—Ä–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ
        if "Syntax error" in str(e):
            filepath = os.path.join(base_path, cmd.get("filename") or cmd.get("file_path", ""))
            auto_result = attempt_autodebug(filepath, str(e))
            return auto_result

        return {"status": "error", "message": f"‚ùå Exception: {str(e)}"}
  
    
def run_self_tests():
    print("\nüß™ Running self-tests...")
    tests_passed = 0
    tests_failed = 0

    # 1. Test basic command structure
    result = handle_command({"action": "check_status"})
    if result.get("status") == "success":
        print("‚úÖ check_status passed")
        tests_passed += 1
    else:
        print("‚ùå check_status failed")
        tests_failed += 1

    # 2. Test missing required key
    result = handle_command({})
    if result.get("status") == "error" and "Missing required field" in result.get("message", ""):
        print("‚úÖ missing field validation passed")
        tests_passed += 1
    else:
        print("‚ùå missing field validation failed")
        tests_failed += 1

    # 3. Test invalid command type
    result = handle_command("not_a_dict")
    if result.get("status") == "error" and "Invalid command format" in result.get("message", ""):
        print("‚úÖ invalid format validation passed")
        tests_passed += 1
    else:
        print("‚ùå invalid format validation failed")
        tests_failed += 1

    # ‚úÖ –ü–ï–†–ï–ù–ï–°–ï–ù–û –°–Æ–î–ò:
    handle_command({"action": "delete_file", "filename": "test_self.txt"})

    result = handle_command({"action": "create_file", "filename": "test_self.txt", "content": "Hello test!"})
    if result.get("status") == "success":
        print("‚úÖ create_file passed")
        tests_passed += 1
    else:
        print("‚ùå create_file failed")
        tests_failed += 1

    result = handle_command({"action": "read_file", "filename": "test_self.txt"})
    if result.get("status") == "success" and "Hello test!" in result.get("content", ""):
        print("‚úÖ read_file passed")
        tests_passed += 1
    else:
        print("‚ùå read_file failed")
        tests_failed += 1

    result = handle_command({"action": "delete_file", "filename": "test_self.txt"})
    if result.get("status") == "success":
        print("‚úÖ delete_file passed")
        tests_passed += 1
    else:
        print("‚ùå delete_file failed")
        tests_failed += 1

    # ‚úÖ –¢—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä ‚Äî —Ñ—ñ–Ω–∞–ª
    print(f"\nüß™ Test results: {tests_passed} passed, {tests_failed} failed")
    return tests_failed == 0
# üß∞ CLI-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥
import argparse

import argparse
import sys
import json

def run_cli():
    parser = argparse.ArgumentParser(description="Ben CLI")
    parser.add_argument("--action", help="–î—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, create_file)")
    parser.add_argument("--filename", help="–Ü–º'—è —Ñ–∞–π–ª—É")
    parser.add_argument("--content", help="–í–º—ñ—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å—É")
    parser.add_argument("--pattern", help="–ü–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É")
    parser.add_argument("--replacement", help="–¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–º—ñ–Ω–∏")
    parser.add_argument("--foldername", help="–Ü–º'—è –ø–∞–ø–∫–∏")
    parser.add_argument("--target_folder", help="–¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞")
    parser.add_argument("--new_name", help="–ù–æ–≤–µ —ñ–º'—è —Ñ–∞–π–ª—É")
    parser.add_argument("--steps", help="JSON-—Ä—è–¥–æ–∫ –¥–ª—è macro-–∫–æ–º–∞–Ω–¥–∏")

    args = parser.parse_args()

    print("–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞:", sys.argv)  # –í–∏–≤–æ–¥–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    cmd = {k: v for k, v in vars(args).items() if v is not None}

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –ø–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è macro-–∫–æ–º–∞–Ω–¥–∏
    if cmd.get("action") == "macro" and "steps" in cmd:
        try:
            cmd["steps"] = json.loads(cmd["steps"])  # –ü–∞—Ä—Å–∏–º–æ JSON
            print("–ü–∞—Ä—Å–∏–Ω–≥ JSON —É—Å–ø—ñ—à–Ω–∏–π:", cmd["steps"])  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É steps: {str(e)}")
            return

    if "action" not in cmd:
        print("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ --action")
        return

    result = handle_command(cmd)
    print("üîß –†–µ–∑—É–ª—å—Ç–∞—Ç:", result)


def git_auto_push(commit_msg="üöÄ Auto-commit by Ben"):
    try:
        subprocess.run(["git", "add", "."], cwd=base_path, check=True)

        # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–º—ñ–Ω–∏
        diff_result = subprocess.run(["git", "diff", "--cached", "--quiet"], cwd=base_path)
        if diff_result.returncode == 0:
            log_action("‚ÑπÔ∏è –ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∫–æ–º—ñ—Ç—É ‚Äî git push –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return {"status": "skipped", "message": "‚ÑπÔ∏è No changes to commit"}

        subprocess.run(["git", "commit", "-m", commit_msg], cwd=base_path, check=True)
        subprocess.run(["git", "push"], cwd=base_path, check=True)
        log_action(f"üì§ Git push: {commit_msg}")
        save_to_memory({"action": "git_push", "message": commit_msg})
        return {"status": "success", "message": "üì§ Git push —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"}

    except subprocess.CalledProcessError as e:
        log_action(f"‚ùå Git push –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        return {"status": "error", "message": f"‚ùå Git push –ø–æ–º–∏–ª–∫–∞: {str(e)}"}
def handle_update_code_bulk(command):
    updates = command.get('updates', [])
    results = []
    for update in updates:
        result = handle_update_code(update)
        results.append(result)
    return {"status": "success", "results": results}

def scan_all_files(folder, extensions=None):
    matched_files = []
    for root, _, files in os.walk(folder):
        for file in files:
            if not extensions or any(file.endswith(ext) for ext in extensions):
                matched_files.append(os.path.join(root, file))
    return matched_files
   
if __name__ == "__main__":
    import argparse
    import sys

    parser = argparse.ArgumentParser(description="GPT Agent CLI")
    parser.add_argument("--cli", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ CLI-—Ä–µ–∂–∏–º")
    parser.add_argument("--test", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ self-—Ç–µ—Å—Ç–∏")
    parser.add_argument("--action")
    parser.add_argument("--filename")
    parser.add_argument("--content")
    parser.add_argument("--pattern")
    parser.add_argument("--replacement")
    parser.add_argument("--foldername")
    parser.add_argument("--target_folder")
    parser.add_argument("--new_name")

    args = parser.parse_args()

    if args.test:
        run_self_tests()
        sys.exit()

    if args.cli:
        cmd = {k: v for k, v in vars(args).items() if v is not None and k not in ["cli", "test"]}
        if "action" not in cmd:
            print("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ --action")
            sys.exit(1)
        result = handle_command(cmd)
        print("üîß –†–µ–∑—É–ª—å—Ç–∞—Ç:", result)
        sys.exit()

    # –Ø–∫—â–æ –Ω–µ CLI —ñ –Ω–µ test ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —è–∫ –∑–≤–∏—á–Ω–æ
    print("üü¢ –ë–µ–Ω –∑–∞–ø—É—â–µ–Ω–∏–π —ñ —Å–ª—É—Ö–∞—î –∫–æ–º–∞–Ω–¥–∏ –∑ cache.txt...")

    try:
        from macros import run_macro
        auto = run_macro({"name": "scan_all_on_start"})
        print(f"[AUTO] {auto.get('message')}")
    except Exception as e:
        print(f"[AUTO] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É: {e}")

    while True:
        commands = read_requests()
        print("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥–∏:", commands)

        responses = []
        for cmd in commands:
            result = handle_command(cmd)
            print("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ:", result)
            responses.append(result)
            if isinstance(result, dict):
                log_action(result.get("message", str(result)))
            else:
                log_action(str(result))

            if isinstance(result, dict) and result.get("status") == "success":
                push_result = git_auto_push(f"‚úÖ Auto-commit: {cmd.get('action')} {cmd.get('filename', '')}")
                print(push_result.get('message', ''))


        if responses:
            for r in responses:
                status = r.get("status")
                if status == "success":
                    print(Fore.GREEN + "‚úÖ", r.get("message", "") + Style.RESET_ALL)
                elif status == "error":
                    print(Fore.RED + "‚ùå", r.get("message", "") + Style.RESET_ALL)
                elif status == "cancelled":
                    print(Fore.YELLOW + "‚ö†Ô∏è", r.get("message", "") + Style.RESET_ALL)
                elif status == "macro":
                    print(Fore.CYAN + "üì¶ –í–∏–∫–æ–Ω–∞–Ω–æ macro-–∫–æ–º–∞–Ω–¥—É:" + Style.RESET_ALL)
                    for step_result in r.get("results", []):
                        print("  -", step_result.get("message", ""))

            print("üíæ –ó–∞–ø–∏—Å—É—é gpt_response.json —ñ –æ—á–∏—â–∞—é cache.txt")
            write_response(responses)
            clear_cache()
        time.sleep(1)

def repeat_last_action():
    memory_file = os.path.join(base_path, ".ben_memory.json")
    if not os.path.exists(memory_file):
        return {"status": "error", "message": "‚ùå Memory file not found"}
    try:
        with open(memory_file, "r", encoding="utf-8") as f:
            memory = json.load(f)
        if not memory:
            return {"status": "error", "message": "‚ùå No memory to repeat"}
        last_cmd = memory[-1]
        save_to_memory(last_cmd)
        return handle_command(last_cmd)
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Repeat error: {str(e)}"}


import autopep8
import os

# –ö—Ä–æ–∫ 2: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤
def fix_indentation(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            code = file.read()

        fixed_code = autopep8.fix_code(code)

        with open(filepath, 'w', encoding='utf-8') as file:
            file.write(fixed_code)

        return {'status': 'success', 'message': f'üßπ –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –≤ —Ñ–∞–π–ª—ñ {filepath}'}
    except Exception as e:
        return {'status': 'error', 'message': f'‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤: {str(e)}'}
    
def attempt_autodebug(filepath, error_message):
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            faulty_code = f.read()

        prompt = f"""
üîç –£ –∫–æ–¥—ñ –Ω–∏–∂—á–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–±–æ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó:

‚ùå –ü–æ–º–∏–ª–∫–∞:
{error_message}

üìÑ –ö–æ–¥:
{faulty_code}

üéØ –í–∏–ø—Ä–∞–≤, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ–¥ —Ç–∞–∫, —â–æ–± –ø–æ–º–∏–ª–∫–∞ –∑–Ω–∏–∫–ª–∞. –ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–¥, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å.
"""

        from openai import OpenAI
        client = OpenAI(api_key=API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        fixed_code = response.choices[0].message.content.strip()

        backup_file(filepath)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(fixed_code)

        write_debug_log("üîÅ –ê–≤—Ç–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ GPT")
        return {"status": "success", "message": "‚úÖ –ê–≤—Ç–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ"}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ê–≤—Ç–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è: {e}"}

import sqlite3

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def create_connection():
    conn = sqlite3.connect('history.db')
    return conn

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
def save_to_history(action, filename, content, result):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO history (action, filename, content, result)
    VALUES (?, ?, ?, ?)
    ''', (action, filename, content, result))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
def get_history():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM history ORDER BY timestamp DESC LIMIT 10')
    rows = cursor.fetchall()
    conn.close()
    return rows

def auto_commit(commit_msg="‚ôªÔ∏è Rollback after failure"):
    try:
        subprocess.run(["git", "add", "."], cwd=base_path, check=True)
        subprocess.run(["git", "commit", "-m", commit_msg], cwd=base_path, check=True)
        subprocess.run(["git", "push"], cwd=base_path, check=True)
        log_action(f"üì§ Git auto-commit: {commit_msg}")
        save_to_memory({"action": "auto_commit", "message": commit_msg})
        return {"status": "success", "message": "üì§ Git auto-commit –∑–∞–≤–µ—Ä—à–µ–Ω–æ"}
    except subprocess.CalledProcessError as e:
        log_action(f"‚ùå Auto-commit –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        return {"status": "error", "message": f"‚ùå Auto-commit –ø–æ–º–∏–ª–∫–∞: {str(e)}"}


# [BEN] Validation logic inserted here
def write_debug_log(message):
    with open(os.path.join(base_path, 'debug.log'), 'a', encoding='utf-8') as f:
        f.write(f'[{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}] {message}\n')