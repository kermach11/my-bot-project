
import os
import sys
sys.path.append(os.path.abspath("."))
import json
import time
import re
import ast
import shutil
import subprocess
import openai
import traceback
import sqlite3
from datetime import datetime, timezone
autopilot_mode = True
base_path = os.path.abspath(".")


# –Ü–Ω—à—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ, —Ñ—É–Ω–∫—Ü—ñ—ó...

from colorama import init as colorama_init, Fore, Style
colorama_init()
from dotenv import load_dotenv
from init_history_db import create_history_table
from handlers.file_creation import handle_create_file, handle_create_and_finalize_script
from handlers.memory_manager import is_forbidden_action, remember_phrase, forget_phrase
from handlers.auto_guess import auto_guess_missing_parameters
from utils.json_tools import clean_json_text
from utils.log_utils import log_action

# üß† –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é)
env_path = "C:/Users/DC/env_files/env"
if os.path.exists(env_path):
    load_dotenv(env_path)
else:
    print(Fore.YELLOW + f"‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {env_path}" + Style.RESET_ALL)

# üß± –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ–º–∞–Ω–¥
create_history_table()

# üß† –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv("C:/Users/DC/env_files/env")

# üß© –î–æ–¥–∞–≤–∞–Ω–Ω—è base_path –¥–æ sys.path –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
if os.getcwd() not in sys.path:
    sys.path.append(os.getcwd())

# üß† Ben cognitive layer ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–º º—è—Ç—ñ
BEN_MEMORY_PATH = 'ben_memory.json'
ben_ego = {}
if os.path.exists(BEN_MEMORY_PATH):
    with open(BEN_MEMORY_PATH, 'r', encoding='utf-8') as f:
        ben_ego = json.load(f)
else:
    ben_ego = {"error": "‚ùå –ü–∞–º º—è—Ç—å Ben –≤—ñ–¥—Å—É—Ç–Ω—è"}

def apply_ben_cognition_cycle(action_data):
    print("\nüß† [Ben –¥—É–º–∞—î] –•—Ç–æ —è:", ben_ego.get("identity", {}).get("name", "–Ω–µ–≤—ñ–¥–æ–º–æ"))
    print("üéØ –ú–µ—Ç–∞:", ben_ego.get("mission", "–Ω–µ–º–∞—î –º—ñ—Å—ñ—ó"))
    print("üìò –°—Ç—Ä–∞—Ç–µ–≥—ñ—è:", ben_ego.get("vision", {}).get("strategy", []))
    print("üîç –ê–Ω–∞–ª—ñ–∑ –¥—ñ—ó:", action_data)
    return action_data

def unwrap_parameters_if_present(command):
    if isinstance(command.get("parameters"), dict):
        command.update(command["parameters"])
        del command["parameters"]
    return command

def handle_command(cmd):
    cmd = apply_ben_cognition_cycle(cmd)  # üß† —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å Ben
    cmd = unwrap_parameters_if_present(cmd)
    create_history_table()

    if cmd.get("action") in ["yes", "no"] and cmd.get("target_id"):
        target_id = cmd["target_id"]
        if cmd["action"] == "yes":
            prev_cmd = get_command_by_id(target_id)
            if not prev_cmd:
                return {"status": "error", "message": f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ñ–¥–∫–∞—Ç—É: {target_id}"}
            file_path = prev_cmd.get("file")
            if not file_path or not os.path.exists(file_path + ".bak"):
                return {"status": "error", "message": f"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è '{target_id}'"}
            shutil.copy(file_path + ".bak", file_path)
            return {"status": "success", "message": f"‚úÖ –í—ñ–¥–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {target_id}"}
        else:
            return {"status": "cancelled", "message": f"‚õî –í—ñ–¥–∫–∞—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–ª—è {target_id}"}

    if cmd.get("filename") == "env" or cmd.get("file_path", "").endswith("env"):
        if cmd["action"] in ["update_file", "append_file", "replace_in_file", "update_code", "delete_file"]:
            return {"status": "error", "message": "‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∞–±–æ –∫–æ–º—ñ—Ç–∏—Ç–∏ —Ñ–∞–π–ª 'env'"}

def apply_updates_to_file(file_path, updates):
    import re

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    for update in updates:
        pattern_str = update.get('pattern')
        replacement = update.get('replacement', '')
        multiple = update.get('multiple', False)

        if not pattern_str or not isinstance(pattern_str, str):
            return {"status": "error", "message": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π pattern"}

        try:
            pattern = re.compile(pattern_str, re.DOTALL | re.MULTILINE)
        except re.error as e:
            return {"status": "error", "message": f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π regex: {e}"}

        count = 0 if multiple else 1
        content = pattern.sub(replacement, content, count=count)

    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

    return {"status": "success", "message": f"‚úÖ Applied updates to {file_path}"}


# ‚öôÔ∏è –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config import base_path, request_file, response_file, history_file, API_KEY
import sqlite3


def create_history_table():
    conn = sqlite3.connect(os.path.join(base_path, "history.sqlite"))
    cursor = conn.cursor()
    cursor.execute("INSERT INTO command_history (action, file_path, update_type, context_guide) VALUES (?, ?, ?, ?)", (
    cmd.get("action"),
    cmd.get("file_path") or cmd.get("filename"),
    cmd.get("update_type"),
    cmd.get("context_guide", "")
))
    ''')
    conn.commit()
    conn.close()

# üß† GPT-—ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è
from gpt_interpreter import interpret_user_prompt
interpret_user_prompt("—Å—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–∞—Ä–æ–ª—å –º–∞—î —â–æ–Ω–∞–π–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤")

def backup_file(filepath):
    if not filepath or not os.path.isfile(filepath):
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ backup ‚Äî –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —à–ª—è—Ö: {filepath}")
        return

    # –§–æ—Ä–º—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –∑ .bak
    bak_path = filepath + ".bak"
    if not os.path.exists(bak_path):
        try:
            shutil.copy2(filepath, bak_path)
            print(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {bak_path}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: {e}")

def substitute_arguments(command_str, arguments):
    if not arguments:
        return command_str
    for key, value in arguments.items():
        command_str = command_str.replace(f"{{{{{key}}}}}", str(value))
    return command_str

def execute_macro(macro_name, arguments=None):
    macro_file = os.path.join(base_path, "macro_commands.json")
    if not os.path.isfile(macro_file):
        return {"status": "error", "message": "‚ùå macro_commands.json not found"}

    with open(macro_file, "r", encoding="utf-8") as f:
        macros = json.load(f)

    macro_steps = None
    for macro in macros:
        if macro.get("macro_name") == macro_name:
            macro_steps = macro.get("steps")
            break

    if not macro_steps:
        return {"status": "error", "message": f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∞: {macro_name}"}

    for step in macro_steps:
        if isinstance(step, dict):
            if "action" in step:
                action = step["action"]
                params = {k: substitute_arguments(v, arguments) if isinstance(v, str) else v for k, v in step.items() if k != "action"}
            else:
                action, raw_params = next(iter(step.items()))
                params = {k: substitute_arguments(v, arguments) if isinstance(v, str) else v for k, v in raw_params.items()}
        else:
            print("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫—Ä–æ–∫—É –º–∞–∫—Ä–æ—Å—É, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
            continue

        if action == "run_shell":
            try:
                result = subprocess.run(params["command"], shell=True, capture_output=True, text=True)
                print(result.stdout.strip())
            except Exception as e:
                print(f"‚ùå Shell –ø–æ–º–∏–ª–∫–∞: {e}")
        else:
            response = handle_command({"action": action, **params})
            print(response.get("message", f"‚úÖ {action} –≤–∏–∫–æ–Ω–∞–Ω–æ"))

    return {"status": "success", "message": f"‚úÖ –ú–∞–∫—Ä–æ—Å '{macro_name}' –≤–∏–∫–æ–Ω–∞–Ω–æ"}

def run_macro():
    try:
        with open("macro_command.json", "r", encoding="utf-8") as f:
            macro = json.load(f)
        steps = macro.get("steps", [])
        for step in steps:
            print(f"üì§ –ö—Ä–æ–∫: {step.get('action', '...')} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            result = handle_command(step)
            print("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ:", result)
        return {"status": "success", "message": "‚úÖ –ú–∞–∫—Ä–æ—Å –≤–∏–∫–æ–Ω–∞–Ω–æ"}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ú–∞–∫—Ä–æ—Å –ø–æ–º–∏–ª–∫–∞: {e}"}

def undo_last_backup(filepath):
    backups = [f for f in os.listdir(base_path) if f.startswith(os.path.basename(filepath)) and ".backup_" in f]
    backups.sort(reverse=True)
    if backups:
        last_backup = os.path.join(base_path, backups[0])
        shutil.copy2(last_backup, filepath)
        return {"status": "success", "message": f"‚úÖ Restored from backup: {last_backup}"}
    return {"status": "error", "message": "‚ùå No backup found"}

def write_debug_log(message):
    debug_log_path = os.path.join(base_path, "debug.log")
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
    with open(debug_log_path, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")

def generate_macro_steps_from_prompt(prompt_text):
    from openai import OpenAI
    client = OpenAI(api_key=API_KEY)

    system_prompt = """
–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–¥—É–≤–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
–ù–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–∏ JSON-–º–∞—Å–∏–≤ macro-–∫—Ä–æ–∫—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ:

[
  {"action": "create_file", "filename": "example.py", "content": "..."},
  {"action": "update_code", "file_path": "example.py", "update_type": "logging"},
  {"action": "run_python", "filename": "example.py"}
]

–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –º–∞—Å–∏–≤ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å.
"""

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt_text}
        ]
    )

    try:
        steps = json.loads(response.choices[0].message.content.strip())
        return {"status": "success", "steps": steps}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫—Ä–æ–∫–∏: {e}"}

def self_improve_agent(filename="gpt_agent_cache.py"):
    try:
        filepath = os.path.join(base_path, filename)
        with open(filepath, "r", encoding="utf-8") as f:
            code = f.read()

        prompt = f"""
üîç –¢–∏ GPT-–∞–≥–µ–Ω—Ç, —è–∫–∏–π –∞–Ω–∞–ª—ñ–∑—É—î —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π –∫–æ–¥.  
–§–∞–π–ª: `{filename}`  
–û—Å—å –π–æ–≥–æ –≤–º—ñ—Å—Ç:

{code}

üß† –í–∏–∑–Ω–∞—á, —è–∫—ñ –º—ñ–∫—Ä–æ–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–Ω–µ—Å—Ç–∏: –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó, —Å–ø—Ä–æ—â–µ–Ω–Ω—è, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –∞–±–æ —á–∏—Å—Ç–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É.

‚öôÔ∏è –ó–≥–µ–Ω–µ—Ä—É–π Python-JSON –æ–± º—î–∫—Ç —ñ–∑ –¥—ñ—î—é `safe_update_code`, —É —Ñ–æ—Ä–º–∞—Ç—ñ:

{{
  ""action": "safe_update_code",
  "file_path": "{filename}",
  "updates": [
    {{
      "pattern": "REGEX-–ü–ê–¢–ï–†–ù",
      "replacement": "–ù–û–í–ò–ô –ö–û–î",
      "update_type": "replace"
    }}
  ]
}}

–ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ –æ–±'—î–∫—Ç JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å.
"""

        from openai import OpenAI
        client = OpenAI(api_key=API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        result = json.loads(response.choices[0].message.content.strip())

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
        with open("gpt_response.json", "w", encoding="utf-8") as f:
            json.dump(result, f, indent=2, ensure_ascii=False)

        # ‚õëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ safe update
        update_result = handle_safe_update_code(result, base_path)
        return update_result

    except Exception as e:
        return {"status": "error", "message": f"‚ùå Self-improvement failed: {e}"}
def generate_improvement_plan():
    try:
        # 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ .py —Ñ–∞–π–ª–∏
        files = scan_all_files(base_path, [".py"])
        file_snippets = []

        for path in files:
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read()
                    file_snippets.append({"file": path, "code": content[:2000]})  # –¥–æ 2k —Å–∏–º–≤–æ–ª—ñ–≤
            except:
                continue

        # 2. GPT prompt
        prompt = f"""
üìÅ –£ –º–µ–Ω–µ —î Python-–ø—Ä–æ—î–∫—Ç —ñ–∑ —Ç–∞–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:
{json.dumps(file_snippets, indent=2, ensure_ascii=False)}

üß† –ó–≥–µ–Ω–µ—Ä—É–π –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É ‚Äî —Å–ø–∏—Å–æ–∫ macro-–∫—Ä–æ–∫—ñ–≤ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É, –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó, –∑–∞—Ö–∏—Å—Ç—É –∞–±–æ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É.

–ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ JSON —É —Ñ–æ—Ä–º–∞—Ç—ñ:

{{
  "action": "run_macro",
  "steps": [ ... ]
}}
"""

        from openai import OpenAI
        client = OpenAI(api_key=API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        plan = json.loads(response.choices[0].message.content.strip())

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ gpt_plan.json
        with open("gpt_plan.json", "w", encoding="utf-8") as f:
            json.dump(plan, f, indent=2, ensure_ascii=False)

        return {"status": "success", "message": "üìã –ü–ª–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ gpt_plan.json", "steps": plan.get("steps", [])}

    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ü–æ–º–∏–ª–∫–∞ Smart-–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}"}

def analyze_all_code():
    try:
        files = scan_all_files(base_path, [".py"])
        file_snippets = []

        for path in files:
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read()
                    file_snippets.append({"file": path, "code": content[:2000]})
            except:
                continue

        prompt = f"""
üìÅ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —è–∫—ñ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ Python-–∫–æ–¥—É.  
–ü–µ—Ä–µ–≤—ñ—Ä: –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–π, –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ª–æ–≥—É–≤–∞–Ω–Ω—è, –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –º—ñ—Å—Ü—è, –ø–æ–≥–∞–Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è.

–§–∞–π–ª–∏:
{json.dumps(file_snippets, indent=2, ensure_ascii=False)}

üß† –ü–æ–≤–µ—Ä–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ:
{{
  "status": "ok",
  "recommendations": [ ... ]
}}
"""

        from openai import OpenAI
        client = OpenAI(api_key=API_KEY)

        # –°–ø—Ä–æ–±–∞ –º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∏, —è–∫—â–æ JSON –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π
        for attempt in range(2):
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            raw = response.choices[0].message.content.strip()

            # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ RAW-–≤–∏–≤—ñ–¥ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            with open("gpt_analysis_raw.txt", "w", encoding="utf-8") as f:
                f.write(raw)

            try:
                report = json.loads(raw)
                break  # ‚úÖ JSON –≤–∞–ª—ñ–¥–Ω–∏–π, –≤–∏—Ö–æ–¥–∏–º–æ
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt + 1} ‚Äî –ø–æ–º–∏–ª–∫–∞ JSON: {e}")
                if attempt == 1:
                    return {"status": "error", "message": f"‚ùå GPT –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤–∞–ª—ñ–¥–Ω–∏–π JSON: {e}"}

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –∑–≤—ñ—Ç
        with open("gpt_analysis.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        return {"status": "success", "message": "üìä –ê–Ω–∞–ª—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ gpt_analysis.json"}

    except Exception as e:
        return {"status": "error", "message": f"‚ùå Analyze failed: {e}"}

def execute_plan():
    plan_file = os.path.join(base_path, "gpt_plan.json")
    if not os.path.exists(plan_file):
        return {"status": "error", "message": "‚ùå gpt_plan.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

    try:
        with open(plan_file, "r", encoding="utf-8") as f:
            plan = json.load(f)

        if not isinstance(plan, list):
            return {"status": "error", "message": "‚ùå gpt_plan.json –º–∞—î –±—É—Ç–∏ —Å–ø–∏—Å–∫–æ–º –¥—ñ–π"}

        results = []
        for i, step in enumerate(plan):
            print(f"\n‚öôÔ∏è –í–∏–∫–æ–Ω—É—é –∫—Ä–æ–∫ {i + 1}/{len(plan)}: {step.get('action')}")
            result = handle_command(step)
            results.append(result)

            if result.get("status") != "success":
                print(f"‚ùå –ó—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ –∫—Ä–æ—Ü—ñ {i + 1} ‚Äî –ø–æ–º–∏–ª–∫–∞: {result.get('message')}")
                return {
                    "status": "error",
                    "message": f"‚ùå –ü–ª–∞–Ω –∑—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ –∫—Ä–æ—Ü—ñ {i + 1}",
                    "results": results
                }

        return {
            "status": "success",
            "message": f"‚úÖ –ü–ª–∞–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é ({len(plan)} –∫—Ä–æ–∫—ñ–≤)",
            "results": results
        }

    except Exception as e:
        return {"status": "error", "message": f"‚ùå execute_plan –ø–æ–º–∏–ª–∫–∞: {e}"}

def handle_run_shell(command):
    shell_cmd = command.get("command")
    if not shell_cmd:
        return {"status": "error", "message": "‚ùå Missing shell command"}

    try:
        print(f"[BEN] üíª Running shell: {shell_cmd}")
        result = subprocess.run(shell_cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            return {"status": "error", "message": f"‚ùå Shell error: {result.stderr.strip()}"}
        return {"status": "success", "message": f"‚úÖ Shell OK: {result.stdout.strip()}"}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Shell exception: {e}"}

def create_history_table():
    conn = sqlite3.connect(os.path.join(base_path, "history.sqlite"))
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS command_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            action TEXT,
            file_path TEXT,
            update_type TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()
write_debug_log('üü¢ Agent started and listening...')

def is_valid_python_file(filepath):
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            source = f.read()
        ast.parse(source)
        return True
    except SyntaxError as e:
        print(f"‚ùå Syntax error in {filepath}: {e}")
        return False

create_history_table()

def get_command_by_id(target_id):
    try:
        with open(".ben_memory.json", "r", encoding="utf-8") as f:
            memory = json.load(f)
        for entry in reversed(memory):  # –û—Å—Ç–∞–Ω–Ω—ñ –ø–µ—Ä—à–∏–º–∏
            if entry.get("history_id") == target_id:
                return entry
    except:
        pass
    return None
def ask_confirmation_for_rollback(prev_code, target_id):
    prompt = (
        f"üß† –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥, —è–∫–∏–π –±—É–¥–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑ ID {target_id}:\n\n"
        f"{prev_code}\n\n"
        "üîÅ –•–æ—á–µ—à –≤—ñ–¥–∫–æ—Ç–∏—Ç–∏ –¥–æ —Ü—å–æ–≥–æ –∫–æ–¥—É? –ù–∞–ø–∏—à–∏ 'yes' –∞–±–æ 'no'"
    )
    with open("gpt_response.json", "w", encoding="utf-8") as f:
        json.dump({"status": "awaiting_confirmation", "message": prompt, "target_id": target_id}, f, indent=2, ensure_ascii=False)
    return {"status": "paused", "message": "‚è∏Ô∏è –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ –≤—ñ–¥–∫–∞—Ç"}

import importlib.util
import shutil

CRITICAL_FILES = [
    "gpt_agent_cache.py",
    "ben_writer.py",
    "cache.txt",
    "gpt_response.json",
    "macro_commands.json"
]

def handle_safe_update_code(cmd, base_path):
    filename = cmd.get("filename")
    updates = cmd.get("updates", [])
    filepath = os.path.join(base_path, filename)

    if not os.path.exists(filepath) or not os.path.isfile(filepath):
        return {"status": "error", "message": f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ü–µ –Ω–µ —Ñ–∞–π–ª: {filename}"}

    # üîß –î–æ–¥–∞—î–º–æ base_path —É sys.path
    import sys
    if base_path not in sys.path:
        sys.path.append(base_path)

    # 1. Create backup
    backup_path = filepath + ".bak"
    shutil.copyfile(filepath, backup_path)

    # 2. Read original
    with open(filepath, "r", encoding="utf-8") as f:
        content = f.read()

    # 3. Apply updates
    try:
        for update in updates:
            pattern = update.get("pattern", "")
            if not pattern.strip():
                return {"status": "error", "message": "‚ùå –ü–æ—Ä–æ–∂–Ω—ñ–π regex pattern ‚Äî –∑–º—ñ–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."}
            try:
                re.compile(pattern)
            except re.error as regex_error:
                return {"status": "error", "message": f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π regex pattern: {regex_error}"}

            replacement = update.get("replacement", "")
            multiple = update.get("multiple", False)

            if not pattern.strip():
                return {"status": "error", "message": "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî pattern –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π"}

            flags = re.MULTILINE | re.DOTALL
            if multiple:
                content = re.sub(pattern, replacement, content, flags=flags)
            else:
                content = re.sub(pattern, replacement, content, count=1, flags=flags)
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Regex error: {str(e)}"}

    # 4. Write to temp
    tmp_path = filepath + ".tmp"
    with open(tmp_path, "w", encoding="utf-8") as f:
        f.write(content)

    # 5. –°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ ast
    if filename.endswith(".py"):
        try:
            with open(tmp_path, "r", encoding="utf-8") as f:
                code = f.read()
                ast.parse(code)  # üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—É –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
        except Exception as e:
            return {"status": "error", "message": f"‚ùå Syntax error: {str(e)}. Rolled back."}

        # 6. (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—É
        try:
            spec = importlib.util.spec_from_file_location("tmp_module", tmp_path)
            if spec and spec.loader:
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
        except Exception as e:
            return {"status": "error", "message": f"‚ùå Import error: {str(e)}. Rolled back."}


    # 7. All good ‚Äî apply
    shutil.move(tmp_path, filepath)
    return {"status": "success", "message": f"‚úÖ Safe update applied to {filename}"}

def handle_adaptive_safe_update_code(cmd, base_path):
    try:
        file_path = cmd.get("file_path")
        updates = cmd.get("updates", [])
        full_path = os.path.join(base_path, file_path)

        if not os.path.exists(full_path):
            return {"status": "error", "message": f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

        with open(full_path, "r", encoding="utf-8") as f:
            code = f.read()

        success_count = 0
        for update in updates:
            pattern = update.get("pattern")
            replacement = update.get("replacement")

            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî —â–æ–± –Ω–µ –∑–ª–∞–º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if re.search(pattern, code, re.MULTILINE):
                code = re.sub(pattern, replacement, code, flags=re.MULTILINE)
                success_count += 1
            else:
                print(f"‚ö†Ô∏è adaptive_safe_update_code: pattern –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî {pattern}")

        with open(full_path, "w", encoding="utf-8") as f:
            f.write(code)

        return {"status": "success", "message": f"‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ {success_count} –æ–Ω–æ–≤–ª–µ–Ω—å —É {file_path}"}

    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ adaptive_safe_update_code: {e}"}
    
def save_to_memory(cmd):
    memory_file = os.path.join(base_path, ".ben_memory.json")
    try:
        if os.path.exists(memory_file):
            with open(memory_file, "r", encoding="utf-8") as f:
                memory = json.load(f)
        else:
            memory = []
        cmd["timestamp"] = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
        memory.append(cmd)
        with open(memory_file, "w", encoding="utf-8") as f:
            json.dump(memory[-100:], f, indent=2, ensure_ascii=False)
    except Exception as e:
        log_action(f"‚ö†Ô∏è Error saving to memory: {str(e)}")

def handle_list_history():
    memory_file = os.path.join(base_path, ".ben_memory.json")
    if os.path.exists(memory_file):
        with open(memory_file, "r", encoding="utf-8") as f:
            memory = json.load(f)
        return {"status": "success", "history": memory[-20:]}
    return {"status": "error", "message": "‚ùå Memory file not found"}

def get_history():
    try:
        import sqlite3
        conn = sqlite3.connect(os.path.join(base_path, "history.sqlite"))
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM command_history ORDER BY timestamp DESC LIMIT 20")
        rows = cursor.fetchall()
        conn.close()
        return {"status": "success", "history": rows}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Failed to fetch from SQLite: {e}"}

def handle_check_file_access(filename):
    filepath = os.path.join(base_path, filename)
    if os.path.isfile(filepath):
        return {"status": "success", "message": "‚úÖ File exists"}
    else:
        return {"status": "error", "message": f"‚ùå File not found: {filename}"}

from utils.json_tools import clean_json_text

def read_requests():
    if not os.path.exists(request_file):
        return []
    with open(request_file, "r", encoding="utf-8") as f:
        try:
            text = f.read().strip()
            if not text:
                return []
            text = clean_json_text(text)
            data = json.loads(text)
            return data if isinstance(data, list) else [data]
        except Exception as e:
            return [{"status": "error", "message": f"‚ùå JSON error: {str(e)}"}]

def write_response(responses):
    with open(response_file, "w", encoding="utf-8") as f:
        json.dump(responses, f, indent=2, ensure_ascii=False)

def clear_cache():
    with open(request_file, "w", encoding="utf-8") as f:
        f.write("")

import difflib

def smart_deduplicate_insertion(existing_block, new_block):
    existing_lines = [line.strip() for line in existing_block.strip().splitlines()]
    new_lines = [line.strip() for line in new_block.strip().splitlines()]
    merged = existing_block.strip().splitlines()
    for line in new_lines:
        if line and line.strip() not in existing_lines:
            merged.append(line)
    return "\n".join(merged) + "\n"

def handle_update_code(command):
    file_path = command.get('file_path')

    # üõ°Ô∏è –ó–∞—Ö–∏—â–µ–Ω—ñ —Ñ–∞–π–ª–∏
    protected_files = ["gpt_agent_cache.py", "cache.txt", "ben_gui_v2.py"]
    filename = os.path.basename(file_path)
    if filename in protected_files:
        return {"status": "error", "message": f"‚ùå Cannot modify protected file: {filename}"}
    
    # ‚úÖ –ë–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–∞–º–∏
    if file_path and os.path.exists(file_path):
        backup_file(file_path)

    update_type = command.get('update_type')  # 'validation', 'exceptions', 'logging', 'custom_insert', ...
    insert_at_line = command.get('insert_at_line')
    insert_code = command.get('code') 

    # üÜï –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –±–µ–∑ updates[]
    if "updates" not in command and all(k in command for k in ("pattern", "replacement", "update_type")):
        command["updates"] = [{
            "pattern": command["pattern"],
            "replacement": command["replacement"],
            "update_type": command["update_type"]
        }]

    if not file_path:
        return {"status": "error", "message": "‚ùå Missing 'file_path'"}

    # üîÅ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ç–∏–ø–∏
    if update_type in ("validation", "exceptions", "logging", "custom_insert"):
        test_result = handle_command({"action": "test_python", "filename": file_path})
        if test_result.get("status") == "error":
            return {"status": "error", "message": f"‚ùå Syntax check failed: {test_result.get('message')}"}

        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        if update_type == 'validation':
            lines.append('\nif data is None:\n    raise ValueError("Input data cannot be None")')
        elif update_type == 'exceptions':
            lines.append('\ntry:\n    risky_operation()\nexcept Exception as e:\n    print(f"Exception occurred: {e}")')
        elif update_type == 'logging':
            lines.append('\nimport logging\nlogging.basicConfig(level=logging.INFO)\nlogging.info("Log message from BEN")')
        elif update_type == 'custom_insert' and insert_code:
            if isinstance(insert_at_line, int) and 0 <= insert_at_line <= len(lines):
                lines.insert(insert_at_line, insert_code + '\n')
            else:
                return {"status": "error", "message": "‚ùå Invalid insert_at_line value"}

        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)

        if not is_valid_python_file(file_path):
            return {"status": "error", "message": f"‚ùå Syntax error after applying update_code to {file_path}"}

        print(f"[BEN] update_code applied to {file_path} with type {update_type}")
        return {"status": "success", "message": f"‚úÖ update_code applied to {file_path} with type {update_type}"}

    # üîÅ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º: updates[]. –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ù–ï –æ–¥–∏–Ω —ñ–∑ –≤–∏—â–µ
    updates = command.get("updates")
    if not updates:
        return {"status": "error", "message": "‚ùå Missing 'updates' or unsupported update_type"}

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        return {"status": "error", "message": "‚ùå File not found"}

    # –ó–±–µ—Ä–µ–≥—Ç–∏ .bak –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–∞–º–∏
    backup_path = file_path + ".bak"
    with open(backup_path, "w", encoding="utf-8") as backup:
        backup.write(content)

    for upd in updates:
        pattern = upd.get("pattern")
        replacement = upd.get("replacement")
        u_type = upd.get("update_type")

        if not all([pattern, replacement, u_type]):
            return {"status": "error", "message": "‚ùå Missing fields in update"}

        import re
        if u_type == "replace":
            matches = list(re.finditer(pattern, content, flags=re.DOTALL))
            if not matches:
                return {"status": "error", "message": "‚ùå Pattern not found"}
            for match in reversed(matches):
                span = match.span()
                target = content[span[0]:span[1]]
                updated = smart_deduplicate_insertion(target, replacement)
                content = content[:span[0]] + updated + content[span[1]:]

        elif u_type == "append":
            content = smart_deduplicate_insertion(content, replacement)

        elif u_type == "prepend":
            content = smart_deduplicate_insertion(replacement, content)

        else:
            return {"status": "error", "message": f"‚ùå Unknown update_type: {u_type}"}


    with open(file_path, "w", encoding="utf-8") as f:
        f.write(content)

    return {"status": "success", "message": f"‚úÖ Updated {file_path}"}

def log_diff(filepath):
    try:
        result = subprocess.run(["git", "diff", filepath], capture_output=True, text=True)
        diff = result.stdout.strip()
        if diff:
            timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
            with open(history_file, "a", encoding="utf-8") as f:
                f.write(f"[DIFF {timestamp}] File: {filepath}\n{diff}\n---\n")
    except Exception as e:
        with open(history_file, "a", encoding="utf-8") as f:
            f.write(f"[DIFF ERROR] {filepath}: {str(e)}\n")


def handle_macro(cmd):
    if not isinstance(cmd.get("steps"), list):
        return {"status": "error", "message": "‚ùå Invalid macro steps"}

    steps = cmd["steps"]
    rollback = cmd.get("rollback_on_fail", False)
    results = []
    created_files = []

    if rollback:
        for step in steps:
            if "filename" in step:
                file_path = os.path.join(base_path, step["filename"])
                if os.path.exists(file_path):
                    with open(file_path, "r", encoding="utf-8") as f:
                        original = f.read()
                    with open(file_path + ".bak", "w", encoding="utf-8") as f:
                        f.write(original)

    for step in steps:
        result = handle_command(step)
        results.append(result)

        # –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏ (–¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É rollback)
        if step.get("action") == "create_file" and "filename" in step:
            created_files.append(step["filename"])

        if result.get("status") == "error" and rollback:
            # –í—ñ–¥–∫–∞—Ç –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π
            for s in steps:
                if "filename" in s:
                    file_path = os.path.join(base_path, s["filename"])
                    bak_file = file_path + ".bak"
                    if os.path.exists(bak_file):
                        with open(bak_file, "r", encoding="utf-8") as f:
                            restored = f.read()
                        with open(file_path, "w", encoding="utf-8") as f:
                            f.write(restored)

            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏
            for fname in created_files:
                file_path = os.path.join(base_path, fname)
                if os.path.exists(file_path):
                    os.remove(file_path)

            # üß† –ó–∞–ø–∏—Å rollback'—É –≤ –ø–∞–º º—è—Ç—å
            save_to_memory({
                "action": "rollback",
                "reason": result.get("message"),
                "rollback_steps": steps
            })

            # ‚ôªÔ∏è Git-–∫–æ–º—ñ—Ç
            auto_commit("‚ôªÔ∏è Rollback after failure")

            return {
                "status": "error",
                "message": "‚ùå Macro failed. Rolled back all changes.",
                "results": results
            }

    return {"status": "success", "steps": results}

def handle_analyze_json(cmd, base_path="."):
    import os
    import json
    from datetime import datetime
    from openai import OpenAI

    # –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–µ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è
    json_data = cmd.get("parameters", {}).get("json_data")
    filename = (
        cmd.get("filename")
        or cmd.get("parameters", {}).get("filename")
        or cmd.get("parameters", {}).get("file_path")
    )

    if json_data:
        data = json_data  # –Ω–∞–ø—Ä—è–º—É –ø–µ—Ä–µ–¥–∞–Ω–∏–π JSON
    elif filename:
        filepath = os.path.join(base_path, filename)
        if not os.path.exists(filepath) or not os.path.isfile(filepath):
            return {"status": "error", "message": f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ü–µ –Ω–µ —Ñ–∞–π–ª: {filename}"}
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception as e:
            return {"status": "error", "message": f"‚ùå JSON –ø–æ–º–∏–ª–∫–∞: {e}"}
    else:
        return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ 'filename', 'file_path' –∞–±–æ 'json_data'"}

    # GPT-–∞–Ω–∞–ª—ñ–∑
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π JSON —ñ –¥–∞–π –ø–æ—Ä–∞–¥–∏:
- —á–∏ –¥–æ–±—Ä–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ?
- —â–æ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏?
- —á–∏ —î –ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏?

–û—Å—å JSON:
{json.dumps(data, indent=2, ensure_ascii=False)}
"""
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    reply = response.choices[0].message.content.strip()

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    out_path = f"gpt_json_analysis_{timestamp}.txt"
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(reply)

    return {"status": "success", "message": f"üìÑ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∞–Ω–∞–ª—ñ–∑ —É {out_path}"}

def handle_summarize_file(cmd, base_path="."):
    import os
    import openai

    filename = (
        cmd.get("filename")
        or cmd.get("parameters", {}).get("filename")
        or cmd.get("parameters", {}).get("file_path")
    )

    # üõ°Ô∏è –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç, —è–∫—â–æ —à–ª—è—Ö –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞–±–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î
    if not filename or filename == "unknown" or not os.path.exists(os.path.join(base_path, filename)):
        filename = "recent_actions.log"

    file_path = os.path.join(base_path, filename)
    if not os.path.exists(file_path):
        return {"status": "error", "message": f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è: {e}"}

    prompt = f"""
–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ–∞–π–ª—É. –í–∫–∞–∂–∏:
1. –©–æ –º—ñ—Å—Ç–∏—Ç—å—Å—è –≤ –Ω—å–æ–º—É?
2. –Ø–∫–∞ –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?
3. –ß–∏ —î –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è?

–û—Å—å –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É `{filename}`:
{content[:3000]}  # –æ–±–º–µ–∂–∏–º–æ –æ–±—Å—è–≥
"""

    client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )

    reply = response.choices[0].message.content.strip()

    out_file = f"summarized_{filename}.txt"
    with open(out_file, "w", encoding="utf-8") as f:
        f.write(reply)

    return {"status": "success", "message": f"üìÑ –ü—ñ–¥—Å—É–º–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {out_file}"}

from handlers.memory_manager import remember_phrase

def handle_validate_shell_command(cmd, base_path="."):
    command = (
        cmd.get("parameters", {}).get("command")
        or cmd.get("command")
    )

    if command and isinstance(command, str) and len(command.strip()) > 3:
        remember_phrase(command.strip())

    if not command:
        return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."}

    dangerous_keywords = ["rm", "shutdown", "reboot", "sudo", "mkfs", ":(){", ">:(", "dd if=", "kill -9"]
    if any(danger in command for danger in dangerous_keywords):
        return {
            "status": "error",
            "message": f"‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—É –∫–æ–º–∞–Ω–¥—É: '{command}'"
        }

    return {
        "status": "ok",
        "message": f"‚úÖ Shell-–∫–æ–º–∞–Ω–¥–∞ '{command}' –≤–∏–≥–ª—è–¥–∞—î –±–µ–∑–ø–µ—á–Ω–æ."
    }

def handle_add_function(cmd, base_path="."):
    import os
    import ast

    filename = cmd.get("file") or cmd.get("parameters", {}).get("file")
    function_name = cmd.get("function_name") or cmd.get("parameters", {}).get("function_name")
    function_code = cmd.get("function_code") or cmd.get("parameters", {}).get("function_code")

    if not filename or not function_name or not function_code:
        return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ñ–∞–π–ª, –Ω–∞–∑–≤—É –∞–±–æ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó."}

    file_path = os.path.join(base_path, filename)

    if not os.path.exists(file_path):
        with open(file_path, "w", encoding="utf-8") as f:
            f.write("")

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            source = f.read()

        parsed = ast.parse(source)
        for node in parsed.body:
            if isinstance(node, ast.FunctionDef) and node.name == function_name:
                return {
                    "status": "skipped",
                    "message": f"‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è '{function_name}' –≤–∂–µ —ñ—Å–Ω—É—î —É —Ñ–∞–π–ª—ñ '{filename}'"
                }

        with open(file_path, "a", encoding="utf-8") as f:
            f.write("\n\n" + function_code.strip() + "\n")

        return {
            "status": "success",
            "message": f"‚úÖ –§—É–Ω–∫—Ü—ñ—é '{function_name}' –¥–æ–¥–∞–Ω–æ –¥–æ '{filename}'"
        }

    except Exception as e:
        return {
            "status": "error",
            "message": f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: {str(e)}"
        }

from handlers.memory_manager import remember_phrase

def try_remember_dialogue(cmd):
    fields = [
        cmd.get("comment"),
        cmd.get("parameters", {}).get("prompt"),
        cmd.get("parameters", {}).get("query"),
        cmd.get("parameters", {}).get("text")
    ]
    for phrase in fields:
        if phrase and isinstance(phrase, str) and len(phrase.strip()) > 3:
            remember_phrase(phrase.strip())


def handle_command(cmd):
    cmd = apply_ben_cognition_cycle(cmd)  # üß† —Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å Ben

    # üß† –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –º–∏—Å–ª–µ–Ω–Ω—è
    with open("ben_thoughts_log.txt", "a", encoding="utf-8") as log:
        log.write(f"\n==== {datetime.now().isoformat()} ====\n")
        log.write(f"Identity: {ben_ego.get('identity', {}).get('name', '–Ω–µ–≤—ñ–¥–æ–º–æ')}\n")
        log.write(f"Mission: {ben_ego.get('mission', '–Ω–µ–º–∞—î –º—ñ—Å—ñ—ó')}\n")
        log.write(f"Strategy: {ben_ego.get('vision', {}).get('strategy', [])}\n")
        log.write(f"Action Analyzed: {json.dumps(cmd, ensure_ascii=False, indent=2)}\n")

    cmd = unwrap_parameters_if_present(cmd)

    print("üß™ DEBUG ‚Äî –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞:", cmd)

    if not isinstance(cmd, dict):
        return {"status": "error", "message": "‚ùå Invalid command format ‚Äî expected a JSON object"}

    print("üì¶ DEBUG ‚Äî parameters:", cmd.get("parameters", {}))

    # ‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö –¥—ñ–π –∑ long_term_memory.json
    from handlers.memory_manager import is_forbidden_action
    if is_forbidden_action(cmd):
        return {
            "status": "error",
            "message": f"üö´ –¶—è –¥—ñ—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ–±–∞–∂–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
        }

    if not isinstance(cmd, dict):
        return {"status": "error", "message": "‚ùå Invalid command format ‚Äî expected a JSON object"}
    # üß© –ü–æ–ø—Ä–∞–≤–ª—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—â–æ GPT –∑—Ä–æ–±–∏–≤ —ó—Ö —Å–ø–∏—Å–∫–æ–º –∑–∞–º—ñ—Å—Ç—å —Å–ª–æ–≤–Ω–∏–∫–∞

    if isinstance(cmd.get("parameters"), list):
        print("‚ö†Ô∏è GPT –ø–æ–≤–µ—Ä–Ω—É–≤ parameters —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É. –í–∏–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º–∞—Ç...")
        new_params = {}
        if "function_name" in cmd:
            new_params["name"] = cmd["function_name"]
        if "code" in cmd:
            new_params["code"] = cmd["code"]
        if "file_path" in cmd:
            new_params["file_path"] = cmd["file_path"]
        else:
            new_params["file_path"] = "example.py"
        cmd["parameters"] = new_params

    # üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–æ–±–∞–∂–∞–Ω—å —É –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö/–ø—Ä–æ–º–ø—Ç–∞—Ö
    cmd = auto_guess_missing_parameters(cmd)
    
    if "file_path" in cmd.get("parameters", {}):
        fp = cmd["parameters"]["file_path"]
        if not os.path.exists(fp):
            os.makedirs(os.path.dirname(fp), exist_ok=True)
            with open(fp, "w", encoding="utf-8") as f:
                f.write("# üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ–∞–π–ª\n")
            print(f"üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª: {fp}")
   
    user_text = (
        cmd.get("comment") or
        cmd.get("parameters", {}).get("prompt") or
        cmd.get("parameters", {}).get("query") or
        ""
    ).lower()

    if "–ø–∞–º" in user_text or "–∑–∞–ø–∞–º" in user_text:
        phrase = user_text.strip()
        remember_phrase(phrase)

    if "–Ω–µ —Ä–æ–±–∏" in user_text or "–∑–∞–±–æ—Ä–æ–Ω" in user_text:
        phrase = user_text.strip()
        forget_phrase(phrase)

    action = cmd.get("action")

    # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º
    required_fields = {
        "add_function": ["file_path", "function_name", "code"],
        "append_file": ["filename", "content"],
        "update_code": ["file_path", "updates"],
        "safe_update_code": ["file_path", "updates"],
        "adaptive_safe_update_code": ["file_path", "updates"],
    }

    if action in required_fields:
        missing = [f for f in required_fields[action] if not cmd.get(f)]
        if missing:
            return {
                "status": "error",
                "message": f"‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ–º–∞–Ω–¥–∞ '{action}' –Ω–µ –º–∞—î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤: {', '.join(missing)}. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó."
            }


    # ‚úÖ –í—ñ–¥—Ä–∞–∑—É –æ–±—Ä–æ–±–∫–∞ –≤—ñ–¥–æ–º–∏—Ö –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –¥—ñ–π
    if action == "ask_gpt":
        from gpt_interpreter import interpret_user_prompt
        inner_prompt = (
            cmd.get("prompt")
            or cmd.get("parameters", {}).get("prompt")
            or ""
        )
        if inner_prompt.strip():
            answer = interpret_user_prompt(inner_prompt, return_data=False)
            try_remember_dialogue(cmd)
            return {"status": "ok", "message": answer}
        else:
            try_remember_dialogue(cmd)
            return {"status": "error", "message": "‚ùå –ù–µ–º–∞—î prompt –¥–ª—è 'ask_gpt'"}

    # üß† –û–±—Ä–æ–±–∫–∞ context_guide
    context_guide = cmd.get("context_guide")
    if context_guide:
        print("üìò Context Guide:")
        print(context_guide)
        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ª–æ–≥-—Ñ–∞–π–ª
        with open("context_guides_log.txt", "a", encoding="utf-8") as f:
            f.write(f"\n\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]\n{context_guide}\n")

    if action == "scan_all_files":
        from handlers.scan_all import handle_scan_all_files
        return handle_scan_all_files(cmd.get("parameters", {}))

    if action == "message":
        try_remember_dialogue(cmd)
        return {
            "status": "ok",
            "message": cmd.get("parameters", {}).get("text", "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ.")
        }

    known_actions = ["append_file", "update_code", "run_macro", "insert_between_markers",
                     "run_shell", "read_file", "undo_change", "test_python", "summarize_file",
                     "analyze_json", "ask_gpt", "save_template", "load_template",
                     "validate_template", "add_function", "update_code_bulk", "run_macro_from_file",
                     "message","create_file", "create_and_finalize_script","scan_all_files",
                     "retry_last_action_with_fix","scan_all_files","macro","safe_update_code","run_python"]  # ‚úÖ –¥–æ–¥–∞–Ω–æ message

    if action not in known_actions:
        # üî¥ –õ–æ–≥—É—î–º–æ –Ω–æ–≤—É –¥—ñ—é
        with open("unknown_actions.json", "a", encoding="utf-8") as log:
            json.dump(cmd, log, ensure_ascii=False)
            log.write(",\n")
        return {
            "status": "error",
            "message": f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è: {action}. –Ø–∫—â–æ GPT –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–≤ –Ω–æ–≤—É –¥—ñ—é, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ó—ó –≤—Ä—É—á–Ω—É."
        }

    # üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ —Ñ—É–Ω–∫—Ü—ñ–π
    if cmd.get("action") == "append_file" and "def " in cmd.get("content", ""):
        new_func_name = None
        try:
            new_func_ast = ast.parse(cmd["content"])
            for node in ast.walk(new_func_ast):
                if isinstance(node, ast.FunctionDef):
                    new_func_name = node.name  # <-- –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø —Ç—É—Ç!
                    break  # <-- –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø —Ç—É—Ç!
        except SyntaxError:
            return {"status": "error", "message": "‚ùå Syntax error in new function code"}

        if new_func_name:
            existing_file_path = os.path.join(base_path, cmd["filename"])
            if os.path.exists(existing_file_path):
                with open(existing_file_path, "r", encoding="utf-8") as f:
                    existing_ast = ast.parse(f.read())
                    for node in ast.walk(existing_ast):
                        if isinstance(node, ast.FunctionDef) and node.name == new_func_name:
                            return {
                                "status": "skipped",
                                "message": f"‚ö†Ô∏è Function '{new_func_name}' already exists in {cmd['filename']}"
                            }

    required_keys = ["action"]
    for key in required_keys:
        if key not in cmd:
            return {"status": "error", "message": f"‚ùå Missing required field: {key}"}
    try:
        
        action = cmd.get("action")
        filename = cmd.get("filename") or cmd.get("file_path") or cmd.get("parameters", {}).get("file_path")
        foldername = cmd.get("foldername")
        content = cmd.get("content", "")
        pattern = cmd.get("pattern")
        replacement = cmd.get("replacement")
        target_folder = cmd.get("target_folder")
        new_name = cmd.get("new_name")

        full_file_path = os.path.join(base_path, filename) if filename else None
        full_folder_path = os.path.join(base_path, foldername) if foldername else None
        dst_folder_path = os.path.join(base_path, target_folder) if target_folder else None
        dst_file_path = os.path.join(dst_folder_path, filename) if target_folder and filename else None
        

        if action == "create_file":
            with open(full_file_path, "w", encoding="utf-8") as f:
                f.write(content)
            save_to_memory(cmd)  
            return {"status": "success", "message": f"‚úÖ Created file '{filename}'"}
        
        elif action == "run_python":
            from handlers.run_python import handle_run_python
            return handle_run_python(cmd)  # üëà –ø–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—é –∫–æ–º–∞–Ω–¥—É!


        elif action == "update_code":
            params = cmd.get("parameters", {})
            filepath = cmd.get("file_path") or params.get("file_path") or cmd.get("file")

            if not filepath:
                return {"status": "error", "message": "‚ùå Missing 'file_path'"}

            full_path = os.path.join(base_path, filepath)
            if not os.path.isfile(full_path):
                return {"status": "error", "message": f"‚ùå File not found: {filepath}"}

            updates = cmd.get("updates") or params.get("updates", [])
            if not updates:
                return {"status": "error", "message": "‚ùå No updates provided"}

            result = apply_updates_to_file(full_path, updates)

            # üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            test_result = handle_command({
                "action": "test_python",
                "filename": filepath
            })
            print(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç—É: {test_result}")

            return {"status": "success", "message": f"‚úÖ Updated {filepath}", "details": result}

        elif action == "adaptive_safe_update_code":
                import ast

                file_path = cmd.get("file_path")
                updates = cmd.get("updates", [])

                if not os.path.exists(file_path):
                    return {"status": "error", "message": f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

                with open(file_path, "r", encoding="utf-8") as f:
                    code = f.read()

                lines = code.splitlines()
                original_code = code
                success_count = 0

                for update in updates:
                    pattern = update.get("pattern")
                    replacement = update.get("replacement")

                    match_found = False

                    for i, line in enumerate(lines):
                        if re.search(pattern, line):
                            indent = len(line) - len(line.lstrip())
                            adapted_replacement = "\n".join(
                                (" " * indent + repl_line if repl_line.strip() else "")
                                for repl_line in replacement.splitlines()
                            )

                            lines[i] = re.sub(pattern, adapted_replacement, line)
                            match_found = True
                            success_count += 1
                            break

                    if not match_found:
                        # –Ø–∫—â–æ pattern –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤—Å—Ç–∞–≤–∏—Ç–∏ –≤ –ª–æ–≥—ñ—á–Ω–µ –º—ñ—Å—Ü–µ
                        try:
                            tree = ast.parse(code)
                            insert_line = None

                            for node in reversed(tree.body):
                                if hasattr(node, 'lineno'):
                                    insert_line = node.lineno
                                    break

                            if insert_line:
                                indent = len(lines[insert_line - 1]) - len(lines[insert_line - 1].lstrip())
                                adapted_replacement = "\n".join(
                                    (" " * indent + repl_line if repl_line.strip() else "")
                                    for repl_line in replacement.splitlines()
                                )
                                lines.insert(insert_line, adapted_replacement)
                                success_count += 1
                                print(f"‚ö†Ô∏è –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –ø—ñ—Å–ª—è —Ä—è–¥–∫–∞ {insert_line}")
                            else:
                                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ pattern: {pattern}")

                        except Exception as e:
                            print(f"‚ùå adaptive_safe_update_code: AST –ø–æ–º–∏–ª–∫–∞ ‚Äî {e}")

                    new_code = "\n".join(lines)

                if success_count:
                    try:
                        ast.parse(new_code)  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å Python
                        with open(file_path, "w", encoding="utf-8") as f:
                            f.write(new_code)
                        return {"status": "success", "message": f"‚úÖ adaptive_safe_update_code: –æ–Ω–æ–≤–ª–µ–Ω–æ {success_count} –±–ª–æ–∫(—ñ–≤) —É {file_path}"}
                    except Exception as e:
                        print("‚ùå –ü—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–ª–∞–º–∞–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –≤—ñ–¥–∫–∞—Ç –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É.")
                        with open(file_path, "w", encoding="utf-8") as f:
                            f.write(original_code)
                        return {"status": "error", "message": f"‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥—É –∑–ª–∞–º–∞–ª–∞—Å—å –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏: {e}"}
                else:
                    return {"status": "warning", "message": f"‚ö†Ô∏è –ñ–æ–¥–µ–Ω –±–ª–æ–∫ –Ω–µ –±—É–≤ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —É {file_path}"}

        elif action == "add_function":
            return handle_add_function(cmd, base_path)
   

        elif action == "safe_update_code":
            result = handle_adaptive_safe_update_code(cmd, base_path)

            if result is None:
                result = {"status": "error", "message": "‚ùå handle_adaptive_safe_update_code –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"}

            return result

        elif action == "update_code_bulk":
            return handle_update_code_bulk(cmd)
        
        elif action == "retry_last_action_with_fix":
            from handlers.retry_logic import handle_retry_last_action_with_fix
            return handle_retry_last_action_with_fix(cmd, base_path)

        elif action == "create_file":
            return handle_create_file(cmd, base_path)
        
        elif action == "run_python":
            from handlers.run_python import handle_run_python
            return handle_run_python(cmd)  # üëà –ø–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—é –∫–æ–º–∞–Ω–¥—É!

        elif action == "create_and_finalize_script":
            return handle_create_and_finalize_script(cmd, base_path)

        elif action == "append_file":
            filename = cmd["filename"]
            content = cmd["content"]
            filepath = os.path.join(base_path, filename)
            if not os.path.exists(filepath):
                return {"status": "error", "message": f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏."}
            backup_file(filepath)

            with open(filepath, "a", encoding="utf-8") as f:
                f.write(content)

            save_to_memory(cmd)

            # üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏
            test_result = handle_command({
                "action": "test_python",
                "filename": filename
            })
            print(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç—É: {test_result}")

            return {"status": "success", "message": f"üìå Appended to file '{filename}'"}

        elif action == "scan_all_files":
            result = {}
            for root, dirs, files in os.walk(base_path):
                for file in files:
                    if file.endswith((".py", ".json", ".txt", ".csv")):
                        rel_path = os.path.relpath(os.path.join(root, file), base_path)
                        try:
                            with open(os.path.join(root, file), "r", encoding="utf-8") as f:
                                result[rel_path] = f.read()
                        except Exception as e:
                            result[rel_path] = f"‚ö†Ô∏è Error reading: {str(e)}"
            return {
                "status": "success",
                "message": "‚úÖ –£—Å–ø—ñ—à–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤",
                "files": result
            }

        elif action == "update_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    data = f.read()
                updated = re.sub(pattern, replacement, data)
                with open(full_file_path, "w", encoding="utf-8") as f:
                    f.write(updated)
                save_to_memory(cmd)
                return {"status": "success", "message": f"üîÅ Updated file '{filename}'"}
            else:
                return {"status": "error", "message": "File not found"}

        elif action == "replace_in_file":
            filename = cmd["filename"]
            pattern = cmd["pattern"]
            replacement = cmd["replacement"]
            filepath = os.path.join(base_path, filename)
            full_file_path = filepath

            backup_file(filepath)

            if filename.endswith('.py'):
                test_result = handle_command({"action": "test_python", "filename": filename})
                if test_result.get("status") == "error":
                    return {"status": "error", "message": f"‚ùå –ü–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é: {test_result.get('message')}"}

                if not is_valid_python_file(full_file_path):
                    return {"status": "error", "message": f"‚ùå Syntax error before change in {filename}"}

            if filename in ["config.py", "api_keys.py", "cache.txt"]:
                return {"status": "error", "message": f"‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª: {filename}"}

            if not os.path.exists(full_file_path):
                return {"status": "error", "message": f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–º—ñ–Ω–∏"}

            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    text = f.read()

                # üß† –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
                backup_path = full_file_path + ".bak"
                with open(backup_path, "w", encoding="utf-8") as f:
                    f.write(text)

                # üìù Git diff –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º
                try:
                    diff_output = subprocess.check_output(["git", "diff", full_file_path], cwd=base_path, text=True)
                    if diff_output.strip():
                        log_action("üìÑ Git diff –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é:" + diff_output)
                except Exception as e:
                    log_action(f"‚ö†Ô∏è Git diff error: {str(e)}")

                # üîÅ –ó–∞–º—ñ–Ω–∞ —á–µ—Ä–µ–∑ regex
                new_text = re.sub(pattern, replacement, text)
                with open(full_file_path, "w", encoding="utf-8") as f:
                    f.write(new_text)

                if not is_valid_python_file(full_file_path):
                    return {"status": "error", "message": f"‚ùå Syntax error after change in {filename}. Revert or fix manually."}

                # üìú –õ–æ–≥ –∑–º—ñ–Ω
                log_diff(full_file_path)
                save_to_memory(cmd)

                # üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
                test_result = handle_command({
                    "action": "test_python",
                    "filename": filename
                })
                print(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç—É: {test_result}")

                return {"status": "success", "message": f"‚úèÔ∏è Replaced text in '{filename}'"}

            
        elif action == "insert_between_markers":
            filepath = os.path.join(base_path, cmd["filename"])
            backup_file(filepath)
            file_path = os.path.join(base_path, cmd.get("file_path"))
            marker_start = cmd.get("marker_start")
            marker_end = cmd.get("marker_end")
            insert_code = cmd.get("code")

            if not all([file_path, marker_start, marker_end, insert_code]):
                return {"status": "error", "message": "‚ùå Missing required fields for marker-based insertion"}

            if not os.path.exists(file_path):
                return {"status": "error", "message": f"‚ùå File '{file_path}' not found"}

            with open(file_path, "r", encoding="utf-8") as f:
                lines = f.readlines()

            start_idx, end_idx = -1, -1
            for i, line in enumerate(lines):
                if marker_start in line:
                    start_idx = i + 1
                if marker_end in line:
                    end_idx = i

            if start_idx == -1 or end_idx == -1 or start_idx >= end_idx:
                return {"status": "error", "message": "‚ùå Markers not found or invalid order"}

            lines = lines[:start_idx] + [insert_code + "\n"] + lines[end_idx:]

            with open(file_path, "w", encoding="utf-8") as f:
                f.writelines(lines)

            save_to_memory(cmd)
            return {"status": "success", "message": f"‚úÖ Inserted code between markers in {cmd.get('file_path')}"}
           
        elif action == "read_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    return {"status": "success", "content": f.read()}
            save_to_memory(cmd)
            return {"status": "error", "message": "File not found"}

        elif action == "search_text_in_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                matches = [line for line in lines if pattern in line]
                return {"status": "success", "matches": matches}

        elif action == "create_folder":
            os.makedirs(full_folder_path, exist_ok=True)
            return {"status": "success", "message": f"üìÅ Folder '{foldername}' created"}

        elif action == "delete_file":
            filename = cmd.get("filename")
            if not filename:
                return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ 'filename'"}

            full_file_path = os.path.join(base_path, filename)

            if os.path.exists(full_file_path):
                backup_file(full_file_path)
                os.remove(full_file_path)
                save_to_memory(cmd)
                return {"status": "success", "message": f"üóëÔ∏è File '{filename}' deleted"}
            else:
                return {"status": "error", "message": f"File '{filename}' not found"}

        elif action == "rename_file":
            if not os.path.exists(full_file_path):
                return {"status": "error", "message": f"‚ùå File '{filename}' not found"}
            new_path = os.path.join(base_path, new_name)
            os.rename(full_file_path, new_path)
            save_to_memory(cmd)
            return {"status": "success", "message": f"üìÑ File renamed to '{new_name}'"}

        elif action == "copy_file":
            shutil.copy(full_file_path, dst_file_path)
            save_to_memory(cmd)
            return {"status": "success", "message": f"üìÇ Copied '{filename}' to '{target_folder}'"}

        elif action == "read_folder":
            if os.path.exists(full_folder_path):
                files = os.listdir(full_folder_path)
                return {"status": "success", "files": files}
            return {"status": "error", "message": "Folder not found"}

        elif action == "self_improve":
            filename = cmd.get("filename", "gpt_agent_cache.py")
            result = self_improve_agent(filename)
            return result
        
        elif action == "smart_plan":
             result = generate_improvement_plan()
             return result
        
        elif action == "run_plan":
             return execute_plan()

        elif action == "analyze_all_code":
            result = analyze_all_code()
            return result
        
        elif action == "analyze_json":
             return handle_analyze_json(cmd, base_path)      
        
        elif action == "summarize_file":
            file_path = (
                cmd.get("parameters", {}).get("file_path")
                or cmd.get("filename")
                or cmd.get("parameters", {}).get("filename")
            )

            if not file_path and autopilot_mode:
                file_path = "recent_actions.log"  # –ê–±–æ —ñ–Ω—à–∏–π –¥–µ—Ñ–æ–ª—Ç

            if not file_path:
                return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ 'file_path'."}

            cmd["parameters"]["file_path"] = file_path
            return handle_summarize_file(cmd, base_path)

        elif action == "validate_shell_command":
            return handle_validate_shell_command(cmd, base_path)
        
        elif action == "ask_gpt":
            prompt = (
                cmd.get("prompt")
                or cmd.get("parameters", {}).get("prompt")
                or cmd.get("parameters", {}).get("question")
            )

            if not prompt and autopilot_mode:
                prompt = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π prompt: —Å—Ñ–æ—Ä–º—É–ª—é–π –Ω–æ–≤—É —ñ–¥–µ—é –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è Ben Assistant."

            if not prompt:
                return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ prompt –¥–ª—è ask_gpt"}

            from openai import OpenAI
            from config import API_KEY
            client = OpenAI(api_key=API_KEY)
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            return {
                "status": "success",
                "message": f"üß† GPT response: {response.choices[0].message.content.strip()}"
            }

        elif action == "test_gpt_api":
            try:
                from openai import OpenAI
                from config import API_KEY
                client = OpenAI(api_key=API_KEY)
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "user", "content": "Ping"}
                    ]
                )
                return {
                    "status": "success",
                    "message": "üü¢ GPT API connected!",
                    "response": response.choices[0].message.content
                }
            except Exception as e:
                return {
                    "status": "error",
                    "message": f"‚ùå GPT API error: {str(e)}"
                }
            
        elif action == "test_python":
            if os.path.exists(full_file_path):
                try:
                    with open(full_file_path, "r", encoding="utf-8") as f:
                        source = f.read()
                    compile(source, filename, 'exec')
                    return {
                        "status": "success",
                        "message": f"‚úÖ {filename} –ø—Ä–æ–π—à–æ–≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É"
                    }
                except SyntaxError as e:
                    return {
                        "status": "error",
                        "message": f"‚ùå Syntax error in {filename}: {e}"
                    }
            return {
                "status": "error",
                "message": "File not found"
            }

        elif action == "undo_change":
            target_id = cmd.get("target_id")
            filename = cmd.get("filename")

            if target_id:
                # üîç –®—É–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É –ø–æ ID –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
                prev_cmd = get_command_by_id(target_id)
                if not prev_cmd:
                    return {"status": "error", "message": f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑ ID: {target_id}"}

                file_path = prev_cmd.get("file")
                if not file_path or not os.path.exists(file_path + ".bak"):
                    return {"status": "error", "message": f"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è ID: {target_id}"}

                with open(file_path + ".bak", "r", encoding="utf-8") as f:
                    prev_code = f.read()

                return ask_confirmation_for_rollback(prev_code, target_id)

            elif filename:
                # üïó –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ —á–µ—Ä–µ–∑ filename
                full_file_path = os.path.join(base_path, filename)
                if os.path.exists(full_file_path + ".bak"):
                    shutil.copy(full_file_path + ".bak", full_file_path)
                    save_to_memory(cmd)
                    return {"status": "success", "message": f"‚Ü©Ô∏è Undo: –≤—ñ–¥–∫–∞—Ç –¥–æ .bak –¥–ª—è '{filename}'"}
                else:
                    return {"status": "error", "message": f"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è '{filename}'"}

            else:
                return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ 'filename' –∞–±–æ 'target_id'"}

        # üìå Long-term memory handling
        elif action == "remember":
            from memory_manager import remember
            phrase = cmd.get("phrase") or cmd.get("parameters", {}).get("phrase")
            if not phrase:
                return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ñ—Ä–∞–∑—É –¥–ª—è –∑–∞–ø–∞–º º—è—Ç–æ–≤—É–≤–∞–Ω–Ω—è"}
            return remember(phrase)

        elif action == "recall":
            from memory_manager import recall
            return recall()

        elif action == "forget":
            from memory_manager import forget
            phrase = cmd.get("phrase") or cmd.get("parameters", {}).get("phrase")
            if not phrase:
                return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ñ—Ä–∞–∑—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"}
            return forget(phrase)

        elif action == "macro":
            steps = cmd.get("steps", [])
            results = []
            for step in steps:
                print("üîÅ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫—Ä–æ–∫—É:", step)
                res = handle_command(step)
                if not isinstance(res, dict):
                    res = {"status": "error", "message": "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"}
                results.append(res)
            return {
                "status": "success",
                "message": f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ {len(steps)} –∫—Ä–æ–∫—ñ–≤",
                "results": results
            }

        elif cmd.get("action") == "check_file_access":
            filename = cmd.get("filename")
            return handle_check_file_access(filename)

        elif action == "run_macro":
            macro_name = cmd.get("macro_name")
            arguments = cmd.get("arguments", {})
            if macro_name:
                return execute_macro(macro_name, arguments)
            else:
                return run_macro()  # fallback –¥–ª—è macro_command.json
            
        elif action == "run_macro_from_file":
            return execute_macro_from_file()
        
        elif action == "macro_build":
            from handlers.macro_builder import handle_macro_build
            return handle_macro_build(cmd)


        elif action == "check_file_access":
            filename = cmd.get("filename")
            if filename:
                filepath = os.path.join(base_path, filename)
                if os.path.exists(filepath):
                    result = f"‚úÖ File exists: {filename}"
                else:
                    result = f"‚ùå File not found: {filename}"
            else:
                result = "‚ùå No filename provided"
            print(result)
            return {"status": "success", "message": result}

        elif action == "execute_macro":
            macro_name = cmd.get("macro_name")
            arguments = cmd.get("arguments", {})
            return execute_macro(macro_name, arguments)
        
        elif action == "run_shell":
            command = cmd.get("command") or cmd.get("parameters", {}).get("command")

            if not command and autopilot_mode:
                command = "echo –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –Ω—ñ—á–æ–≥–æ –Ω–µ –±—É–ª–æ –≤–∫–∞–∑–∞–Ω–æ."

            if not command:
                return {"status": "error", "message": "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."}

            try:
                result = subprocess.run(command, shell=True, capture_output=True, text=True)
                return {
                    "status": "success" if result.returncode == 0 else "error",
                    "stdout": result.stdout.strip(),
                    "stderr": result.stderr.strip()
                }
            except Exception as e:
                return {
                    "status": "error",
                    "message": f"‚ùå Shell –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è: {str(e)}"
                }

        elif action == "list_files":
            return {"status": "success", "files": os.listdir(base_path)}

        elif action == "check_status":
            return {"status": "success", "message": "üü¢ Agent is running"}

        elif action == "show_memory":
            memory_file = os.path.join(base_path, ".ben_memory.json")
            if os.path.exists(memory_file):
                with open(memory_file, "r", encoding="utf-8") as f:
                    memory = json.load(f)
                return {"status": "success", "memory": memory[-20:]}
            else:
                return {"status": "error", "message": "‚ùå Memory file not found"}
        
        elif action == "list_history":
            return handle_list_history()

        elif action == "view_sql_history":
            return get_history()
        
        elif action == "safe_update":
            result = handle_safe_update_code(cmd, base_path)
            results.append(result)

        # ‚õî –ê–≤—Ç–æ–æ–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–æ—ó –¥—ñ—ó, —è–∫—â–æ autopilot —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π
        elif autopilot_mode:
            supported_actions = [
                "create_file", "create_and_finalize_script",
                "append_file", "update_code", "run_macro", "insert_between_markers",
                "run_shell", "read_file", "undo_change", "test_python", "summarize_file",
                "analyze_json", "ask_gpt", "save_template", "load_template",
                "validate_template", "add_function", "update_code_bulk", "validate_shell_command",
                "test_gpt_api", "smart_plan", "run_plan", "analyze_all_code", "safe_update",
                "show_memory", "list_history", "view_sql_history", "macro"
            ]
            if action not in supported_actions:
                result = {
                    "status": "auto_generated",
                    "message": f"üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –¥—ñ—é '{action}' —É —Ä–µ–∂–∏–º—ñ autopilot.",
                    "auto_action": {
                        "action": "add_function",
                        "parameters": {
                            "file": "handler.py",
                            "function_name": f"handle_{action}",
                            "function_code": f"def handle_{action}(cmd, base_path='.'):\n    # TODO: —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–æ–≥—ñ–∫—É\n    return {{'status': 'ok', 'message': 'üîß –ó–∞–≥–æ—Ç–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ó {action}'}}"
                        }
                    }
                }
            else:
                result = {"status": "error", "message": f"‚ùå Unknown action: {action}"}
        
        else:
            result = {"status": "error", "message": f"‚ùå Unknown action: {action}"}

        # üìù –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ—é –≤ SQLite
        try:
            conn = sqlite3.connect(os.path.join(base_path, "history.sqlite"))
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO command_history (action, file_path, update_type, context_guide) VALUES (?, ?, ?, ?)
            """, (
                cmd.get("action"),
                cmd.get("file_path") or cmd.get("filename"),
                cmd.get("update_type")
            ))
            conn.commit()
            conn.close()
        except Exception as e:
            log_action(f"‚ö†Ô∏è SQLite save error: {e}")

        # üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ auto_feedback –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –¥—ñ—ó
if cmd.get('context_guide'): log_action('üß† –¶—ñ–ª—å –¥—ñ—ó: ' + cmd['context_guide'])
        try:
            if result.get("status") == "success":
                subprocess.run(["python", "auto_feedback.py"], check=True)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ auto_feedback: {e}")
        
        if result.get("status") == "error" and not result.get("autofix_retry") and autopilot_mode:
            from handlers.retry_logic import handle_retry_last_action_with_fix
            print("‚ùó –í–∏—è–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É. –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä –∑ auto-fix...")
            retry_result = handle_retry_last_action_with_fix(cmd, base_path)
            if isinstance(retry_result, dict):
                retry_result["autofix_retry"] = True

                # üß† GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä—É
                try:
                    from openai import OpenAI
                    from config import API_KEY
                    client = OpenAI(api_key=API_KEY)

                    original = retry_result.get("original", {})
                    fixed = retry_result.get("fixed", {})
                    prompt = f"""
        –Ø –≤–∏–ø—Ä–∞–≤–∏–≤ –ø–æ–º–∏–ª–∫–æ–≤—É –¥—ñ—é:

        ‚ùå –û—Ä–∏–≥—ñ–Ω–∞–ª:
        {json.dumps(original, indent=2)}

        ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ:
        {json.dumps(fixed, indent=2)}

        –ü–æ—è—Å–Ω–∏ –∫–æ—Ä–æ—Ç–∫–æ, —â–æ –±—É–ª–æ –Ω–µ —Ç–∞–∫ —ñ —â–æ —è –≤–∏–ø—Ä–∞–≤–∏–≤.
        """

                    response = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[{"role": "user", "content": prompt}]
                    )
                    explanation = response.choices[0].message.content.strip()
                    print("üß† GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è:", explanation)
                    log_action("üß† GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è: " + explanation)
                    # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —É —Ñ–∞–π–ª –¥–ª—è GUI
                    with open("last_gpt_explanation.txt", "w", encoding="utf-8") as f:
                        f.write(explanation)
                except Exception as e:
                    print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è:", str(e))

                return retry_result
        # ‚úÖ –ó–∞–ø–∞–º º—è—Ç–æ–≤—É—î–º–æ —Ä–æ–∑–º–æ–≤–Ω—É –∫–æ–º–∞–Ω–¥—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó
        try_remember_dialogue(cmd)   
        return result

    except Exception as e:
        traceback.print_exc()

        # üõ†Ô∏è –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–¥–µ–±–∞–≥—É –ø—Ä–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ
        if "Syntax error" in str(e):
            filepath = os.path.join(base_path, cmd.get("filename") or cmd.get("file_path", ""))
            auto_result = attempt_autodebug(filepath, str(e))
            return auto_result

        return {"status": "error", "message": f"‚ùå Exception: {str(e)}"}

 # ‚õìÔ∏è –û–±–≥–æ—Ä—Ç–∞—î–º–æ handle_command
if 'original_handle_command' not in globals():
    original_handle_command = handle_command

def run_self_tests():
    print("\nüß™ Running self-tests...")
    tests_passed = 0
    tests_failed = 0

    # 1. Test basic command structure
    result = handle_command({"action": "check_status"})
    if result.get("status") == "success":
        print("‚úÖ check_status passed")
        tests_passed += 1
    else:
        print("‚ùå check_status failed")
        tests_failed += 1

    # 2. Test missing required key
    result = handle_command({})
    if result.get("status") == "error" and "Missing required field" in result.get("message", ""):
        print("‚úÖ missing field validation passed")
        tests_passed += 1
    else:
        print("‚ùå missing field validation failed")
        tests_failed += 1

    # 3. Test invalid command type
    result = handle_command("not_a_dict")
    if result.get("status") == "error" and "Invalid command format" in result.get("message", ""):
        print("‚úÖ invalid format validation passed")
        tests_passed += 1
    else:
        print("‚ùå invalid format validation failed")
        tests_failed += 1

    # ‚úÖ –ü–ï–†–ï–ù–ï–°–ï–ù–û –°–Æ–î–ò:
    handle_command({"action": "delete_file", "filename": "test_self.txt"})

    result = handle_command({"action": "create_file", "filename": "test_self.txt", "content": "Hello test!"})
    if result.get("status") == "success":
        print("‚úÖ create_file passed")
        tests_passed += 1
    else:
        print("‚ùå create_file failed")
        tests_failed += 1

    result = handle_command({"action": "read_file", "filename": "test_self.txt"})
    if result.get("status") == "success" and "Hello test!" in result.get("content", ""):
        print("‚úÖ read_file passed")
        tests_passed += 1
    else:
        print("‚ùå read_file failed")
        tests_failed += 1

    result = handle_command({"action": "delete_file", "filename": "test_self.txt"})
    if result.get("status") == "success":
        print("‚úÖ delete_file passed")
        tests_passed += 1
    else:
        print("‚ùå delete_file failed")
        tests_failed += 1

    # ‚úÖ –¢—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä ‚Äî —Ñ—ñ–Ω–∞–ª
    print(f"\nüß™ Test results: {tests_passed} passed, {tests_failed} failed")
    return tests_failed == 0

# üß∞ CLI-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥
import argparse

import argparse
import sys
import json

def run_cli():
    parser = argparse.ArgumentParser(description="Ben CLI")
    parser.add_argument("--action", help="–î—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, create_file)")
    parser.add_argument("--filename", help="–Ü–º'—è —Ñ–∞–π–ª—É")
    parser.add_argument("--content", help="–í–º—ñ—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å—É")
    parser.add_argument("--pattern", help="–ü–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É")
    parser.add_argument("--replacement", help="–¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–º—ñ–Ω–∏")
    parser.add_argument("--foldername", help="–Ü–º'—è –ø–∞–ø–∫–∏")
    parser.add_argument("--target_folder", help="–¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞")
    parser.add_argument("--new_name", help="–ù–æ–≤–µ —ñ–º'—è —Ñ–∞–π–ª—É")
    parser.add_argument("--steps", help="JSON-—Ä—è–¥–æ–∫ –¥–ª—è macro-–∫–æ–º–∞–Ω–¥–∏")

    args = parser.parse_args()

    print("–ê—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞:", sys.argv)  # –í–∏–≤–æ–¥–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    cmd = {k: v for k, v in vars(args).items() if v is not None}

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –ø–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è macro-–∫–æ–º–∞–Ω–¥–∏
    if cmd.get("action") == "macro" and "steps" in cmd:
        try:
            cmd["steps"] = json.loads(cmd["steps"])  # –ü–∞—Ä—Å–∏–º–æ JSON
            print("–ü–∞—Ä—Å–∏–Ω–≥ JSON —É—Å–ø—ñ—à–Ω–∏–π:", cmd["steps"])  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É steps: {str(e)}")
            return

    if "action" not in cmd:
        print("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ --action")
        return

    result = handle_command(cmd)
    print("üîß –†–µ–∑—É–ª—å—Ç–∞—Ç:", result)


def git_auto_push(commit_msg="üöÄ Auto-commit by Ben"):
    try:
        subprocess.run(["git", "add", "."], cwd=base_path, check=True)

        # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–º—ñ–Ω–∏
        diff_result = subprocess.run(["git", "diff", "--cached", "--quiet"], cwd=base_path)
        if diff_result.returncode == 0:
            log_action("‚ÑπÔ∏è –ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∫–æ–º—ñ—Ç—É ‚Äî git push –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return {"status": "skipped", "message": "‚ÑπÔ∏è No changes to commit"}

        subprocess.run(["git", "commit", "-m", commit_msg], cwd=base_path, check=True)
        subprocess.run(["git", "push"], cwd=base_path, check=True)
        log_action(f"üì§ Git push: {commit_msg}")
        save_to_memory({"action": "git_push", "message": commit_msg})
        return {"status": "success", "message": "üì§ Git push —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"}

    except subprocess.CalledProcessError as e:
        log_action(f"‚ùå Git push –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        return {"status": "error", "message": f"‚ùå Git push –ø–æ–º–∏–ª–∫–∞: {str(e)}"}
def handle_update_code_bulk(command):
    updates = command.get('updates', [])
    results = []
    for update in updates:
        result = handle_update_code(update)
        results.append(result)
    return {"status": "success", "results": results}

def scan_all_files(folder, extensions=None):
    matched_files = []
    for root, _, files in os.walk(folder):
        for file in files:
            if not extensions or any(file.endswith(ext) for ext in extensions):
                matched_files.append(os.path.join(root, file))
    return matched_files

def execute_macro_from_file():
    try:
        with open("macro_command.json", "r", encoding="utf-8") as f:
            macro = json.load(f)
        steps = macro.get("steps", [])
        for step in steps:
            print(f"üì§ –ö—Ä–æ–∫: {step.get('action', '...')} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            result = handle_command(step)
            print("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ:", result)
        return {"status": "success", "message": "‚úÖ –ú–∞–∫—Ä–æ—Å –∑ macro_command.json –≤–∏–∫–æ–Ω–∞–Ω–æ"}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–∞–∫—Ä–æ—Å—É –∑ —Ñ–∞–π–ª—É: {e}"}

if __name__ == "__main__":
    import argparse
    import sys

    parser = argparse.ArgumentParser(description="GPT Agent CLI")
    parser.add_argument("--cli", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ CLI-—Ä–µ–∂–∏–º")
    parser.add_argument("--test", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ self-—Ç–µ—Å—Ç–∏")
    parser.add_argument("--action")
    parser.add_argument("--filename")
    parser.add_argument("--content")
    parser.add_argument("--pattern")
    parser.add_argument("--replacement")
    parser.add_argument("--foldername")
    parser.add_argument("--target_folder")
    parser.add_argument("--new_name")
    parser.add_argument("--prompt")
    args = parser.parse_args()

    if args.test:
        run_self_tests()
        sys.exit()

    if args.cli:
        cmd = {k: v for k, v in vars(args).items() if v is not None and k not in ["cli", "test"]}
        if "action" not in cmd:
            print("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ --action")
            sys.exit(1)
        result = handle_command(cmd)
        print("üîß –†–µ–∑—É–ª—å—Ç–∞—Ç:", result)
        sys.exit()

    # –Ø–∫—â–æ –Ω–µ CLI —ñ –Ω–µ test ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —è–∫ –∑–≤–∏—á–Ω–æ
    print("üü¢ –ë–µ–Ω –∑–∞–ø—É—â–µ–Ω–∏–π —ñ —Å–ª—É—Ö–∞—î –∫–æ–º–∞–Ω–¥–∏ –∑ cache.txt...")

    try:
        from macros import run_macro
        auto = run_macro({"name": "scan_all_on_start"})
        print(f"[AUTO] {auto.get('message')}")
    except Exception as e:
        print(f"[AUTO] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É: {e}")

    while True:
        commands = read_requests()
        print("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥–∏:", commands)

        responses = []
        for cmd in commands:
            result = handle_command(cmd)
            # üß† –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —É dialogue_history.log
            try:
                with open("dialogue_history.log", "a", encoding="utf-8") as f:
                    f.write(json.dumps(cmd, ensure_ascii=False))
                    f.write("\n")
                    f.write(json.dumps(result, ensure_ascii=False))
                    f.write("\n---\n")
            except Exception as e:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ dialogue_history.log:", e)

            print("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ:", result)
            responses.append(result)
            if isinstance(result, dict):
                log_action(result.get("message", str(result)))
            else:
                log_action(str(result))

            if isinstance(result, dict) and result.get("status") == "success":
                push_result = git_auto_push(f"‚úÖ Auto-commit: {cmd.get('action')} {cmd.get('filename', '')}")
                print(push_result.get('message', ''))


        if responses:
            for r in responses:
                status = r.get("status")
                if status == "success":
                    print(Fore.GREEN + "‚úÖ", r.get("message", "") + Style.RESET_ALL)
                elif status == "error":
                    print(Fore.RED + "‚ùå", r.get("message", "") + Style.RESET_ALL)
                elif status == "cancelled":
                    print(Fore.YELLOW + "‚ö†Ô∏è", r.get("message", "") + Style.RESET_ALL)
                elif status == "macro":
                    print(Fore.CYAN + "üì¶ –í–∏–∫–æ–Ω–∞–Ω–æ macro-–∫–æ–º–∞–Ω–¥—É:" + Style.RESET_ALL)
                    for step_result in r.get("results", []):
                        print("  -", step_result.get("message", ""))

            print("üíæ –ó–∞–ø–∏—Å—É—é gpt_response.json —ñ –æ—á–∏—â–∞—é cache.txt")
            write_response(responses)
            clear_cache()

            # üîÅ –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ–±—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º
            if responses[-1].get("status") == "error":
                print("üîÅ –ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥—ñ—ó ‚Äî –∑–∞–ø—É—Å–∫–∞—é SmartFix —á–µ—Ä–µ–∑ GPT")

                ask_gpt_cmd = {
                    "action": "ask_gpt",
                    "parameters": {
                        "prompt": f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥—ñ—ó: {responses[-1].get('message', '')}. –Ø–∫ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ü—é –ø–æ–º–∏–ª–∫—É –∞–±–æ —è–∫—É –¥—ñ—é –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏, —â–æ–± —ó—ó —É–Ω–∏–∫–Ω—É—Ç–∏?"
                    },
                    "comment": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π SmartLoop ‚Äî GPT –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–º–∏–ª–∫—É"
                }

                with open("cache.txt", "w", encoding="utf-8") as f:
                    f.write(json.dumps(ask_gpt_cmd, ensure_ascii=False, indent=2))

                print("üß† GPT –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ cache.txt. –û—á—ñ–∫—É—é –Ω–æ–≤—É –¥—ñ—é...")
        time.sleep(1)

def repeat_last_action():
    memory_file = os.path.join(base_path, ".ben_memory.json")
    if not os.path.exists(memory_file):
        return {"status": "error", "message": "‚ùå Memory file not found"}
    try:
        with open(memory_file, "r", encoding="utf-8") as f:
            memory = json.load(f)
        if not memory:
            return {"status": "error", "message": "‚ùå No memory to repeat"}
        last_cmd = memory[-1]
        save_to_memory(last_cmd)
        return handle_command(last_cmd)
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Repeat error: {str(e)}"}


import autopep8
import os

# –ö—Ä–æ–∫ 2: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤
def fix_indentation(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            code = file.read()

        fixed_code = autopep8.fix_code(code)

        with open(filepath, 'w', encoding='utf-8') as file:
            file.write(fixed_code)

        return {'status': 'success', 'message': f'üßπ –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –≤ —Ñ–∞–π–ª—ñ {filepath}'}
    except Exception as e:
        return {'status': 'error', 'message': f'‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤: {str(e)}'}
    
def attempt_autodebug(filepath, error_message):
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            faulty_code = f.read()

        prompt = f"""
üîç –£ –∫–æ–¥—ñ –Ω–∏–∂—á–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–±–æ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó:

‚ùå –ü–æ–º–∏–ª–∫–∞:
{error_message}

üìÑ –ö–æ–¥:
{faulty_code}

üéØ –í–∏–ø—Ä–∞–≤, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ–¥ —Ç–∞–∫, —â–æ–± –ø–æ–º–∏–ª–∫–∞ –∑–Ω–∏–∫–ª–∞. –ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–¥, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å.
"""

        from openai import OpenAI
        client = OpenAI(api_key=API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        fixed_code = response.choices[0].message.content.strip()

        backup_file(filepath)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(fixed_code)

        write_debug_log("üîÅ –ê–≤—Ç–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ GPT")
        return {"status": "success", "message": "‚úÖ –ê–≤—Ç–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ"}
    except Exception as e:
        return {"status": "error", "message": f"‚ùå –ê–≤—Ç–æ–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è: {e}"}

import sqlite3

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def create_connection():
    conn = sqlite3.connect('history.db')
    return conn

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
def save_to_history(action, filename, content, result):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO history (action, filename, content, result)
    VALUES (?, ?, ?, ?)
    ''', (action, filename, content, result))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
def get_history():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM history ORDER BY timestamp DESC LIMIT 10')
    rows = cursor.fetchall()
    conn.close()
    return rows

def auto_commit(commit_msg="‚ôªÔ∏è Rollback after failure"):
    try:
        subprocess.run(["git", "add", "."], cwd=base_path, check=True)
        subprocess.run(["git", "commit", "-m", commit_msg], cwd=base_path, check=True)
        subprocess.run(["git", "push"], cwd=base_path, check=True)
        log_action(f"üì§ Git auto-commit: {commit_msg}")
        save_to_memory({"action": "auto_commit", "message": commit_msg})
        return {"status": "success", "message": "üì§ Git auto-commit –∑–∞–≤–µ—Ä—à–µ–Ω–æ"}
    except subprocess.CalledProcessError as e:
        log_action(f"‚ùå Auto-commit –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        return {"status": "error", "message": f"‚ùå Auto-commit –ø–æ–º–∏–ª–∫–∞: {str(e)}"}


# [BEN] Validation logic inserted here
def write_debug_log(message):
    with open(os.path.join(base_path, 'debug.log'), 'a', encoding='utf-8') as f:
        f.write(f'[{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}] {message}\n')