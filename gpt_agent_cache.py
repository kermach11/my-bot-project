import os
import json
from colorama import init, Fore, Style
init()
import time
import re
import shutil
import subprocess
import traceback
from datetime import datetime, timezone

from config import base_path, request_file, response_file, history_file

def log_action(message):
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
    with open(history_file, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")

def save_to_memory(cmd):
    memory_file = os.path.join(base_path, ".ben_memory.json")
    try:
        if os.path.exists(memory_file):
            with open(memory_file, "r", encoding="utf-8") as f:
                memory = json.load(f)
        else:
            memory = []
        cmd["timestamp"] = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
        memory.append(cmd)
        with open(memory_file, "w", encoding="utf-8") as f:
            json.dump(memory[-100:], f, indent=2, ensure_ascii=False)
    except Exception as e:
        log_action(f"‚ö†Ô∏è Error saving to memory: {str(e)}")

def read_requests():
    if not os.path.exists(request_file):
        return []
    with open(request_file, "r", encoding="utf-8") as f:
        try:
            text = f.read().strip()
            if not text:
                return []
            data = json.loads(text)
            return data if isinstance(data, list) else [data]
        except Exception as e:
            return [{"status": "error", "message": f"‚ùå JSON error: {str(e)}"}]

def write_response(responses):
    with open(response_file, "w", encoding="utf-8") as f:
        json.dump(responses, f, indent=2, ensure_ascii=False)

def clear_cache():
    with open(request_file, "w", encoding="utf-8") as f:
        f.write("")

def handle_command(cmd):
    if not isinstance(cmd, dict):
        return {"status": "error", "message": "‚ùå Invalid command format ‚Äî expected a JSON object"}

    # üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ —Ñ—É–Ω–∫—Ü—ñ–π
    if cmd.get("action") == "append_file" and "def " in cmd.get("content", ""):
        func_name_match = re.search(r"def (\w+)\(", cmd.get("content", ""))
        if func_name_match:
            func_name = func_name_match.group(1)
            with open(os.path.join(base_path, cmd["filename"]), "r", encoding="utf-8") as f:
                if f"def {func_name}(" in f.read():
                    return {"status": "skipped", "message": f"‚ö†Ô∏è Function '{func_name}' already exists in {cmd['filename']}"}

    required_keys = ["action"]
    for key in required_keys:
        if key not in cmd:
            return {"status": "error", "message": f"‚ùå Missing required field: {key}"}
    try:
        action = cmd.get("action")
        filename = cmd.get("filename")
        foldername = cmd.get("foldername")
        content = cmd.get("content", "")
        pattern = cmd.get("pattern")
        replacement = cmd.get("replacement")
        target_folder = cmd.get("target_folder")
        new_name = cmd.get("new_name")

        full_file_path = os.path.join(base_path, filename) if filename else None
        full_folder_path = os.path.join(base_path, foldername) if foldername else None
        dst_folder_path = os.path.join(base_path, target_folder) if target_folder else None
        dst_file_path = os.path.join(dst_folder_path, filename) if target_folder and filename else None

        if action == "create_file":
            with open(full_file_path, "w", encoding="utf-8") as f:
                f.write(content)
            save_to_memory(cmd)  
            return {"status": "success", "message": f"‚úÖ Created file '{filename}'"}

        elif action == "append_file":
            with open(full_file_path, "a", encoding="utf-8") as f:
                f.write(content)
            save_to_memory(cmd)
            return {"status": "success", "message": f"üìå Appended to file '{filename}'"}
        elif action == "scan_all_files":
            result = {}
            for fname in os.listdir(base_path):
                fpath = os.path.join(base_path, fname)
                if os.path.isfile(fpath) and fname.endswith((".py", ".json", ".txt", ".csv")):
                    try:
                        with open(fpath, "r", encoding="utf-8") as f:
                            result[fname] = f.read()
                    except Exception as e:
                        result[fname] = f"‚ö†Ô∏è Error reading: {str(e)}"
            return {"status": "success", "files": result}

        elif action == "update_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    data = f.read()
                updated = re.sub(pattern, replacement, data)
                with open(full_file_path, "w", encoding="utf-8") as f:
                    f.write(updated)
                save_to_memory(cmd)
                return {"status": "success", "message": f"üîÅ Updated file '{filename}'"}
            else:
                return {"status": "error", "message": "File not found"}

        elif action == "replace_in_file":
            if filename.endswith('.py'):
                test_result = handle_command({"action": "test_python", "filename": filename})
            if test_result.get("status") == "error":
                return {"status": "error", "message": f"‚ùå –ü–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é: {test_result.get('message')}"}
            if filename in ["config.py", "api_keys.py", "cache.txt"]:
                return {"status": "error", "message": f"‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª: {filename}"}
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    text = f.read()
                # üß† –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
                backup_path = full_file_path + ".bak"
                with open(backup_path, "w", encoding="utf-8") as f:
                    f.write(text)
                # üìù Git diff –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º
                try:
                    diff_output = subprocess.check_output(["git", "diff", full_file_path], cwd=base_path, text=True)
                    if diff_output.strip():
                        log_action("üìÑ Git diff –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é:" + diff_output)
                except Exception as e:
                    log_action(f"‚ö†Ô∏è Git diff error: {str(e)}")
                # üîÅ –ó–∞–º—ñ–Ω–∞ —á–µ—Ä–µ–∑ regex
                new_text = re.sub(pattern, replacement, text)
                with open(full_file_path, "w", encoding="utf-8") as f:
                    f.write(new_text)
                    
                # üìú –õ–æ–≥ –∑–º—ñ–Ω (git diff)
                log_diff(full_file_path)
                save_to_memory(cmd)
                return {"status": "success", "message": f"‚úèÔ∏è Replaced text in '{filename}'"}
        elif action == "read_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    return {"status": "success", "content": f.read()}
            save_to_memory(cmd)
            return {"status": "error", "message": "File not found"}

        elif action == "search_text_in_file":
            if os.path.exists(full_file_path):
                with open(full_file_path, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                matches = [line for line in lines if pattern in line]
                return {"status": "success", "matches": matches}

        elif action == "create_folder":
            os.makedirs(full_folder_path, exist_ok=True)
            return {"status": "success", "message": f"üìÅ Folder '{foldername}' created"}

        elif action == "delete_file":
            if os.path.exists(full_file_path):
                os.remove(full_file_path)
                save_to_memory(cmd)
                return {"status": "success", "message": f"üóëÔ∏è File '{filename}' deleted"}
            else:
                return {"status": "error", "message": f"File '{filename}' not found"}

        elif action == "rename_file":
            if not os.path.exists(full_file_path):
                return {"status": "error", "message": f"‚ùå File '{filename}' not found"}
            new_path = os.path.join(base_path, new_name)
            os.rename(full_file_path, new_path)
            save_to_memory(cmd)
            return {"status": "success", "message": f"üìÑ File renamed to '{new_name}'"}

        elif action == "copy_file":
            shutil.copy(full_file_path, dst_file_path)
            save_to_memory(cmd)
            return {"status": "success", "message": f"üìÇ Copied '{filename}' to '{target_folder}'"}

        elif action == "read_folder":
            if os.path.exists(full_folder_path):
                files = os.listdir(full_folder_path)
                return {"status": "success", "files": files}
            return {"status": "error", "message": "Folder not found"}

        elif action == "run_python":
            if not os.path.exists(full_file_path):
                return {"status": "error", "message": f"‚ùå File '{filename}' not found"}
            result = subprocess.run(["python", full_file_path], capture_output=True, text=True)
            return {"status": "success", "output": result.stdout, "errors": result.stderr}
        
        elif action == "test_python":
            if os.path.exists(full_file_path):
                try:
                    with open(full_file_path, "r", encoding="utf-8") as f:
                        source = f.read()
                    compile(source, filename, 'exec')
                    return {"status": "success", "message": f"‚úÖ {filename} –ø—Ä–æ–π—à–æ–≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É"}
                except SyntaxError as e:
                    return {"status": "error", "message": f"‚ùå Syntax error in {filename}: {e}"}
            return {"status": "error", "message": "File not found"}

        elif action == "undo_change":
            if os.path.exists(full_file_path + ".bak"):
                shutil.copy(full_file_path + ".bak", full_file_path)
                save_to_memory(cmd)
                return {"status": "success", "message": f"‚Ü©Ô∏è Undo: –≤—ñ–¥–∫–∞—Ç –¥–æ .bak –¥–ª—è '{filename}'"}
            else:
                return {"status": "error", "message": f"‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –¥–ª—è '{filename}'"}

        elif action == "macro":
            if not isinstance(cmd.get("steps"), list):
                return {"status": "error", "message": "‚ùå Invalid macro steps"}
            results = []
            for step in cmd.get("steps", []):
                result = handle_command(step)
                results.append(result)
            return {"status": "success", "steps": results}

        elif action == "list_files":
            return {"status": "success", "files": os.listdir(base_path)}

        elif action == "check_status":
            return {"status": "success", "message": "üü¢ Agent is running"}

        elif action == "show_memory":
            memory_file = os.path.join(base_path, ".ben_memory.json")
            if os.path.exists(memory_file):
                with open(memory_file, "r", encoding="utf-8") as f:
                    memory = json.load(f)
                return {"status": "success", "memory": memory[-20:]}
            else:
                return {"status": "error", "message": "‚ùå Memory file not found"}

        else:
            return {"status": "error", "message": f"‚ùå Unknown action: {action}"}


    except Exception as e:
        traceback.print_exc()
        return {"status": "error", "message": f"‚ùå Exception: {str(e)}"}
def run_self_tests():
    print("\nüß™ Running self-tests...")
    tests_passed = 0
    tests_failed = 0

    # 1. Test basic command structure
    result = handle_command({"action": "check_status"})
    if result.get("status") == "success":
        print("‚úÖ check_status passed")
        tests_passed += 1
    else:
        print("‚ùå check_status failed")
        tests_failed += 1

    # 2. Test missing required key
    result = handle_command({})
    if result.get("status") == "error" and "Missing required field" in result.get("message", ""):
        print("‚úÖ missing field validation passed")
        tests_passed += 1
    else:
        print("‚ùå missing field validation failed")
        tests_failed += 1

    # 3. Test invalid command type
    result = handle_command("not_a_dict")
    if result.get("status") == "error" and "Invalid command format" in result.get("message", ""):
        print("‚úÖ invalid format validation passed")
        tests_passed += 1
    else:
        print("‚ùå invalid format validation failed")
        tests_failed += 1

    # ‚úÖ –ü–ï–†–ï–ù–ï–°–ï–ù–û –°–Æ–î–ò:
    handle_command({"action": "delete_file", "filename": "test_self.txt"})

    result = handle_command({"action": "create_file", "filename": "test_self.txt", "content": "Hello test!"})
    if result.get("status") == "success":
        print("‚úÖ create_file passed")
        tests_passed += 1
    else:
        print("‚ùå create_file failed")
        tests_failed += 1

    result = handle_command({"action": "read_file", "filename": "test_self.txt"})
    if result.get("status") == "success" and "Hello test!" in result.get("content", ""):
        print("‚úÖ read_file passed")
        tests_passed += 1
    else:
        print("‚ùå read_file failed")
        tests_failed += 1

    result = handle_command({"action": "delete_file", "filename": "test_self.txt"})
    if result.get("status") == "success":
        print("‚úÖ delete_file passed")
        tests_passed += 1
    else:
        print("‚ùå delete_file failed")
        tests_failed += 1

    # ‚úÖ –¢—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä ‚Äî —Ñ—ñ–Ω–∞–ª
    print(f"\nüß™ Test results: {tests_passed} passed, {tests_failed} failed")
    return tests_failed == 0
# üß∞ CLI-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥
import argparse

def run_cli():
    parser = argparse.ArgumentParser(description="Ben CLI")
    parser.add_argument("--action", help="–î—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, create_file)")
    parser.add_argument("--filename", help="–Ü–º'—è —Ñ–∞–π–ª—É")
    parser.add_argument("--content", help="–í–º—ñ—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å—É")
    parser.add_argument("--pattern", help="–ü–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É")
    parser.add_argument("--replacement", help="–¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–º—ñ–Ω–∏")
    parser.add_argument("--foldername", help="–Ü–º'—è –ø–∞–ø–∫–∏")
    parser.add_argument("--target_folder", help="–¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞")
    parser.add_argument("--new_name", help="–ù–æ–≤–µ —ñ–º'—è —Ñ–∞–π–ª—É")
    parser.add_argument("--steps", help="JSON-—Ä—è–¥–æ–∫ –¥–ª—è macro-–∫–æ–º–∞–Ω–¥–∏")

    args = parser.parse_args()
    cmd = {k: v for k, v in vars(args).items() if v is not None}
    if cmd.get("action") == "macro" and "steps" in cmd:
        import json
        try:
            cmd["steps"] = json.loads(cmd["steps"])
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É steps: {str(e)}")
            return

    if "action" not in cmd:
        print("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ --action")
        return

    result = handle_command(cmd)
    print("üîß –†–µ–∑—É–ª—å—Ç–∞—Ç:", result)

def git_auto_push(commit_msg="üöÄ Auto-commit by Ben"):
    try:
        subprocess.run(["git", "add", "."], cwd=base_path, check=True)

        # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–º—ñ–Ω–∏
        diff_result = subprocess.run(["git", "diff", "--cached", "--quiet"], cwd=base_path)
        if diff_result.returncode == 0:
            log_action("‚ÑπÔ∏è –ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∫–æ–º—ñ—Ç—É ‚Äî git push –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return {"status": "skipped", "message": "‚ÑπÔ∏è No changes to commit"}

        subprocess.run(["git", "commit", "-m", commit_msg], cwd=base_path, check=True)
        subprocess.run(["git", "push"], cwd=base_path, check=True)
        log_action(f"üì§ Git push: {commit_msg}")
        save_to_memory({"action": "git_push", "message": commit_msg})
        return {"status": "success", "message": "üì§ Git push —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"}

    except subprocess.CalledProcessError as e:
        log_action(f"‚ùå Git push –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        return {"status": "error", "message": f"‚ùå Git push –ø–æ–º–∏–ª–∫–∞: {str(e)}"}
if __name__ == "__main__":
    import argparse
    import sys

    parser = argparse.ArgumentParser(description="GPT Agent CLI")
    parser.add_argument("--cli", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ CLI-—Ä–µ–∂–∏–º")
    parser.add_argument("--test", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ self-—Ç–µ—Å—Ç–∏")
    parser.add_argument("--action")
    parser.add_argument("--filename")
    parser.add_argument("--content")
    parser.add_argument("--pattern")
    parser.add_argument("--replacement")
    parser.add_argument("--foldername")
    parser.add_argument("--target_folder")
    parser.add_argument("--new_name")

    args = parser.parse_args()

    if args.test:
        run_self_tests()
        sys.exit()

    if args.cli:
        cmd = {k: v for k, v in vars(args).items() if v is not None and k not in ["cli", "test"]}
        if "action" not in cmd:
            print("‚ùå –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ --action")
            sys.exit(1)
        result = handle_command(cmd)
        print("üîß –†–µ–∑—É–ª—å—Ç–∞—Ç:", result)
        sys.exit()

    # –Ø–∫—â–æ –Ω–µ CLI —ñ –Ω–µ test ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —è–∫ –∑–≤–∏—á–Ω–æ
    print("üü¢ –ë–µ–Ω –∑–∞–ø—É—â–µ–Ω–∏–π —ñ —Å–ª—É—Ö–∞—î –∫–æ–º–∞–Ω–¥–∏ –∑ cache.txt...")
    while True:
        commands = read_requests()
        print("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥–∏:", commands)

        responses = []
        for cmd in commands:
            result = handle_command(cmd)
            print("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ:", result)
            responses.append(result)
            log_action(result.get("message", str(result)))
            if result.get("status") == "success":
                push_result = git_auto_push(f"‚úÖ Auto-commit: {cmd.get('action')} {cmd.get('filename', '')}")
                print(push_result.get('message', ''))

        if responses:
            for r in responses:
                status = r.get("status")
                if status == "success":
                    print(Fore.GREEN + "‚úÖ", r.get("message", "") + Style.RESET_ALL)
                elif status == "error":
                    print(Fore.RED + "‚ùå", r.get("message", "") + Style.RESET_ALL)
                elif status == "cancelled":
                    print(Fore.YELLOW + "‚ö†Ô∏è", r.get("message", "") + Style.RESET_ALL)
                elif status == "macro":
                    print(Fore.CYAN + "üì¶ –í–∏–∫–æ–Ω–∞–Ω–æ macro-–∫–æ–º–∞–Ω–¥—É:" + Style.RESET_ALL)
                    for step_result in r.get("results", []):
                        print("  -", step_result.get("message", ""))

            print("üíæ –ó–∞–ø–∏—Å—É—é gpt_response.json —ñ –æ—á–∏—â–∞—é cache.txt")
            write_response(responses)
            clear_cache()
        time.sleep(1)

def repeat_last_action():
    memory_file = os.path.join(base_path, ".ben_memory.json")
    if not os.path.exists(memory_file):
        return {"status": "error", "message": "‚ùå Memory file not found"}
    try:
        with open(memory_file, "r", encoding="utf-8") as f:
            memory = json.load(f)
        if not memory:
            return {"status": "error", "message": "‚ùå No memory to repeat"}
        last_cmd = memory[-1]
        save_to_memory(last_cmd)
        return handle_command(last_cmd)
    except Exception as e:
        return {"status": "error", "message": f"‚ùå Repeat error: {str(e)}"}


def log_diff(filepath):
    try:
        result = subprocess.run(["git", "diff", filepath], capture_output=True, text=True)
        diff = result.stdout.strip()
        if diff:
            timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
            with open(history_file, "a", encoding="utf-8") as f:
                f.write(f"[DIFF {timestamp}] File: {filepath}\n{diff}\n---\n")
    except Exception as e:
        with open(history_file, "a", encoding="utf-8") as f:
            f.write(f"[DIFF ERROR] {filepath}: {str(e)}\n")


import autopep8

# –ö—Ä–æ–∫ 2: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤

def fix_indentation(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            code = file.read()

        fixed_code = autopep8.fix_code(code)

        with open(filepath, 'w', encoding='utf-8') as file:
            file.write(fixed_code)

        return {'status': 'success', 'message': f'üßπ –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –≤ —Ñ–∞–π–ª—ñ {filepath}'}
    except Exception as e:
        return {'status': 'error', 'message': f'‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤: {str(e)}'}

# –ö—Ä–æ–∫ 3: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏

def handle_command(cmd):
    try:
        action = cmd.get('action')
        filename = cmd.get('filename')
        full_file_path = os.path.join(base_path, filename) if filename else None

        if full_file_path:
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ fix_indentation –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω–∏
            fix_result = fix_indentation(full_file_path)
            if fix_result['status'] == 'error':
                return fix_result  # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—ñ, –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

        # –î–∞–ª—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è —ñ–Ω—à—ñ –¥—ñ—ó, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –∑–∞–º—ñ–Ω–∏
        if action == 'replace_in_file':
            # –í–∞—à –∫–æ–¥ –∑–∞–º—ñ–Ω–∏
            pass

        return {'status': 'success', 'message': '–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'}
    except Exception as e:
        return {'status': 'error', 'message': f'‚ùå Exception: {str(e)}'}